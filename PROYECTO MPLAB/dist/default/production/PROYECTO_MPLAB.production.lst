

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Fri Feb 04 12:01:14 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    32                           	dabs	1,0x7E,2
    33  0000                     
    34                           ; Version 2.20
    35                           ; Generated 12/02/2020 GMT
    36                           ; 
    37                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F887 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     	;# 
    69  0001                     	;# 
    70  0002                     	;# 
    71  0003                     	;# 
    72  0004                     	;# 
    73  0005                     	;# 
    74  0006                     	;# 
    75  0007                     	;# 
    76  0008                     	;# 
    77  0009                     	;# 
    78  000A                     	;# 
    79  000B                     	;# 
    80  000C                     	;# 
    81  000D                     	;# 
    82  000E                     	;# 
    83  000E                     	;# 
    84  000F                     	;# 
    85  0010                     	;# 
    86  0011                     	;# 
    87  0012                     	;# 
    88  0013                     	;# 
    89  0014                     	;# 
    90  0015                     	;# 
    91  0015                     	;# 
    92  0016                     	;# 
    93  0017                     	;# 
    94  0018                     	;# 
    95  0019                     	;# 
    96  001A                     	;# 
    97  001B                     	;# 
    98  001B                     	;# 
    99  001C                     	;# 
   100  001D                     	;# 
   101  001E                     	;# 
   102  001F                     	;# 
   103  0081                     	;# 
   104  0085                     	;# 
   105  0086                     	;# 
   106  0087                     	;# 
   107  0088                     	;# 
   108  0089                     	;# 
   109  008C                     	;# 
   110  008D                     	;# 
   111  008E                     	;# 
   112  008F                     	;# 
   113  0090                     	;# 
   114  0091                     	;# 
   115  0092                     	;# 
   116  0093                     	;# 
   117  0093                     	;# 
   118  0093                     	;# 
   119  0094                     	;# 
   120  0095                     	;# 
   121  0096                     	;# 
   122  0097                     	;# 
   123  0098                     	;# 
   124  0099                     	;# 
   125  009A                     	;# 
   126  009B                     	;# 
   127  009C                     	;# 
   128  009D                     	;# 
   129  009E                     	;# 
   130  009F                     	;# 
   131  0105                     	;# 
   132  0107                     	;# 
   133  0108                     	;# 
   134  0109                     	;# 
   135  010C                     	;# 
   136  010C                     	;# 
   137  010D                     	;# 
   138  010E                     	;# 
   139  010F                     	;# 
   140  0185                     	;# 
   141  0187                     	;# 
   142  0188                     	;# 
   143  0189                     	;# 
   144  018C                     	;# 
   145  018D                     	;# 
   146  0000                     	;# 
   147  0001                     	;# 
   148  0002                     	;# 
   149  0003                     	;# 
   150  0004                     	;# 
   151  0005                     	;# 
   152  0006                     	;# 
   153  0007                     	;# 
   154  0008                     	;# 
   155  0009                     	;# 
   156  000A                     	;# 
   157  000B                     	;# 
   158  000C                     	;# 
   159  000D                     	;# 
   160  000E                     	;# 
   161  000E                     	;# 
   162  000F                     	;# 
   163  0010                     	;# 
   164  0011                     	;# 
   165  0012                     	;# 
   166  0013                     	;# 
   167  0014                     	;# 
   168  0015                     	;# 
   169  0015                     	;# 
   170  0016                     	;# 
   171  0017                     	;# 
   172  0018                     	;# 
   173  0019                     	;# 
   174  001A                     	;# 
   175  001B                     	;# 
   176  001B                     	;# 
   177  001C                     	;# 
   178  001D                     	;# 
   179  001E                     	;# 
   180  001F                     	;# 
   181  0081                     	;# 
   182  0085                     	;# 
   183  0086                     	;# 
   184  0087                     	;# 
   185  0088                     	;# 
   186  0089                     	;# 
   187  008C                     	;# 
   188  008D                     	;# 
   189  008E                     	;# 
   190  008F                     	;# 
   191  0090                     	;# 
   192  0091                     	;# 
   193  0092                     	;# 
   194  0093                     	;# 
   195  0093                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0095                     	;# 
   199  0096                     	;# 
   200  0097                     	;# 
   201  0098                     	;# 
   202  0099                     	;# 
   203  009A                     	;# 
   204  009B                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  009F                     	;# 
   209  0105                     	;# 
   210  0107                     	;# 
   211  0108                     	;# 
   212  0109                     	;# 
   213  010C                     	;# 
   214  010C                     	;# 
   215  010D                     	;# 
   216  010E                     	;# 
   217  010F                     	;# 
   218  0185                     	;# 
   219  0187                     	;# 
   220  0188                     	;# 
   221  0189                     	;# 
   222  018C                     	;# 
   223  018D                     	;# 
   224  0000                     	;# 
   225  0001                     	;# 
   226  0002                     	;# 
   227  0003                     	;# 
   228  0004                     	;# 
   229  0005                     	;# 
   230  0006                     	;# 
   231  0007                     	;# 
   232  0008                     	;# 
   233  0009                     	;# 
   234  000A                     	;# 
   235  000B                     	;# 
   236  000C                     	;# 
   237  000D                     	;# 
   238  000E                     	;# 
   239  000E                     	;# 
   240  000F                     	;# 
   241  0010                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0013                     	;# 
   245  0014                     	;# 
   246  0015                     	;# 
   247  0015                     	;# 
   248  0016                     	;# 
   249  0017                     	;# 
   250  0018                     	;# 
   251  0019                     	;# 
   252  001A                     	;# 
   253  001B                     	;# 
   254  001B                     	;# 
   255  001C                     	;# 
   256  001D                     	;# 
   257  001E                     	;# 
   258  001F                     	;# 
   259  0081                     	;# 
   260  0085                     	;# 
   261  0086                     	;# 
   262  0087                     	;# 
   263  0088                     	;# 
   264  0089                     	;# 
   265  008C                     	;# 
   266  008D                     	;# 
   267  008E                     	;# 
   268  008F                     	;# 
   269  0090                     	;# 
   270  0091                     	;# 
   271  0092                     	;# 
   272  0093                     	;# 
   273  0093                     	;# 
   274  0093                     	;# 
   275  0094                     	;# 
   276  0095                     	;# 
   277  0096                     	;# 
   278  0097                     	;# 
   279  0098                     	;# 
   280  0099                     	;# 
   281  009A                     	;# 
   282  009B                     	;# 
   283  009C                     	;# 
   284  009D                     	;# 
   285  009E                     	;# 
   286  009F                     	;# 
   287  0105                     	;# 
   288  0107                     	;# 
   289  0108                     	;# 
   290  0109                     	;# 
   291  010C                     	;# 
   292  010C                     	;# 
   293  010D                     	;# 
   294  010E                     	;# 
   295  010F                     	;# 
   296  0185                     	;# 
   297  0187                     	;# 
   298  0188                     	;# 
   299  0189                     	;# 
   300  018C                     	;# 
   301  018D                     	;# 
   302  0000                     	;# 
   303  0001                     	;# 
   304  0002                     	;# 
   305  0003                     	;# 
   306  0004                     	;# 
   307  0005                     	;# 
   308  0006                     	;# 
   309  0007                     	;# 
   310  0008                     	;# 
   311  0009                     	;# 
   312  000A                     	;# 
   313  000B                     	;# 
   314  000C                     	;# 
   315  000D                     	;# 
   316  000E                     	;# 
   317  000E                     	;# 
   318  000F                     	;# 
   319  0010                     	;# 
   320  0011                     	;# 
   321  0012                     	;# 
   322  0013                     	;# 
   323  0014                     	;# 
   324  0015                     	;# 
   325  0015                     	;# 
   326  0016                     	;# 
   327  0017                     	;# 
   328  0018                     	;# 
   329  0019                     	;# 
   330  001A                     	;# 
   331  001B                     	;# 
   332  001B                     	;# 
   333  001C                     	;# 
   334  001D                     	;# 
   335  001E                     	;# 
   336  001F                     	;# 
   337  0081                     	;# 
   338  0085                     	;# 
   339  0086                     	;# 
   340  0087                     	;# 
   341  0088                     	;# 
   342  0089                     	;# 
   343  008C                     	;# 
   344  008D                     	;# 
   345  008E                     	;# 
   346  008F                     	;# 
   347  0090                     	;# 
   348  0091                     	;# 
   349  0092                     	;# 
   350  0093                     	;# 
   351  0093                     	;# 
   352  0093                     	;# 
   353  0094                     	;# 
   354  0095                     	;# 
   355  0096                     	;# 
   356  0097                     	;# 
   357  0098                     	;# 
   358  0099                     	;# 
   359  009A                     	;# 
   360  009B                     	;# 
   361  009C                     	;# 
   362  009D                     	;# 
   363  009E                     	;# 
   364  009F                     	;# 
   365  0105                     	;# 
   366  0107                     	;# 
   367  0108                     	;# 
   368  0109                     	;# 
   369  010C                     	;# 
   370  010C                     	;# 
   371  010D                     	;# 
   372  010E                     	;# 
   373  010F                     	;# 
   374  0185                     	;# 
   375  0187                     	;# 
   376  0188                     	;# 
   377  0189                     	;# 
   378  018C                     	;# 
   379  018D                     	;# 
   380                           
   381                           	psect	strings
   382  0389                     __pstrings:
   383  0389                     stringtab:
   384  0389                     __stringtab:
   385                           
   386                           ;	String table - string pointers are 1 byte each
   387  0389  1BFF               	btfsc	btemp+1,7
   388  038A  2B93               	ljmp	stringcode
   389  038B  1383               	bcf	3,7
   390  038C  187F               	btfsc	btemp+1,0
   391  038D  1783               	bsf	3,7
   392  038E  0800               	movf	0,w
   393  038F  0A84               	incf	4,f
   394  0390  1903               	skipnz
   395  0391  0AFF               	incf	btemp+1,f
   396  0392  0008               	return
   397  0393                     stringcode:
   398  0393                     stringdir:
   399  0393  3003               	movlw	high stringdir
   400  0394  008A               	movwf	10
   401  0395  0804               	movf	4,w
   402  0396  0A84               	incf	4,f
   403  0397  0782               	addwf	2,f
   404  0398                     __stringbase:
   405  0398  3400               	retlw	0
   406  0399                     __end_of__stringtab:
   407  0399                     _dpowers:
   408  0399  3401               	retlw	1
   409  039A  3400               	retlw	0
   410  039B  340A               	retlw	10
   411  039C  3400               	retlw	0
   412  039D  3464               	retlw	100
   413  039E  3400               	retlw	0
   414  039F  34E8               	retlw	232
   415  03A0  3403               	retlw	3
   416  03A1  3410               	retlw	16
   417  03A2  3427               	retlw	39
   418  03A3                     __end_of_dpowers:
   419  001E                     _ADRESH	set	30
   420  0008                     _PORTD	set	8
   421  000B                     _INTCONbits	set	11
   422  0006                     _PORTB	set	6
   423  0009                     _PORTE	set	9
   424  0005                     _PORTA	set	5
   425  001F                     _ADCON0bits	set	31
   426  000C                     _PIR1bits	set	12
   427  0038                     _RC0	set	56
   428  0039                     _RC1	set	57
   429  0088                     _TRISD	set	136
   430  008C                     _PIE1bits	set	140
   431  009F                     _ADCON1bits	set	159
   432  008F                     _OSCCONbits	set	143
   433  0089                     _TRISE	set	137
   434  0086                     _TRISB	set	134
   435  0085                     _TRISA	set	133
   436  0438                     _TRISC0	set	1080
   437  0439                     _TRISC1	set	1081
   438  0189                     _ANSELH	set	393
   439  0188                     _ANSEL	set	392
   440  03A3                     STR_1:
   441  03A3  3453               	retlw	83	;'S'
   442  03A4  3431               	retlw	49	;'1'
   443  03A5  343A               	retlw	58	;':'
   444  03A6  3420               	retlw	32	;' '
   445  03A7  3420               	retlw	32	;' '
   446  03A8  3420               	retlw	32	;' '
   447  03A9  3420               	retlw	32	;' '
   448  03AA  3453               	retlw	83	;'S'
   449  03AB  3432               	retlw	50	;'2'
   450  03AC  343A               	retlw	58	;':'
   451  03AD  3420               	retlw	32	;' '
   452  03AE  3420               	retlw	32	;' '
   453  03AF  3420               	retlw	32	;' '
   454  03B0  3453               	retlw	83	;'S'
   455  03B1  3433               	retlw	51	;'3'
   456  03B2  343A               	retlw	58	;':'
   457  03B3  3400               	retlw	0
   458  03B4                     STR_2:
   459  03B4  3425               	retlw	37	;'%'
   460  03B5  3464               	retlw	100	;'d'
   461  03B6  342E               	retlw	46	;'.'
   462  03B7  3425               	retlw	37	;'%'
   463  03B8  3464               	retlw	100	;'d'
   464  03B9  3425               	retlw	37	;'%'
   465  03BA  3464               	retlw	100	;'d'
   466  03BB  3400               	retlw	0
   467  03B4                     
   468                           	psect	cinit
   469  000F                     start_initialization:	
   470                           ; #config settings
   471                           
   472  000F                     __initialization:
   473                           
   474                           ; Clear objects allocated to COMMON
   475  000F  01F8               	clrf	__pbssCOMMON& (0+127)
   476  0010  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   477  0011  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   478                           
   479                           ; Clear objects allocated to BANK0
   480  0012  1383               	bcf	3,7	;select IRP bank0
   481  0013  3042               	movlw	low __pbssBANK0
   482  0014  0084               	movwf	4
   483  0015  305A               	movlw	low (__pbssBANK0+24)
   484  0016  120A  118A  24BC  120A  118A  	fcall	clear_ram0
   485  001B                     end_of_initialization:	
   486                           ;End of C runtime variable initialization code
   487                           
   488  001B                     __end_of__initialization:
   489  001B  0183               	clrf	3
   490  001C  120A  118A  2A7F   	ljmp	_main	;jump to C main() function
   491                           
   492                           	psect	bssCOMMON
   493  0078                     __pbssCOMMON:
   494  0078                     _cen:
   495  0078                     	ds	1
   496  0079                     _dec:
   497  0079                     	ds	1
   498  007A                     _uni:
   499  007A                     	ds	1
   500                           
   501                           	psect	bssBANK0
   502  0042                     __pbssBANK0:
   503  0042                     _cont2:
   504  0042                     	ds	1
   505  0043                     _cont1:
   506  0043                     	ds	1
   507  0044                     _buffer2:
   508  0044                     	ds	10
   509  004E                     _buffer1:
   510  004E                     	ds	10
   511  0058                     _vol2:
   512  0058                     	ds	1
   513  0059                     _vol1:
   514  0059                     	ds	1
   515                           
   516                           	psect	clrtext
   517  04BC                     clear_ram0:	
   518                           ;	Called with FSR containing the base address, and
   519                           ;	W with the last address+1
   520                           
   521  04BC  0064               	clrwdt	;clear the watchdog before getting into this loop
   522  04BD                     clrloop0:
   523  04BD  0180               	clrf	0	;clear RAM location pointed to by FSR
   524  04BE  0A84               	incf	4,f	;increment pointer
   525  04BF  0604               	xorwf	4,w	;XOR with final address
   526  04C0  1903               	btfsc	3,2	;have we reached the end yet?
   527  04C1  3400               	retlw	0	;all done for this memory range, return
   528  04C2  0604               	xorwf	4,w	;XOR again to restore value
   529  04C3  2CBD               	goto	clrloop0	;do the next byte
   530                           
   531                           	psect	cstackCOMMON
   532  0070                     __pcstackCOMMON:
   533  0070                     ?_ADC:
   534  0070                     ??_ADC:	
   535                           ; 1 bytes @ 0x0
   536                           
   537  0070                     ?_setup:	
   538                           ; 1 bytes @ 0x0
   539                           
   540  0070                     ?_conversion:	
   541                           ; 1 bytes @ 0x0
   542                           
   543  0070                     ?_conversion_char:	
   544                           ; 1 bytes @ 0x0
   545                           
   546  0070                     ?_Iniciar_LCD:	
   547                           ; 1 bytes @ 0x0
   548                           
   549  0070                     ?_Limpiar_pantallaLCD:	
   550                           ; 1 bytes @ 0x0
   551                           
   552  0070                     ?_isr:	
   553                           ; 1 bytes @ 0x0
   554                           
   555  0070                     ?_main:	
   556                           ; 1 bytes @ 0x0
   557                           
   558  0070                     ?_prender_ELCD:	
   559                           ; 1 bytes @ 0x0
   560                           
   561  0070                     ?_Escribir_comandoLCD:	
   562                           ; 1 bytes @ 0x0
   563                           
   564  0070                     ?_Escribir_datosLCD:	
   565                           ; 1 bytes @ 0x0
   566                           
   567                           
   568                           ; 1 bytes @ 0x0
   569  0070                     	ds	1
   570  0071                     ??_isr:
   571                           
   572                           ; 1 bytes @ 0x1
   573  0071                     	ds	2
   574  0073                     ??_conversion:
   575  0073                     ??_prender_ELCD:	
   576                           ; 1 bytes @ 0x3
   577                           
   578  0073                     ?___awdiv:	
   579                           ; 1 bytes @ 0x3
   580                           
   581  0073                     ?___awmod:	
   582                           ; 2 bytes @ 0x3
   583                           
   584  0073                     ?___lwdiv:	
   585                           ; 2 bytes @ 0x3
   586                           
   587  0073                     ___awdiv@divisor:	
   588                           ; 2 bytes @ 0x3
   589                           
   590  0073                     ___awmod@divisor:	
   591                           ; 2 bytes @ 0x3
   592                           
   593  0073                     ___lwdiv@divisor:	
   594                           ; 2 bytes @ 0x3
   595                           
   596                           
   597                           ; 2 bytes @ 0x3
   598  0073                     	ds	1
   599  0074                     ??_Escribir_comandoLCD:
   600  0074                     ??_Escribir_datosLCD:	
   601                           ; 1 bytes @ 0x4
   602                           
   603  0074                     Escribir_comandoLCD@Comando:	
   604                           ; 1 bytes @ 0x4
   605                           
   606  0074                     Escribir_datosLCD@LCDchar:	
   607                           ; 1 bytes @ 0x4
   608                           
   609                           
   610                           ; 1 bytes @ 0x4
   611  0074                     	ds	1
   612  0075                     ?_set_cursor:
   613  0075                     ?_Escribir_stringLCD:	
   614                           ; 1 bytes @ 0x5
   615                           
   616  0075                     ??_Iniciar_LCD:	
   617                           ; 1 bytes @ 0x5
   618                           
   619  0075                     ??_Limpiar_pantallaLCD:	
   620                           ; 1 bytes @ 0x5
   621                           
   622  0075                     set_cursor@b:	
   623                           ; 1 bytes @ 0x5
   624                           
   625  0075                     Escribir_stringLCD@d:	
   626                           ; 1 bytes @ 0x5
   627                           
   628  0075                     ___awdiv@dividend:	
   629                           ; 2 bytes @ 0x5
   630                           
   631  0075                     ___awmod@dividend:	
   632                           ; 2 bytes @ 0x5
   633                           
   634  0075                     ___lwdiv@dividend:	
   635                           ; 2 bytes @ 0x5
   636                           
   637                           
   638                           ; 2 bytes @ 0x5
   639  0075                     	ds	1
   640  0076                     ??_set_cursor:
   641  0076                     set_cursor@a:	
   642                           ; 1 bytes @ 0x6
   643                           
   644                           
   645                           ; 1 bytes @ 0x6
   646  0076                     	ds	1
   647  0077                     ??_setup:
   648  0077                     ??_Escribir_stringLCD:	
   649                           ; 1 bytes @ 0x7
   650                           
   651  0077                     ??___awdiv:	
   652                           ; 1 bytes @ 0x7
   653                           
   654  0077                     ??___awmod:	
   655                           ; 1 bytes @ 0x7
   656                           
   657  0077                     ??___lwdiv:	
   658                           ; 1 bytes @ 0x7
   659                           
   660                           
   661                           ; 1 bytes @ 0x7
   662  0077                     	ds	1
   663                           
   664                           	psect	cstackBANK0
   665  0020                     __pcstackBANK0:
   666  0020                     ___awdiv@counter:
   667  0020                     ___awmod@counter:	
   668                           ; 1 bytes @ 0x0
   669                           
   670  0020                     ___lwdiv@counter:	
   671                           ; 1 bytes @ 0x0
   672                           
   673                           
   674                           ; 1 bytes @ 0x0
   675  0020                     	ds	1
   676  0021                     ___awdiv@sign:
   677  0021                     ___awmod@sign:	
   678                           ; 1 bytes @ 0x1
   679                           
   680  0021                     ___lwdiv@quotient:	
   681                           ; 1 bytes @ 0x1
   682                           
   683                           
   684                           ; 2 bytes @ 0x1
   685  0021                     	ds	1
   686  0022                     ___awdiv@quotient:
   687                           
   688                           ; 2 bytes @ 0x2
   689  0022                     	ds	1
   690  0023                     ?___lwmod:
   691  0023                     ___lwmod@divisor:	
   692                           ; 2 bytes @ 0x3
   693                           
   694                           
   695                           ; 2 bytes @ 0x3
   696  0023                     	ds	1
   697  0024                     ?_divisor:
   698  0024                     divisor@dig:	
   699                           ; 1 bytes @ 0x4
   700                           
   701                           
   702                           ; 1 bytes @ 0x4
   703  0024                     	ds	1
   704  0025                     ??_divisor:
   705  0025                     ___lwmod@dividend:	
   706                           ; 1 bytes @ 0x5
   707                           
   708                           
   709                           ; 2 bytes @ 0x5
   710  0025                     	ds	2
   711  0027                     ??___lwmod:
   712  0027                     divisor@a:	
   713                           ; 1 bytes @ 0x7
   714                           
   715                           
   716                           ; 1 bytes @ 0x7
   717  0027                     	ds	1
   718  0028                     ___lwmod@counter:
   719  0028                     divisor@b:	
   720                           ; 1 bytes @ 0x8
   721                           
   722                           
   723                           ; 2 bytes @ 0x8
   724  0028                     	ds	1
   725  0029                     ?_sprintf:
   726  0029                     sprintf@f:	
   727                           ; 2 bytes @ 0x9
   728                           
   729                           
   730                           ; 1 bytes @ 0x9
   731  0029                     	ds	1
   732  002A                     divisor@i:
   733                           
   734                           ; 2 bytes @ 0xA
   735  002A                     	ds	6
   736  0030                     ??_sprintf:
   737                           
   738                           ; 1 bytes @ 0x10
   739  0030                     	ds	3
   740  0033                     sprintf@ap:
   741                           
   742                           ; 1 bytes @ 0x13
   743  0033                     	ds	1
   744  0034                     sprintf@flag:
   745                           
   746                           ; 1 bytes @ 0x14
   747  0034                     	ds	1
   748  0035                     sprintf@prec:
   749                           
   750                           ; 1 bytes @ 0x15
   751  0035                     	ds	1
   752  0036                     sprintf@val:
   753                           
   754                           ; 2 bytes @ 0x16
   755  0036                     	ds	2
   756  0038                     sprintf@sp:
   757                           
   758                           ; 1 bytes @ 0x18
   759  0038                     	ds	1
   760  0039                     sprintf@c:
   761                           
   762                           ; 1 bytes @ 0x19
   763  0039                     	ds	1
   764  003A                     ??_conversion_char:
   765                           
   766                           ; 1 bytes @ 0x1A
   767  003A                     	ds	7
   768  0041                     ??_main:
   769                           
   770                           ; 1 bytes @ 0x21
   771  0041                     	ds	1
   772                           
   773                           	psect	maintext
   774  027F                     __pmaintext:	
   775 ;;
   776 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   777 ;;
   778 ;; *************** function _main *****************
   779 ;; Defined at:
   780 ;;		line 70 in file "LAB2.c"
   781 ;; Parameters:    Size  Location     Type
   782 ;;		None
   783 ;; Auto vars:     Size  Location     Type
   784 ;;		None
   785 ;; Return value:  Size  Location     Type
   786 ;;                  1    wreg      void 
   787 ;; Registers used:
   788 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   789 ;; Tracked objects:
   790 ;;		On entry : B00/0
   791 ;;		On exit  : 0/0
   792 ;;		Unchanged: 0/0
   793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   794 ;;      Params:         0       0       0       0       0
   795 ;;      Locals:         0       0       0       0       0
   796 ;;      Temps:          0       1       0       0       0
   797 ;;      Totals:         0       1       0       0       0
   798 ;;Total ram usage:        1 bytes
   799 ;; Hardware stack levels required when called: 6
   800 ;; This function calls:
   801 ;;		_Escribir_stringLCD
   802 ;;		_conversion
   803 ;;		_conversion_char
   804 ;;		_set_cursor
   805 ;;		_setup
   806 ;; This function is called by:
   807 ;;		Startup code after reset
   808 ;; This function uses a non-reentrant model
   809 ;;
   810                           
   811                           
   812                           ;psect for function _main
   813  027F                     _main:
   814  027F                     l1662:	
   815                           ;incstack = 0
   816                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   817                           
   818                           
   819                           ;LAB2.c: 71:     setup();
   820  027F  120A  118A  234E  120A  118A  	fcall	_setup
   821  0284                     l1664:
   822                           
   823                           ;LAB2.c: 72:     ADCON0bits.GO = 1;
   824  0284  1283               	bcf	3,5	;RP0=0, select bank0
   825  0285  1303               	bcf	3,6	;RP1=0, select bank0
   826  0286  149F               	bsf	31,1	;volatile
   827  0287                     l79:	
   828                           ;LAB2.c: 73:     while(1){
   829                           
   830                           
   831                           ;LAB2.c: 75:         conversion();
   832  0287  120A  118A  23BC  120A  118A  	fcall	_conversion
   833                           
   834                           ;LAB2.c: 78:         set_cursor(1,1);
   835  028C  01F5               	clrf	set_cursor@b
   836  028D  0AF5               	incf	set_cursor@b,f
   837  028E  3001               	movlw	1
   838  028F  120A  118A  244F  120A  118A  	fcall	_set_cursor
   839  0294                     l1666:
   840                           
   841                           ;LAB2.c: 79:         Escribir_stringLCD("S1:    S2:   S3:");
   842  0294  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   843  0295  00F5               	movwf	Escribir_stringLCD@d
   844  0296  3080               	movlw	128
   845  0297  00F6               	movwf	Escribir_stringLCD@d+1
   846  0298  120A  118A  23E8  120A  118A  	fcall	_Escribir_stringLCD
   847  029D                     l1668:
   848                           
   849                           ;LAB2.c: 81:         conversion_char();
   850  029D  120A  118A  2172  120A  118A  	fcall	_conversion_char
   851                           
   852                           ;LAB2.c: 83:         set_cursor(2,1);
   853  02A2  01F5               	clrf	set_cursor@b
   854  02A3  0AF5               	incf	set_cursor@b,f
   855  02A4  3002               	movlw	2
   856  02A5  120A  118A  244F  120A  118A  	fcall	_set_cursor
   857  02AA                     l1670:
   858                           
   859                           ;LAB2.c: 84:         Escribir_stringLCD(buffer1);
   860  02AA  304E               	movlw	(low (_buffer1| 0))& (0+255)
   861  02AB  00F5               	movwf	Escribir_stringLCD@d
   862  02AC  3000               	movlw	0
   863  02AD  00F6               	movwf	Escribir_stringLCD@d+1
   864  02AE  120A  118A  23E8  120A  118A  	fcall	_Escribir_stringLCD
   865  02B3                     l1672:
   866                           
   867                           ;LAB2.c: 85:         set_cursor(2,7);
   868  02B3  3007               	movlw	7
   869  02B4  1283               	bcf	3,5	;RP0=0, select bank0
   870  02B5  1303               	bcf	3,6	;RP1=0, select bank0
   871  02B6  00C1               	movwf	??_main
   872  02B7  0841               	movf	??_main,w
   873  02B8  00F5               	movwf	set_cursor@b
   874  02B9  3002               	movlw	2
   875  02BA  120A  118A  244F  120A  118A  	fcall	_set_cursor
   876                           
   877                           ;LAB2.c: 86:         Escribir_stringLCD(buffer2);
   878  02BF  3044               	movlw	(low (_buffer2| 0))& (0+255)
   879  02C0  00F5               	movwf	Escribir_stringLCD@d
   880  02C1  3000               	movlw	0
   881  02C2  00F6               	movwf	Escribir_stringLCD@d+1
   882  02C3  120A  118A  23E8  120A  118A  	fcall	_Escribir_stringLCD
   883  02C8  2A87               	goto	l79
   884  02C9  120A  118A  280C   	ljmp	start
   885  02CC                     __end_of_main:
   886                           
   887                           	psect	text1
   888  034E                     __ptext1:	
   889 ;; *************** function _setup *****************
   890 ;; Defined at:
   891 ;;		line 94 in file "LAB2.c"
   892 ;; Parameters:    Size  Location     Type
   893 ;;		None
   894 ;; Auto vars:     Size  Location     Type
   895 ;;		None
   896 ;; Return value:  Size  Location     Type
   897 ;;                  1    wreg      void 
   898 ;; Registers used:
   899 ;;		wreg, status,2, status,0, pclath, cstack
   900 ;; Tracked objects:
   901 ;;		On entry : 0/0
   902 ;;		On exit  : 0/0
   903 ;;		Unchanged: 0/0
   904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   905 ;;      Params:         0       0       0       0       0
   906 ;;      Locals:         0       0       0       0       0
   907 ;;      Temps:          1       0       0       0       0
   908 ;;      Totals:         1       0       0       0       0
   909 ;;Total ram usage:        1 bytes
   910 ;; Hardware stack levels used: 1
   911 ;; Hardware stack levels required when called: 5
   912 ;; This function calls:
   913 ;;		_Iniciar_LCD
   914 ;;		_Limpiar_pantallaLCD
   915 ;; This function is called by:
   916 ;;		_main
   917 ;; This function uses a non-reentrant model
   918 ;;
   919                           
   920                           
   921                           ;psect for function _setup
   922  034E                     _setup:
   923  034E                     l1406:	
   924                           ;incstack = 0
   925                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   926                           
   927                           
   928                           ;LAB2.c: 97:     ANSEL = 0b0011;
   929  034E  3003               	movlw	3
   930  034F  1683               	bsf	3,5	;RP0=1, select bank3
   931  0350  1703               	bsf	3,6	;RP1=1, select bank3
   932  0351  0088               	movwf	8	;volatile
   933  0352                     l1408:
   934                           
   935                           ;LAB2.c: 98:     ANSELH = 0;
   936  0352  0189               	clrf	9	;volatile
   937  0353                     l1410:
   938                           
   939                           ;LAB2.c: 100:     TRISA = 0b0011;
   940  0353  3003               	movlw	3
   941  0354  1683               	bsf	3,5	;RP0=1, select bank1
   942  0355  1303               	bcf	3,6	;RP1=0, select bank1
   943  0356  0085               	movwf	5	;volatile
   944                           
   945                           ;LAB2.c: 101:     TRISB = 0;
   946  0357  0186               	clrf	6	;volatile
   947                           
   948                           ;LAB2.c: 102:     TRISE = 0;
   949  0358  0189               	clrf	9	;volatile
   950                           
   951                           ;LAB2.c: 104:     PORTA = 0;
   952  0359  1283               	bcf	3,5	;RP0=0, select bank0
   953  035A  1303               	bcf	3,6	;RP1=0, select bank0
   954  035B  0185               	clrf	5	;volatile
   955                           
   956                           ;LAB2.c: 105:     PORTE = 0;
   957  035C  0189               	clrf	9	;volatile
   958                           
   959                           ;LAB2.c: 106:     PORTB = 0;
   960  035D  0186               	clrf	6	;volatile
   961  035E                     l1412:
   962                           
   963                           ;LAB2.c: 109:     OSCCONbits.IRCF = 0b0110;
   964  035E  1683               	bsf	3,5	;RP0=1, select bank1
   965  035F  1303               	bcf	3,6	;RP1=0, select bank1
   966  0360  080F               	movf	15,w	;volatile
   967  0361  398F               	andlw	-113
   968  0362  3860               	iorlw	96
   969  0363  008F               	movwf	15	;volatile
   970  0364                     l1414:
   971                           
   972                           ;LAB2.c: 110:     OSCCONbits.SCS = 1;
   973  0364  140F               	bsf	15,0	;volatile
   974  0365                     l1416:
   975                           
   976                           ;LAB2.c: 113:     ADCON1bits.ADFM = 0;
   977  0365  139F               	bcf	31,7	;volatile
   978  0366                     l1418:
   979                           
   980                           ;LAB2.c: 114:     ADCON1bits.VCFG0 = 0;
   981  0366  121F               	bcf	31,4	;volatile
   982  0367                     l1420:
   983                           
   984                           ;LAB2.c: 115:     ADCON1bits.VCFG1 = 0;
   985  0367  129F               	bcf	31,5	;volatile
   986  0368                     l1422:
   987                           
   988                           ;LAB2.c: 117:     ADCON0bits.ADCS = 0b01;
   989  0368  1283               	bcf	3,5	;RP0=0, select bank0
   990  0369  1303               	bcf	3,6	;RP1=0, select bank0
   991  036A  081F               	movf	31,w	;volatile
   992  036B  393F               	andlw	-193
   993  036C  3840               	iorlw	64
   994  036D  009F               	movwf	31	;volatile
   995  036E                     l1424:
   996                           
   997                           ;LAB2.c: 118:     ADCON0bits.CHS = 0;
   998  036E  30C3               	movlw	-61
   999  036F  059F               	andwf	31,f	;volatile
  1000  0370                     l1426:
  1001                           
  1002                           ;LAB2.c: 119:     ADCON0bits.ADON = 1;
  1003  0370  141F               	bsf	31,0	;volatile
  1004  0371                     l1428:
  1005                           
  1006                           ;LAB2.c: 120:     _delay((unsigned long)((50)*(4000000/4000000.0)));
  1007  0371  3010               	movlw	16
  1008  0372  00F7               	movwf	??_setup
  1009  0373                     u1237:
  1010  0373  0BF7               	decfsz	??_setup,f
  1011  0374  2B73               	goto	u1237
  1012  0375  0000               	nop
  1013  0376                     l1430:
  1014                           
  1015                           ;LAB2.c: 123:     PIR1bits.ADIF = 0;
  1016  0376  1283               	bcf	3,5	;RP0=0, select bank0
  1017  0377  1303               	bcf	3,6	;RP1=0, select bank0
  1018  0378  130C               	bcf	12,6	;volatile
  1019  0379                     l1432:
  1020                           
  1021                           ;LAB2.c: 124:     PIE1bits.ADIE = 1;
  1022  0379  1683               	bsf	3,5	;RP0=1, select bank1
  1023  037A  1303               	bcf	3,6	;RP1=0, select bank1
  1024  037B  170C               	bsf	12,6	;volatile
  1025  037C                     l1434:
  1026                           
  1027                           ;LAB2.c: 125:     INTCONbits.PEIE = 1;
  1028  037C  170B               	bsf	11,6	;volatile
  1029  037D                     l1436:
  1030                           
  1031                           ;LAB2.c: 126:     INTCONbits.GIE = 1;
  1032  037D  178B               	bsf	11,7	;volatile
  1033  037E                     l1438:
  1034                           
  1035                           ;LAB2.c: 129:     Iniciar_LCD();
  1036  037E  120A  118A  240E  120A  118A  	fcall	_Iniciar_LCD
  1037  0383                     l1440:
  1038                           
  1039                           ;LAB2.c: 130:     Limpiar_pantallaLCD();
  1040  0383  120A  118A  2494  120A  118A  	fcall	_Limpiar_pantallaLCD
  1041  0388                     l85:
  1042  0388  0008               	return
  1043  0389                     __end_of_setup:
  1044                           
  1045                           	psect	text2
  1046  0494                     __ptext2:	
  1047 ;; *************** function _Limpiar_pantallaLCD *****************
  1048 ;; Defined at:
  1049 ;;		line 52 in file "LCD.c"
  1050 ;; Parameters:    Size  Location     Type
  1051 ;;		None
  1052 ;; Auto vars:     Size  Location     Type
  1053 ;;		None
  1054 ;; Return value:  Size  Location     Type
  1055 ;;                  1    wreg      void 
  1056 ;; Registers used:
  1057 ;;		wreg, status,2, status,0, pclath, cstack
  1058 ;; Tracked objects:
  1059 ;;		On entry : 0/0
  1060 ;;		On exit  : 0/0
  1061 ;;		Unchanged: 0/0
  1062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1063 ;;      Params:         0       0       0       0       0
  1064 ;;      Locals:         0       0       0       0       0
  1065 ;;      Temps:          2       0       0       0       0
  1066 ;;      Totals:         2       0       0       0       0
  1067 ;;Total ram usage:        2 bytes
  1068 ;; Hardware stack levels used: 1
  1069 ;; Hardware stack levels required when called: 4
  1070 ;; This function calls:
  1071 ;;		_Escribir_comandoLCD
  1072 ;; This function is called by:
  1073 ;;		_setup
  1074 ;; This function uses a non-reentrant model
  1075 ;;
  1076                           
  1077                           
  1078                           ;psect for function _Limpiar_pantallaLCD
  1079  0494                     _Limpiar_pantallaLCD:
  1080  0494                     l1312:	
  1081                           ;incstack = 0
  1082                           ; Regs used in _Limpiar_pantallaLCD: [wreg+status,2+status,0+pclath+cstack]
  1083                           
  1084                           
  1085                           ;LCD.c: 53:     Escribir_comandoLCD(0x01);
  1086  0494  3001               	movlw	1
  1087  0495  120A  118A  24A4  120A  118A  	fcall	_Escribir_comandoLCD
  1088  049A                     l1314:
  1089                           
  1090                           ;LCD.c: 54:     _delay((unsigned long)((4)*(8000000/4000.0)));
  1091  049A  300B               	movlw	11
  1092  049B  00F6               	movwf	??_Limpiar_pantallaLCD+1
  1093  049C  3062               	movlw	98
  1094  049D  00F5               	movwf	??_Limpiar_pantallaLCD
  1095  049E                     u1247:
  1096  049E  0BF5               	decfsz	??_Limpiar_pantallaLCD,f
  1097  049F  2C9E               	goto	u1247
  1098  04A0  0BF6               	decfsz	??_Limpiar_pantallaLCD+1,f
  1099  04A1  2C9E               	goto	u1247
  1100  04A2  0000               	nop
  1101  04A3                     l128:
  1102  04A3  0008               	return
  1103  04A4                     __end_of_Limpiar_pantallaLCD:
  1104                           
  1105                           	psect	text3
  1106  040E                     __ptext3:	
  1107 ;; *************** function _Iniciar_LCD *****************
  1108 ;; Defined at:
  1109 ;;		line 32 in file "LCD.c"
  1110 ;; Parameters:    Size  Location     Type
  1111 ;;		None
  1112 ;; Auto vars:     Size  Location     Type
  1113 ;;		None
  1114 ;; Return value:  Size  Location     Type
  1115 ;;                  1    wreg      void 
  1116 ;; Registers used:
  1117 ;;		wreg, status,2, status,0, pclath, cstack
  1118 ;; Tracked objects:
  1119 ;;		On entry : 0/0
  1120 ;;		On exit  : 0/0
  1121 ;;		Unchanged: 0/0
  1122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1123 ;;      Params:         0       0       0       0       0
  1124 ;;      Locals:         0       0       0       0       0
  1125 ;;      Temps:          0       0       0       0       0
  1126 ;;      Totals:         0       0       0       0       0
  1127 ;;Total ram usage:        0 bytes
  1128 ;; Hardware stack levels used: 1
  1129 ;; Hardware stack levels required when called: 4
  1130 ;; This function calls:
  1131 ;;		_Escribir_comandoLCD
  1132 ;; This function is called by:
  1133 ;;		_setup
  1134 ;; This function uses a non-reentrant model
  1135 ;;
  1136                           
  1137                           
  1138                           ;psect for function _Iniciar_LCD
  1139  040E                     _Iniciar_LCD:
  1140  040E                     l1296:	
  1141                           ;incstack = 0
  1142                           ; Regs used in _Iniciar_LCD: [wreg+status,2+status,0+pclath+cstack]
  1143                           
  1144                           
  1145                           ;LCD.c: 33:     RC1 = 0;
  1146  040E  1283               	bcf	3,5	;RP0=0, select bank0
  1147  040F  1303               	bcf	3,6	;RP1=0, select bank0
  1148  0410  1087               	bcf	7,1	;volatile
  1149                           
  1150                           ;LCD.c: 34:     RC0 = 0;
  1151  0411  1007               	bcf	7,0	;volatile
  1152  0412                     l1298:
  1153                           
  1154                           ;LCD.c: 35:     PORTD = 0;
  1155  0412  0188               	clrf	8	;volatile
  1156  0413                     l1300:
  1157                           
  1158                           ;LCD.c: 36:     TRISC1 = 0;
  1159  0413  1683               	bsf	3,5	;RP0=1, select bank1
  1160  0414  1303               	bcf	3,6	;RP1=0, select bank1
  1161  0415  1087               	bcf	7,1	;volatile
  1162  0416                     l1302:
  1163                           
  1164                           ;LCD.c: 37:     TRISC0 = 0;
  1165  0416  1007               	bcf	7,0	;volatile
  1166                           
  1167                           ;LCD.c: 38:     TRISD = 0;
  1168  0417  0188               	clrf	8	;volatile
  1169  0418                     l1304:
  1170                           
  1171                           ;LCD.c: 40:     Escribir_comandoLCD(0x38);
  1172  0418  3038               	movlw	56
  1173  0419  120A  118A  24A4  120A  118A  	fcall	_Escribir_comandoLCD
  1174  041E                     l1306:
  1175                           
  1176                           ;LCD.c: 41:     Escribir_comandoLCD(0x0C);
  1177  041E  300C               	movlw	12
  1178  041F  120A  118A  24A4  120A  118A  	fcall	_Escribir_comandoLCD
  1179  0424                     l1308:
  1180                           
  1181                           ;LCD.c: 42:     Escribir_comandoLCD(0x01);
  1182  0424  3001               	movlw	1
  1183  0425  120A  118A  24A4  120A  118A  	fcall	_Escribir_comandoLCD
  1184  042A                     l1310:
  1185                           
  1186                           ;LCD.c: 43:     Escribir_comandoLCD(0x06);
  1187  042A  3006               	movlw	6
  1188  042B  120A  118A  24A4  120A  118A  	fcall	_Escribir_comandoLCD
  1189  0430                     l119:
  1190  0430  0008               	return
  1191  0431                     __end_of_Iniciar_LCD:
  1192                           
  1193                           	psect	text4
  1194  044F                     __ptext4:	
  1195 ;; *************** function _set_cursor *****************
  1196 ;; Defined at:
  1197 ;;		line 57 in file "LCD.c"
  1198 ;; Parameters:    Size  Location     Type
  1199 ;;  a               1    wreg     unsigned char 
  1200 ;;  b               1    5[COMMON] unsigned char 
  1201 ;; Auto vars:     Size  Location     Type
  1202 ;;  a               1    6[COMMON] unsigned char 
  1203 ;; Return value:  Size  Location     Type
  1204 ;;                  1    wreg      void 
  1205 ;; Registers used:
  1206 ;;		wreg, status,2, status,0, pclath, cstack
  1207 ;; Tracked objects:
  1208 ;;		On entry : 0/0
  1209 ;;		On exit  : 0/0
  1210 ;;		Unchanged: 0/0
  1211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1212 ;;      Params:         1       0       0       0       0
  1213 ;;      Locals:         1       0       0       0       0
  1214 ;;      Temps:          0       0       0       0       0
  1215 ;;      Totals:         2       0       0       0       0
  1216 ;;Total ram usage:        2 bytes
  1217 ;; Hardware stack levels used: 1
  1218 ;; Hardware stack levels required when called: 4
  1219 ;; This function calls:
  1220 ;;		_Escribir_comandoLCD
  1221 ;; This function is called by:
  1222 ;;		_main
  1223 ;; This function uses a non-reentrant model
  1224 ;;
  1225                           
  1226                           
  1227                           ;psect for function _set_cursor
  1228  044F                     _set_cursor:
  1229                           
  1230                           ;incstack = 0
  1231                           ; Regs used in _set_cursor: [wreg+status,2+status,0+pclath+cstack]
  1232                           ;set_cursor@a stored from wreg
  1233  044F  00F6               	movwf	set_cursor@a
  1234  0450                     l1460:
  1235                           
  1236                           ;LCD.c: 58:     if(a == 1){
  1237  0450  0376               	decf	set_cursor@a,w
  1238  0451  1D03               	btfss	3,2
  1239  0452  2C54               	goto	u951
  1240  0453  2C55               	goto	u950
  1241  0454                     u951:
  1242  0454  2C5C               	goto	l1464
  1243  0455                     u950:
  1244  0455                     l1462:
  1245                           
  1246                           ;LCD.c: 59:         Escribir_comandoLCD(0x80 + (b-1));
  1247  0455  0875               	movf	set_cursor@b,w
  1248  0456  3E7F               	addlw	127
  1249  0457  120A  118A  24A4  120A  118A  	fcall	_Escribir_comandoLCD
  1250  045C                     l1464:
  1251                           
  1252                           ;LCD.c: 61:     if(a == 2){
  1253  045C  3002               	movlw	2
  1254  045D  0676               	xorwf	set_cursor@a,w
  1255  045E  1D03               	btfss	3,2
  1256  045F  2C61               	goto	u961
  1257  0460  2C62               	goto	u960
  1258  0461                     u961:
  1259  0461  2C69               	goto	l133
  1260  0462                     u960:
  1261  0462                     l1466:
  1262                           
  1263                           ;LCD.c: 62:         Escribir_comandoLCD(0xC0 + (b-1));
  1264  0462  0875               	movf	set_cursor@b,w
  1265  0463  3EBF               	addlw	191
  1266  0464  120A  118A  24A4  120A  118A  	fcall	_Escribir_comandoLCD
  1267  0469                     l133:
  1268  0469  0008               	return
  1269  046A                     __end_of_set_cursor:
  1270                           
  1271                           	psect	text5
  1272  04A4                     __ptext5:	
  1273 ;; *************** function _Escribir_comandoLCD *****************
  1274 ;; Defined at:
  1275 ;;		line 18 in file "LCD.c"
  1276 ;; Parameters:    Size  Location     Type
  1277 ;;  Comando         1    wreg     unsigned char 
  1278 ;; Auto vars:     Size  Location     Type
  1279 ;;  Comando         1    4[COMMON] unsigned char 
  1280 ;; Return value:  Size  Location     Type
  1281 ;;                  1    wreg      void 
  1282 ;; Registers used:
  1283 ;;		wreg, status,2, status,0, pclath, cstack
  1284 ;; Tracked objects:
  1285 ;;		On entry : 0/0
  1286 ;;		On exit  : 0/0
  1287 ;;		Unchanged: 0/0
  1288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1289 ;;      Params:         0       0       0       0       0
  1290 ;;      Locals:         1       0       0       0       0
  1291 ;;      Temps:          0       0       0       0       0
  1292 ;;      Totals:         1       0       0       0       0
  1293 ;;Total ram usage:        1 bytes
  1294 ;; Hardware stack levels used: 1
  1295 ;; Hardware stack levels required when called: 3
  1296 ;; This function calls:
  1297 ;;		_prender_ELCD
  1298 ;; This function is called by:
  1299 ;;		_Iniciar_LCD
  1300 ;;		_Limpiar_pantallaLCD
  1301 ;;		_set_cursor
  1302 ;;		_shift_right
  1303 ;;		_shift_left
  1304 ;; This function uses a non-reentrant model
  1305 ;;
  1306                           
  1307                           
  1308                           ;psect for function _Escribir_comandoLCD
  1309  04A4                     _Escribir_comandoLCD:
  1310                           
  1311                           ;incstack = 0
  1312                           ; Regs used in _Escribir_comandoLCD: [wreg+status,2+status,0+pclath+cstack]
  1313                           ;Escribir_comandoLCD@Comando stored from wreg
  1314  04A4  00F4               	movwf	Escribir_comandoLCD@Comando
  1315  04A5                     l1160:
  1316                           
  1317                           ;LCD.c: 19:     RC0 = 0;
  1318  04A5  1283               	bcf	3,5	;RP0=0, select bank0
  1319  04A6  1303               	bcf	3,6	;RP1=0, select bank0
  1320  04A7  1007               	bcf	7,0	;volatile
  1321  04A8                     l1162:
  1322                           
  1323                           ;LCD.c: 20:     PORTD = Comando;
  1324  04A8  0874               	movf	Escribir_comandoLCD@Comando,w
  1325  04A9  0088               	movwf	8	;volatile
  1326  04AA                     l1164:
  1327                           
  1328                           ;LCD.c: 22:     prender_ELCD();
  1329  04AA  120A  118A  246A  120A  118A  	fcall	_prender_ELCD
  1330  04AF                     l113:
  1331  04AF  0008               	return
  1332  04B0                     __end_of_Escribir_comandoLCD:
  1333                           
  1334                           	psect	text6
  1335  0172                     __ptext6:	
  1336 ;; *************** function _conversion_char *****************
  1337 ;; Defined at:
  1338 ;;		line 133 in file "LAB2.c"
  1339 ;; Parameters:    Size  Location     Type
  1340 ;;		None
  1341 ;; Auto vars:     Size  Location     Type
  1342 ;;		None
  1343 ;; Return value:  Size  Location     Type
  1344 ;;                  1    wreg      void 
  1345 ;; Registers used:
  1346 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1347 ;; Tracked objects:
  1348 ;;		On entry : 0/0
  1349 ;;		On exit  : 0/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1352 ;;      Params:         0       0       0       0       0
  1353 ;;      Locals:         0       0       0       0       0
  1354 ;;      Temps:          0       7       0       0       0
  1355 ;;      Totals:         0       7       0       0       0
  1356 ;;Total ram usage:        7 bytes
  1357 ;; Hardware stack levels used: 1
  1358 ;; Hardware stack levels required when called: 4
  1359 ;; This function calls:
  1360 ;;		_divisor
  1361 ;;		_sprintf
  1362 ;; This function is called by:
  1363 ;;		_main
  1364 ;; This function uses a non-reentrant model
  1365 ;;
  1366                           
  1367                           
  1368                           ;psect for function _conversion_char
  1369  0172                     _conversion_char:
  1370  0172                     l1660:	
  1371                           ;incstack = 0
  1372                           ; Regs used in _conversion_char: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1373                           
  1374                           
  1375                           ;LAB2.c: 134:     divisor(cont1, vol1);
  1376  0172  3059               	movlw	(low (_vol1| 0))& (0+255)
  1377  0173  1283               	bcf	3,5	;RP0=0, select bank0
  1378  0174  1303               	bcf	3,6	;RP1=0, select bank0
  1379  0175  00BA               	movwf	??_conversion_char
  1380  0176  083A               	movf	??_conversion_char,w
  1381  0177  00A4               	movwf	divisor@dig
  1382  0178  0843               	movf	_cont1,w
  1383  0179  120A  118A  2228  120A  118A  	fcall	_divisor
  1384                           
  1385                           ;LAB2.c: 135:     sprintf(buffer1, "%d.%d%d", vol1[2], vol1[1], vol1[0]);
  1386  017E  301C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1387  017F  1283               	bcf	3,5	;RP0=0, select bank0
  1388  0180  1303               	bcf	3,6	;RP1=0, select bank0
  1389  0181  00BA               	movwf	??_conversion_char
  1390  0182  083A               	movf	??_conversion_char,w
  1391  0183  00A9               	movwf	sprintf@f
  1392  0184  085B               	movf	_vol1+2,w
  1393  0185  00BB               	movwf	??_conversion_char+1
  1394  0186  01BC               	clrf	??_conversion_char+2
  1395  0187  083B               	movf	??_conversion_char+1,w
  1396  0188  00AA               	movwf	?_sprintf+1
  1397  0189  083C               	movf	??_conversion_char+2,w
  1398  018A  00AB               	movwf	?_sprintf+2
  1399  018B  085A               	movf	_vol1+1,w
  1400  018C  00BD               	movwf	??_conversion_char+3
  1401  018D  01BE               	clrf	??_conversion_char+4
  1402  018E  083D               	movf	??_conversion_char+3,w
  1403  018F  00AC               	movwf	?_sprintf+3
  1404  0190  083E               	movf	??_conversion_char+4,w
  1405  0191  00AD               	movwf	?_sprintf+4
  1406  0192  0859               	movf	_vol1,w
  1407  0193  00BF               	movwf	??_conversion_char+5
  1408  0194  01C0               	clrf	??_conversion_char+6
  1409  0195  083F               	movf	??_conversion_char+5,w
  1410  0196  00AE               	movwf	?_sprintf+5
  1411  0197  0840               	movf	??_conversion_char+6,w
  1412  0198  00AF               	movwf	?_sprintf+6
  1413  0199  304E               	movlw	(low (_buffer1| 0))& (0+255)
  1414  019A  120A  118A  201F  120A  118A  	fcall	_sprintf
  1415                           
  1416                           ;LAB2.c: 137:     divisor(cont2, vol2);
  1417  019F  3058               	movlw	(low (_vol2| 0))& (0+255)
  1418  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  1419  01A1  1303               	bcf	3,6	;RP1=0, select bank0
  1420  01A2  00BA               	movwf	??_conversion_char
  1421  01A3  083A               	movf	??_conversion_char,w
  1422  01A4  00A4               	movwf	divisor@dig
  1423  01A5  0842               	movf	_cont2,w
  1424  01A6  120A  118A  2228  120A  118A  	fcall	_divisor
  1425                           
  1426                           ;LAB2.c: 138:     sprintf(buffer2, "%d.%d%d", vol2[2], vol2[1], vol2[0]);
  1427  01AB  301C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1428  01AC  1283               	bcf	3,5	;RP0=0, select bank0
  1429  01AD  1303               	bcf	3,6	;RP1=0, select bank0
  1430  01AE  00BA               	movwf	??_conversion_char
  1431  01AF  083A               	movf	??_conversion_char,w
  1432  01B0  00A9               	movwf	sprintf@f
  1433  01B1  085A               	movf	_vol2+2,w
  1434  01B2  00BB               	movwf	??_conversion_char+1
  1435  01B3  01BC               	clrf	??_conversion_char+2
  1436  01B4  083B               	movf	??_conversion_char+1,w
  1437  01B5  00AA               	movwf	?_sprintf+1
  1438  01B6  083C               	movf	??_conversion_char+2,w
  1439  01B7  00AB               	movwf	?_sprintf+2
  1440  01B8  0859               	movf	_vol2+1,w
  1441  01B9  00BD               	movwf	??_conversion_char+3
  1442  01BA  01BE               	clrf	??_conversion_char+4
  1443  01BB  083D               	movf	??_conversion_char+3,w
  1444  01BC  00AC               	movwf	?_sprintf+3
  1445  01BD  083E               	movf	??_conversion_char+4,w
  1446  01BE  00AD               	movwf	?_sprintf+4
  1447  01BF  0858               	movf	_vol2,w
  1448  01C0  00BF               	movwf	??_conversion_char+5
  1449  01C1  01C0               	clrf	??_conversion_char+6
  1450  01C2  083F               	movf	??_conversion_char+5,w
  1451  01C3  00AE               	movwf	?_sprintf+5
  1452  01C4  0840               	movf	??_conversion_char+6,w
  1453  01C5  00AF               	movwf	?_sprintf+6
  1454  01C6  3044               	movlw	(low (_buffer2| 0))& (0+255)
  1455  01C7  120A  118A  201F  120A  118A  	fcall	_sprintf
  1456  01CC                     l88:
  1457  01CC  0008               	return
  1458  01CD                     __end_of_conversion_char:
  1459                           
  1460                           	psect	text7
  1461  001F                     __ptext7:	
  1462 ;; *************** function _sprintf *****************
  1463 ;; Defined at:
  1464 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c"
  1465 ;; Parameters:    Size  Location     Type
  1466 ;;  sp              1    wreg     PTR unsigned char 
  1467 ;;		 -> buffer2(10), buffer1(10), 
  1468 ;;  f               1    9[BANK0 ] PTR const unsigned char 
  1469 ;;		 -> STR_3(8), STR_2(8), 
  1470 ;; Auto vars:     Size  Location     Type
  1471 ;;  sp              1   24[BANK0 ] PTR unsigned char 
  1472 ;;		 -> buffer2(10), buffer1(10), 
  1473 ;;  tmpval          4    0        struct .
  1474 ;;  val             2   22[BANK0 ] unsigned int 
  1475 ;;  cp              2    0        PTR const unsigned char 
  1476 ;;  len             2    0        unsigned int 
  1477 ;;  c               1   25[BANK0 ] unsigned char 
  1478 ;;  prec            1   21[BANK0 ] char 
  1479 ;;  flag            1   20[BANK0 ] unsigned char 
  1480 ;;  ap              1   19[BANK0 ] PTR void [1]
  1481 ;;		 -> ?_sprintf(2), 
  1482 ;; Return value:  Size  Location     Type
  1483 ;;                  2    9[BANK0 ] int 
  1484 ;; Registers used:
  1485 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1486 ;; Tracked objects:
  1487 ;;		On entry : 0/0
  1488 ;;		On exit  : 0/0
  1489 ;;		Unchanged: 0/0
  1490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1491 ;;      Params:         0       7       0       0       0
  1492 ;;      Locals:         0       7       0       0       0
  1493 ;;      Temps:          0       3       0       0       0
  1494 ;;      Totals:         0      17       0       0       0
  1495 ;;Total ram usage:       17 bytes
  1496 ;; Hardware stack levels used: 1
  1497 ;; Hardware stack levels required when called: 3
  1498 ;; This function calls:
  1499 ;;		___lwdiv
  1500 ;;		___lwmod
  1501 ;; This function is called by:
  1502 ;;		_conversion_char
  1503 ;; This function uses a non-reentrant model
  1504 ;;
  1505                           
  1506                           
  1507                           ;psect for function _sprintf
  1508  001F                     _sprintf:
  1509                           
  1510                           ;incstack = 0
  1511                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1512                           ;sprintf@sp stored from wreg
  1513  001F  1283               	bcf	3,5	;RP0=0, select bank0
  1514  0020  1303               	bcf	3,6	;RP1=0, select bank0
  1515  0021  00B8               	movwf	sprintf@sp
  1516  0022                     l1598:
  1517                           
  1518                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  1519  0022  302A               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1520  0023  00B0               	movwf	??_sprintf
  1521  0024  0830               	movf	??_sprintf,w
  1522  0025  00B3               	movwf	sprintf@ap
  1523                           
  1524                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1525  0026  28F2               	goto	l1650
  1526  0027                     l1600:
  1527                           
  1528                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1529  0027  3025               	movlw	37
  1530  0028  0639               	xorwf	sprintf@c,w
  1531  0029  1903               	btfsc	3,2
  1532  002A  282C               	goto	u1161
  1533  002B  282D               	goto	u1160
  1534  002C                     u1161:
  1535  002C  2839               	goto	l1606
  1536  002D                     u1160:
  1537  002D                     l1602:
  1538                           
  1539                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1540  002D  0839               	movf	sprintf@c,w
  1541  002E  00B0               	movwf	??_sprintf
  1542  002F  0838               	movf	sprintf@sp,w
  1543  0030  0084               	movwf	4
  1544  0031  0830               	movf	??_sprintf,w
  1545  0032  1383               	bcf	3,7	;select IRP bank0
  1546  0033  0080               	movwf	0
  1547  0034                     l1604:
  1548  0034  3001               	movlw	1
  1549  0035  00B0               	movwf	??_sprintf
  1550  0036  0830               	movf	??_sprintf,w
  1551  0037  07B8               	addwf	sprintf@sp,f
  1552                           
  1553                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 559:    continue;
  1554  0038  28F2               	goto	l1650
  1555  0039                     l1606:
  1556                           
  1557                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1558  0039  01B4               	clrf	sprintf@flag
  1559  003A                     l1610:	
  1560                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  1561                           
  1562  003A  3001               	movlw	1
  1563  003B  07A9               	addwf	sprintf@f,f
  1564  003C  30FF               	movlw	-1
  1565  003D  0729               	addwf	sprintf@f,w
  1566  003E  0084               	movwf	4
  1567  003F  120A  118A  2393  120A  118A  	fcall	stringdir
  1568  0044  00B9               	movwf	sprintf@c
  1569  0045  00B0               	movwf	??_sprintf
  1570  0046  01B1               	clrf	??_sprintf+1
  1571                           
  1572                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1573                           ; Switch size 1, requested type "simple"
  1574                           ; Number of cases is 1, Range of values is 0 to 0
  1575                           ; switch strategies available:
  1576                           ; Name         Instructions Cycles
  1577                           ; simple_byte            4     3 (average)
  1578                           ; direct_byte           11     8 (fixed)
  1579                           ; jumptable            260     6 (fixed)
  1580                           ;	Chosen strategy is simple_byte
  1581  0047  0831               	movf	??_sprintf+1,w
  1582  0048  3A00               	xorlw	0	; case 0
  1583  0049  1903               	skipnz
  1584  004A  284C               	goto	l1694
  1585  004B  28F2               	goto	l1650
  1586  004C                     l1694:
  1587                           
  1588                           ; Switch size 1, requested type "simple"
  1589                           ; Number of cases is 3, Range of values is 0 to 105
  1590                           ; switch strategies available:
  1591                           ; Name         Instructions Cycles
  1592                           ; simple_byte           10     6 (average)
  1593                           ; jumptable            260     6 (fixed)
  1594                           ;	Chosen strategy is simple_byte
  1595  004C  0830               	movf	??_sprintf,w
  1596  004D  3A00               	xorlw	0	; case 0
  1597  004E  1903               	skipnz
  1598  004F  2904               	goto	l1652
  1599  0050  3A64               	xorlw	100	; case 100
  1600  0051  1903               	skipnz
  1601  0052  2857               	goto	l1612
  1602  0053  3A0D               	xorlw	13	; case 105
  1603  0054  1903               	skipnz
  1604  0055  2857               	goto	l1612
  1605  0056  28F2               	goto	l1650
  1606  0057                     l1612:
  1607                           
  1608                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1609  0057  0833               	movf	sprintf@ap,w
  1610  0058  0084               	movwf	4
  1611  0059  1383               	bcf	3,7	;select IRP bank0
  1612  005A  0800               	movf	0,w
  1613  005B  00B6               	movwf	sprintf@val
  1614  005C  0A84               	incf	4,f
  1615  005D  0800               	movf	0,w
  1616  005E  00B7               	movwf	sprintf@val+1
  1617  005F                     l1614:
  1618  005F  3002               	movlw	2
  1619  0060  00B0               	movwf	??_sprintf
  1620  0061  0830               	movf	??_sprintf,w
  1621  0062  07B3               	addwf	sprintf@ap,f
  1622  0063                     l1616:
  1623                           
  1624                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1625  0063  1FB7               	btfss	sprintf@val+1,7
  1626  0064  2866               	goto	u1171
  1627  0065  2867               	goto	u1170
  1628  0066                     u1171:
  1629  0066  2870               	goto	l1622
  1630  0067                     u1170:
  1631  0067                     l1618:
  1632                           
  1633                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1634  0067  3003               	movlw	3
  1635  0068  00B0               	movwf	??_sprintf
  1636  0069  0830               	movf	??_sprintf,w
  1637  006A  04B4               	iorwf	sprintf@flag,f
  1638  006B                     l1620:
  1639                           
  1640                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1641  006B  09B6               	comf	sprintf@val,f
  1642  006C  09B7               	comf	sprintf@val+1,f
  1643  006D  0AB6               	incf	sprintf@val,f
  1644  006E  1903               	skipnz
  1645  006F  0AB7               	incf	sprintf@val+1,f
  1646  0070                     l1622:
  1647                           
  1648                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1649  0070  01B9               	clrf	sprintf@c
  1650  0071  0AB9               	incf	sprintf@c,f
  1651  0072                     l1628:
  1652                           
  1653                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1654  0072  0839               	movf	sprintf@c,w
  1655  0073  00B0               	movwf	??_sprintf
  1656  0074  0730               	addwf	??_sprintf,w
  1657  0075  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1658  0076  0084               	movwf	4
  1659  0077  120A  118A  2393  120A  118A  	fcall	stringdir
  1660  007C  00B1               	movwf	??_sprintf+1
  1661  007D  120A  118A  2393  120A  118A  	fcall	stringdir
  1662  0082  00B2               	movwf	??_sprintf+2
  1663  0083  0832               	movf	??_sprintf+2,w
  1664  0084  0237               	subwf	sprintf@val+1,w
  1665  0085  1D03               	skipz
  1666  0086  2889               	goto	u1185
  1667  0087  0831               	movf	??_sprintf+1,w
  1668  0088  0236               	subwf	sprintf@val,w
  1669  0089                     u1185:
  1670  0089  1803               	skipnc
  1671  008A  288C               	goto	u1181
  1672  008B  288D               	goto	u1180
  1673  008C                     u1181:
  1674  008C  288E               	goto	l1632
  1675  008D                     u1180:
  1676  008D  2898               	goto	l1634
  1677  008E                     l1632:
  1678  008E  3001               	movlw	1
  1679  008F  00B0               	movwf	??_sprintf
  1680  0090  0830               	movf	??_sprintf,w
  1681  0091  07B9               	addwf	sprintf@c,f
  1682  0092  3005               	movlw	5
  1683  0093  0639               	xorwf	sprintf@c,w
  1684  0094  1D03               	btfss	3,2
  1685  0095  2897               	goto	u1191
  1686  0096  2898               	goto	u1190
  1687  0097                     u1191:
  1688  0097  2872               	goto	l1628
  1689  0098                     u1190:
  1690  0098                     l1634:
  1691                           
  1692                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  1693  0098  0834               	movf	sprintf@flag,w
  1694  0099  3903               	andlw	3
  1695  009A  1903               	btfsc	3,2
  1696  009B  289D               	goto	u1201
  1697  009C  289E               	goto	u1200
  1698  009D                     u1201:
  1699  009D  28A9               	goto	l1640
  1700  009E                     u1200:
  1701  009E                     l1636:
  1702                           
  1703                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1704  009E  302D               	movlw	45
  1705  009F  00B0               	movwf	??_sprintf
  1706  00A0  0838               	movf	sprintf@sp,w
  1707  00A1  0084               	movwf	4
  1708  00A2  0830               	movf	??_sprintf,w
  1709  00A3  1383               	bcf	3,7	;select IRP bank0
  1710  00A4  0080               	movwf	0
  1711  00A5                     l1638:
  1712  00A5  3001               	movlw	1
  1713  00A6  00B0               	movwf	??_sprintf
  1714  00A7  0830               	movf	??_sprintf,w
  1715  00A8  07B8               	addwf	sprintf@sp,f
  1716  00A9                     l1640:
  1717                           
  1718                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1719  00A9  0839               	movf	sprintf@c,w
  1720  00AA  00B0               	movwf	??_sprintf
  1721  00AB  0830               	movf	??_sprintf,w
  1722  00AC  00B5               	movwf	sprintf@prec
  1723                           
  1724                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1725  00AD  28E9               	goto	l1648
  1726  00AE                     l1642:
  1727                           
  1728                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1729  00AE  300A               	movlw	10
  1730  00AF  00A3               	movwf	___lwmod@divisor
  1731  00B0  3000               	movlw	0
  1732  00B1  00A4               	movwf	___lwmod@divisor+1
  1733  00B2  0835               	movf	sprintf@prec,w
  1734  00B3  00B0               	movwf	??_sprintf
  1735  00B4  0730               	addwf	??_sprintf,w
  1736  00B5  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1737  00B6  0084               	movwf	4
  1738  00B7  120A  118A  2393  120A  118A  	fcall	stringdir
  1739  00BC  00F3               	movwf	___lwdiv@divisor
  1740  00BD  120A  118A  2393  120A  118A  	fcall	stringdir
  1741  00C2  00F4               	movwf	___lwdiv@divisor+1
  1742  00C3  0837               	movf	sprintf@val+1,w
  1743  00C4  00F6               	movwf	___lwdiv@dividend+1
  1744  00C5  0836               	movf	sprintf@val,w
  1745  00C6  00F5               	movwf	___lwdiv@dividend
  1746  00C7  120A  118A  22CC  120A  118A  	fcall	___lwdiv
  1747  00CC  0874               	movf	?___lwdiv+1,w
  1748  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  1749  00CE  1303               	bcf	3,6	;RP1=0, select bank0
  1750  00CF  00A6               	movwf	___lwmod@dividend+1
  1751  00D0  0873               	movf	?___lwdiv,w
  1752  00D1  00A5               	movwf	___lwmod@dividend
  1753  00D2  120A  118A  2312  120A  118A  	fcall	___lwmod
  1754  00D7  1283               	bcf	3,5	;RP0=0, select bank0
  1755  00D8  1303               	bcf	3,6	;RP1=0, select bank0
  1756  00D9  0823               	movf	?___lwmod,w
  1757  00DA  3E30               	addlw	48
  1758  00DB  00B1               	movwf	??_sprintf+1
  1759  00DC  0831               	movf	??_sprintf+1,w
  1760  00DD  00B9               	movwf	sprintf@c
  1761  00DE                     l1644:
  1762                           
  1763                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1764  00DE  0839               	movf	sprintf@c,w
  1765  00DF  00B0               	movwf	??_sprintf
  1766  00E0  0838               	movf	sprintf@sp,w
  1767  00E1  0084               	movwf	4
  1768  00E2  0830               	movf	??_sprintf,w
  1769  00E3  1383               	bcf	3,7	;select IRP bank0
  1770  00E4  0080               	movwf	0
  1771  00E5                     l1646:
  1772  00E5  3001               	movlw	1
  1773  00E6  00B0               	movwf	??_sprintf
  1774  00E7  0830               	movf	??_sprintf,w
  1775  00E8  07B8               	addwf	sprintf@sp,f
  1776  00E9                     l1648:
  1777                           
  1778                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1779  00E9  30FF               	movlw	255
  1780  00EA  00B0               	movwf	??_sprintf
  1781  00EB  0830               	movf	??_sprintf,w
  1782  00EC  07B5               	addwf	sprintf@prec,f
  1783  00ED  0A35               	incf	sprintf@prec,w
  1784  00EE  1D03               	btfss	3,2
  1785  00EF  28F1               	goto	u1211
  1786  00F0  28F2               	goto	u1210
  1787  00F1                     u1211:
  1788  00F1  28AE               	goto	l1642
  1789  00F2                     u1210:
  1790  00F2                     l1650:
  1791                           
  1792                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1793  00F2  3001               	movlw	1
  1794  00F3  07A9               	addwf	sprintf@f,f
  1795  00F4  30FF               	movlw	-1
  1796  00F5  0729               	addwf	sprintf@f,w
  1797  00F6  0084               	movwf	4
  1798  00F7  120A  118A  2393  120A  118A  	fcall	stringdir
  1799  00FC  00B0               	movwf	??_sprintf
  1800  00FD  0830               	movf	??_sprintf,w
  1801  00FE  00B9               	movwf	sprintf@c
  1802  00FF  0839               	movf	sprintf@c,w
  1803  0100  1D03               	btfss	3,2
  1804  0101  2903               	goto	u1221
  1805  0102  2904               	goto	u1220
  1806  0103                     u1221:
  1807  0103  2827               	goto	l1600
  1808  0104                     u1220:
  1809  0104                     l1652:
  1810                           
  1811                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1812  0104  0838               	movf	sprintf@sp,w
  1813  0105  0084               	movwf	4
  1814  0106  1383               	bcf	3,7	;select IRP bank0
  1815  0107  0180               	clrf	0
  1816  0108                     l278:
  1817  0108  0008               	return
  1818  0109                     __end_of_sprintf:
  1819                           
  1820                           	psect	text8
  1821  0312                     __ptext8:	
  1822 ;; *************** function ___lwmod *****************
  1823 ;; Defined at:
  1824 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  1825 ;; Parameters:    Size  Location     Type
  1826 ;;  divisor         2    3[BANK0 ] unsigned int 
  1827 ;;  dividend        2    5[BANK0 ] unsigned int 
  1828 ;; Auto vars:     Size  Location     Type
  1829 ;;  counter         1    8[BANK0 ] unsigned char 
  1830 ;; Return value:  Size  Location     Type
  1831 ;;                  2    3[BANK0 ] unsigned int 
  1832 ;; Registers used:
  1833 ;;		wreg, status,2, status,0
  1834 ;; Tracked objects:
  1835 ;;		On entry : 0/0
  1836 ;;		On exit  : 0/0
  1837 ;;		Unchanged: 0/0
  1838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1839 ;;      Params:         0       4       0       0       0
  1840 ;;      Locals:         0       1       0       0       0
  1841 ;;      Temps:          0       1       0       0       0
  1842 ;;      Totals:         0       6       0       0       0
  1843 ;;Total ram usage:        6 bytes
  1844 ;; Hardware stack levels used: 1
  1845 ;; Hardware stack levels required when called: 2
  1846 ;; This function calls:
  1847 ;;		Nothing
  1848 ;; This function is called by:
  1849 ;;		_sprintf
  1850 ;; This function uses a non-reentrant model
  1851 ;;
  1852                           
  1853                           
  1854                           ;psect for function ___lwmod
  1855  0312                     ___lwmod:
  1856  0312                     l1274:	
  1857                           ;incstack = 0
  1858                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1859                           
  1860  0312  1283               	bcf	3,5	;RP0=0, select bank0
  1861  0313  1303               	bcf	3,6	;RP1=0, select bank0
  1862  0314  0823               	movf	___lwmod@divisor,w
  1863  0315  0424               	iorwf	___lwmod@divisor+1,w
  1864  0316  1903               	btfsc	3,2
  1865  0317  2B19               	goto	u761
  1866  0318  2B1A               	goto	u760
  1867  0319                     u761:
  1868  0319  2B49               	goto	l1292
  1869  031A                     u760:
  1870  031A                     l1276:
  1871  031A  01A8               	clrf	___lwmod@counter
  1872  031B  0AA8               	incf	___lwmod@counter,f
  1873  031C  2B28               	goto	l1282
  1874  031D                     l1278:
  1875  031D  3001               	movlw	1
  1876  031E                     u775:
  1877  031E  1003               	clrc
  1878  031F  0DA3               	rlf	___lwmod@divisor,f
  1879  0320  0DA4               	rlf	___lwmod@divisor+1,f
  1880  0321  3EFF               	addlw	-1
  1881  0322  1D03               	skipz
  1882  0323  2B1E               	goto	u775
  1883  0324                     l1280:
  1884  0324  3001               	movlw	1
  1885  0325  00A7               	movwf	??___lwmod
  1886  0326  0827               	movf	??___lwmod,w
  1887  0327  07A8               	addwf	___lwmod@counter,f
  1888  0328                     l1282:
  1889  0328  1FA4               	btfss	___lwmod@divisor+1,7
  1890  0329  2B2B               	goto	u781
  1891  032A  2B2C               	goto	u780
  1892  032B                     u781:
  1893  032B  2B1D               	goto	l1278
  1894  032C                     u780:
  1895  032C                     l1284:
  1896  032C  0824               	movf	___lwmod@divisor+1,w
  1897  032D  0226               	subwf	___lwmod@dividend+1,w
  1898  032E  1D03               	skipz
  1899  032F  2B32               	goto	u795
  1900  0330  0823               	movf	___lwmod@divisor,w
  1901  0331  0225               	subwf	___lwmod@dividend,w
  1902  0332                     u795:
  1903  0332  1C03               	skipc
  1904  0333  2B35               	goto	u791
  1905  0334  2B36               	goto	u790
  1906  0335                     u791:
  1907  0335  2B3C               	goto	l1288
  1908  0336                     u790:
  1909  0336                     l1286:
  1910  0336  0823               	movf	___lwmod@divisor,w
  1911  0337  02A5               	subwf	___lwmod@dividend,f
  1912  0338  0824               	movf	___lwmod@divisor+1,w
  1913  0339  1C03               	skipc
  1914  033A  03A6               	decf	___lwmod@dividend+1,f
  1915  033B  02A6               	subwf	___lwmod@dividend+1,f
  1916  033C                     l1288:
  1917  033C  3001               	movlw	1
  1918  033D                     u805:
  1919  033D  1003               	clrc
  1920  033E  0CA4               	rrf	___lwmod@divisor+1,f
  1921  033F  0CA3               	rrf	___lwmod@divisor,f
  1922  0340  3EFF               	addlw	-1
  1923  0341  1D03               	skipz
  1924  0342  2B3D               	goto	u805
  1925  0343                     l1290:
  1926  0343  3001               	movlw	1
  1927  0344  02A8               	subwf	___lwmod@counter,f
  1928  0345  1D03               	btfss	3,2
  1929  0346  2B48               	goto	u811
  1930  0347  2B49               	goto	u810
  1931  0348                     u811:
  1932  0348  2B2C               	goto	l1284
  1933  0349                     u810:
  1934  0349                     l1292:
  1935  0349  0826               	movf	___lwmod@dividend+1,w
  1936  034A  00A4               	movwf	?___lwmod+1
  1937  034B  0825               	movf	___lwmod@dividend,w
  1938  034C  00A3               	movwf	?___lwmod
  1939  034D                     l564:
  1940  034D  0008               	return
  1941  034E                     __end_of___lwmod:
  1942                           
  1943                           	psect	text9
  1944  02CC                     __ptext9:	
  1945 ;; *************** function ___lwdiv *****************
  1946 ;; Defined at:
  1947 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  1948 ;; Parameters:    Size  Location     Type
  1949 ;;  divisor         2    3[COMMON] unsigned int 
  1950 ;;  dividend        2    5[COMMON] unsigned int 
  1951 ;; Auto vars:     Size  Location     Type
  1952 ;;  quotient        2    1[BANK0 ] unsigned int 
  1953 ;;  counter         1    0[BANK0 ] unsigned char 
  1954 ;; Return value:  Size  Location     Type
  1955 ;;                  2    3[COMMON] unsigned int 
  1956 ;; Registers used:
  1957 ;;		wreg, status,2, status,0
  1958 ;; Tracked objects:
  1959 ;;		On entry : 0/0
  1960 ;;		On exit  : 0/0
  1961 ;;		Unchanged: 0/0
  1962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1963 ;;      Params:         4       0       0       0       0
  1964 ;;      Locals:         0       3       0       0       0
  1965 ;;      Temps:          1       0       0       0       0
  1966 ;;      Totals:         5       3       0       0       0
  1967 ;;Total ram usage:        8 bytes
  1968 ;; Hardware stack levels used: 1
  1969 ;; Hardware stack levels required when called: 2
  1970 ;; This function calls:
  1971 ;;		Nothing
  1972 ;; This function is called by:
  1973 ;;		_sprintf
  1974 ;; This function uses a non-reentrant model
  1975 ;;
  1976                           
  1977                           
  1978                           ;psect for function ___lwdiv
  1979  02CC                     ___lwdiv:
  1980  02CC                     l1558:	
  1981                           ;incstack = 0
  1982                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1983                           
  1984  02CC  1283               	bcf	3,5	;RP0=0, select bank0
  1985  02CD  1303               	bcf	3,6	;RP1=0, select bank0
  1986  02CE  01A1               	clrf	___lwdiv@quotient
  1987  02CF  01A2               	clrf	___lwdiv@quotient+1
  1988  02D0                     l1560:
  1989  02D0  0873               	movf	___lwdiv@divisor,w
  1990  02D1  0474               	iorwf	___lwdiv@divisor+1,w
  1991  02D2  1903               	btfsc	3,2
  1992  02D3  2AD5               	goto	u1081
  1993  02D4  2AD6               	goto	u1080
  1994  02D5                     u1081:
  1995  02D5  2B0D               	goto	l1580
  1996  02D6                     u1080:
  1997  02D6                     l1562:
  1998  02D6  01A0               	clrf	___lwdiv@counter
  1999  02D7  0AA0               	incf	___lwdiv@counter,f
  2000  02D8  2AE4               	goto	l1568
  2001  02D9                     l1564:
  2002  02D9  3001               	movlw	1
  2003  02DA                     u1095:
  2004  02DA  1003               	clrc
  2005  02DB  0DF3               	rlf	___lwdiv@divisor,f
  2006  02DC  0DF4               	rlf	___lwdiv@divisor+1,f
  2007  02DD  3EFF               	addlw	-1
  2008  02DE  1D03               	skipz
  2009  02DF  2ADA               	goto	u1095
  2010  02E0                     l1566:
  2011  02E0  3001               	movlw	1
  2012  02E1  00F7               	movwf	??___lwdiv
  2013  02E2  0877               	movf	??___lwdiv,w
  2014  02E3  07A0               	addwf	___lwdiv@counter,f
  2015  02E4                     l1568:
  2016  02E4  1FF4               	btfss	___lwdiv@divisor+1,7
  2017  02E5  2AE7               	goto	u1101
  2018  02E6  2AE8               	goto	u1100
  2019  02E7                     u1101:
  2020  02E7  2AD9               	goto	l1564
  2021  02E8                     u1100:
  2022  02E8                     l1570:
  2023  02E8  3001               	movlw	1
  2024  02E9                     u1115:
  2025  02E9  1003               	clrc
  2026  02EA  0DA1               	rlf	___lwdiv@quotient,f
  2027  02EB  0DA2               	rlf	___lwdiv@quotient+1,f
  2028  02EC  3EFF               	addlw	-1
  2029  02ED  1D03               	skipz
  2030  02EE  2AE9               	goto	u1115
  2031  02EF  0874               	movf	___lwdiv@divisor+1,w
  2032  02F0  0276               	subwf	___lwdiv@dividend+1,w
  2033  02F1  1D03               	skipz
  2034  02F2  2AF5               	goto	u1125
  2035  02F3  0873               	movf	___lwdiv@divisor,w
  2036  02F4  0275               	subwf	___lwdiv@dividend,w
  2037  02F5                     u1125:
  2038  02F5  1C03               	skipc
  2039  02F6  2AF8               	goto	u1121
  2040  02F7  2AF9               	goto	u1120
  2041  02F8                     u1121:
  2042  02F8  2B00               	goto	l1576
  2043  02F9                     u1120:
  2044  02F9                     l1572:
  2045  02F9  0873               	movf	___lwdiv@divisor,w
  2046  02FA  02F5               	subwf	___lwdiv@dividend,f
  2047  02FB  0874               	movf	___lwdiv@divisor+1,w
  2048  02FC  1C03               	skipc
  2049  02FD  03F6               	decf	___lwdiv@dividend+1,f
  2050  02FE  02F6               	subwf	___lwdiv@dividend+1,f
  2051  02FF                     l1574:
  2052  02FF  1421               	bsf	___lwdiv@quotient,0
  2053  0300                     l1576:
  2054  0300  3001               	movlw	1
  2055  0301                     u1135:
  2056  0301  1003               	clrc
  2057  0302  0CF4               	rrf	___lwdiv@divisor+1,f
  2058  0303  0CF3               	rrf	___lwdiv@divisor,f
  2059  0304  3EFF               	addlw	-1
  2060  0305  1D03               	skipz
  2061  0306  2B01               	goto	u1135
  2062  0307                     l1578:
  2063  0307  3001               	movlw	1
  2064  0308  02A0               	subwf	___lwdiv@counter,f
  2065  0309  1D03               	btfss	3,2
  2066  030A  2B0C               	goto	u1141
  2067  030B  2B0D               	goto	u1140
  2068  030C                     u1141:
  2069  030C  2AE8               	goto	l1570
  2070  030D                     u1140:
  2071  030D                     l1580:
  2072  030D  0822               	movf	___lwdiv@quotient+1,w
  2073  030E  00F4               	movwf	?___lwdiv+1
  2074  030F  0821               	movf	___lwdiv@quotient,w
  2075  0310  00F3               	movwf	?___lwdiv
  2076  0311                     l554:
  2077  0311  0008               	return
  2078  0312                     __end_of___lwdiv:
  2079                           
  2080                           	psect	text10
  2081  0228                     __ptext10:	
  2082 ;; *************** function _divisor *****************
  2083 ;; Defined at:
  2084 ;;		line 141 in file "LAB2.c"
  2085 ;; Parameters:    Size  Location     Type
  2086 ;;  a               1    wreg     unsigned char 
  2087 ;;  dig             1    4[BANK0 ] PTR unsigned char 
  2088 ;;		 -> vol2(1), vol1(1), 
  2089 ;; Auto vars:     Size  Location     Type
  2090 ;;  a               1    7[BANK0 ] unsigned char 
  2091 ;;  i               2   10[BANK0 ] int 
  2092 ;;  b               2    8[BANK0 ] int 
  2093 ;; Return value:  Size  Location     Type
  2094 ;;                  1    wreg      void 
  2095 ;; Registers used:
  2096 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2097 ;; Tracked objects:
  2098 ;;		On entry : 0/0
  2099 ;;		On exit  : 0/0
  2100 ;;		Unchanged: 0/0
  2101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2102 ;;      Params:         0       1       0       0       0
  2103 ;;      Locals:         0       5       0       0       0
  2104 ;;      Temps:          0       2       0       0       0
  2105 ;;      Totals:         0       8       0       0       0
  2106 ;;Total ram usage:        8 bytes
  2107 ;; Hardware stack levels used: 1
  2108 ;; Hardware stack levels required when called: 3
  2109 ;; This function calls:
  2110 ;;		___awdiv
  2111 ;;		___awmod
  2112 ;; This function is called by:
  2113 ;;		_conversion_char
  2114 ;; This function uses a non-reentrant model
  2115 ;;
  2116                           
  2117                           
  2118                           ;psect for function _divisor
  2119  0228                     _divisor:
  2120                           
  2121                           ;incstack = 0
  2122                           ; Regs used in _divisor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2123                           ;divisor@a stored from wreg
  2124  0228  1283               	bcf	3,5	;RP0=0, select bank0
  2125  0229  1303               	bcf	3,6	;RP1=0, select bank0
  2126  022A  00A7               	movwf	divisor@a
  2127  022B                     l1584:
  2128                           
  2129                           ;LAB2.c: 142:     int b = 2*a;
  2130  022B  0827               	movf	divisor@a,w
  2131  022C  00A5               	movwf	??_divisor
  2132  022D  01A6               	clrf	??_divisor+1
  2133  022E  1003               	clrc
  2134  022F  0D25               	rlf	??_divisor,w
  2135  0230  00A8               	movwf	divisor@b
  2136  0231  0D26               	rlf	??_divisor+1,w
  2137  0232  00A9               	movwf	divisor@b+1
  2138  0233                     l1586:
  2139                           
  2140                           ;LAB2.c: 143:     for(int i = 0; i<3 ; i++){
  2141  0233  01AA               	clrf	divisor@i
  2142  0234  01AB               	clrf	divisor@i+1
  2143  0235                     l1592:
  2144                           
  2145                           ;LAB2.c: 144:         dig[i] = b % 10;
  2146  0235  300A               	movlw	10
  2147  0236  00F3               	movwf	___awmod@divisor
  2148  0237  3000               	movlw	0
  2149  0238  00F4               	movwf	___awmod@divisor+1
  2150  0239  1283               	bcf	3,5	;RP0=0, select bank0
  2151  023A  1303               	bcf	3,6	;RP1=0, select bank0
  2152  023B  0829               	movf	divisor@b+1,w
  2153  023C  00F6               	movwf	___awmod@dividend+1
  2154  023D  0828               	movf	divisor@b,w
  2155  023E  00F5               	movwf	___awmod@dividend
  2156  023F  120A  118A  21CD  120A  118A  	fcall	___awmod
  2157  0244  0873               	movf	?___awmod,w
  2158  0245  1283               	bcf	3,5	;RP0=0, select bank0
  2159  0246  1303               	bcf	3,6	;RP1=0, select bank0
  2160  0247  00A5               	movwf	??_divisor
  2161  0248  082A               	movf	divisor@i,w
  2162  0249  0724               	addwf	divisor@dig,w
  2163  024A  00A6               	movwf	??_divisor+1
  2164  024B  0826               	movf	??_divisor+1,w
  2165  024C  0084               	movwf	4
  2166  024D  0825               	movf	??_divisor,w
  2167  024E  1383               	bcf	3,7	;select IRP bank0
  2168  024F  0080               	movwf	0
  2169                           
  2170                           ;LAB2.c: 145:         b = (b - dig[i])/10;
  2171  0250  300A               	movlw	10
  2172  0251  00F3               	movwf	___awdiv@divisor
  2173  0252  3000               	movlw	0
  2174  0253  00F4               	movwf	___awdiv@divisor+1
  2175  0254  082A               	movf	divisor@i,w
  2176  0255  0724               	addwf	divisor@dig,w
  2177  0256  00A5               	movwf	??_divisor
  2178  0257  0825               	movf	??_divisor,w
  2179  0258  0084               	movwf	4
  2180  0259  0800               	movf	0,w
  2181  025A  0228               	subwf	divisor@b,w
  2182  025B  00F5               	movwf	___awdiv@dividend
  2183  025C  0829               	movf	divisor@b+1,w
  2184  025D  1C03               	skipc
  2185  025E  0329               	decf	divisor@b+1,w
  2186  025F  00F6               	movwf	___awdiv@dividend+1
  2187  0260  120A  118A  2109  120A  118A  	fcall	___awdiv
  2188  0265  0874               	movf	?___awdiv+1,w
  2189  0266  1283               	bcf	3,5	;RP0=0, select bank0
  2190  0267  1303               	bcf	3,6	;RP1=0, select bank0
  2191  0268  00A9               	movwf	divisor@b+1
  2192  0269  0873               	movf	?___awdiv,w
  2193  026A  00A8               	movwf	divisor@b
  2194  026B                     l1594:
  2195                           
  2196                           ;LAB2.c: 146:     }
  2197  026B  3001               	movlw	1
  2198  026C  07AA               	addwf	divisor@i,f
  2199  026D  1803               	skipnc
  2200  026E  0AAB               	incf	divisor@i+1,f
  2201  026F  3000               	movlw	0
  2202  0270  07AB               	addwf	divisor@i+1,f
  2203  0271                     l1596:
  2204  0271  082B               	movf	divisor@i+1,w
  2205  0272  3A80               	xorlw	128
  2206  0273  00FF               	movwf	btemp+1
  2207  0274  3080               	movlw	128
  2208  0275  027F               	subwf	btemp+1,w
  2209  0276  1D03               	skipz
  2210  0277  2A7A               	goto	u1155
  2211  0278  3003               	movlw	3
  2212  0279  022A               	subwf	divisor@i,w
  2213  027A                     u1155:
  2214  027A  1C03               	skipc
  2215  027B  2A7D               	goto	u1151
  2216  027C  2A7E               	goto	u1150
  2217  027D                     u1151:
  2218  027D  2A35               	goto	l1592
  2219  027E                     u1150:
  2220  027E                     l93:
  2221  027E  0008               	return
  2222  027F                     __end_of_divisor:
  2223                           
  2224                           	psect	text11
  2225  01CD                     __ptext11:	
  2226 ;; *************** function ___awmod *****************
  2227 ;; Defined at:
  2228 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awmod.c"
  2229 ;; Parameters:    Size  Location     Type
  2230 ;;  divisor         2    3[COMMON] int 
  2231 ;;  dividend        2    5[COMMON] int 
  2232 ;; Auto vars:     Size  Location     Type
  2233 ;;  sign            1    1[BANK0 ] unsigned char 
  2234 ;;  counter         1    0[BANK0 ] unsigned char 
  2235 ;; Return value:  Size  Location     Type
  2236 ;;                  2    3[COMMON] int 
  2237 ;; Registers used:
  2238 ;;		wreg, status,2, status,0
  2239 ;; Tracked objects:
  2240 ;;		On entry : 0/0
  2241 ;;		On exit  : 0/0
  2242 ;;		Unchanged: 0/0
  2243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2244 ;;      Params:         4       0       0       0       0
  2245 ;;      Locals:         0       2       0       0       0
  2246 ;;      Temps:          1       0       0       0       0
  2247 ;;      Totals:         5       2       0       0       0
  2248 ;;Total ram usage:        7 bytes
  2249 ;; Hardware stack levels used: 1
  2250 ;; Hardware stack levels required when called: 2
  2251 ;; This function calls:
  2252 ;;		Nothing
  2253 ;; This function is called by:
  2254 ;;		_divisor
  2255 ;; This function uses a non-reentrant model
  2256 ;;
  2257                           
  2258                           
  2259                           ;psect for function ___awmod
  2260  01CD                     ___awmod:
  2261  01CD                     l1520:	
  2262                           ;incstack = 0
  2263                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2264                           
  2265  01CD  1283               	bcf	3,5	;RP0=0, select bank0
  2266  01CE  1303               	bcf	3,6	;RP1=0, select bank0
  2267  01CF  01A1               	clrf	___awmod@sign
  2268  01D0                     l1522:
  2269  01D0  1FF6               	btfss	___awmod@dividend+1,7
  2270  01D1  29D3               	goto	u991
  2271  01D2  29D4               	goto	u990
  2272  01D3                     u991:
  2273  01D3  29DB               	goto	l1528
  2274  01D4                     u990:
  2275  01D4                     l1524:
  2276  01D4  09F5               	comf	___awmod@dividend,f
  2277  01D5  09F6               	comf	___awmod@dividend+1,f
  2278  01D6  0AF5               	incf	___awmod@dividend,f
  2279  01D7  1903               	skipnz
  2280  01D8  0AF6               	incf	___awmod@dividend+1,f
  2281  01D9                     l1526:
  2282  01D9  01A1               	clrf	___awmod@sign
  2283  01DA  0AA1               	incf	___awmod@sign,f
  2284  01DB                     l1528:
  2285  01DB  1FF4               	btfss	___awmod@divisor+1,7
  2286  01DC  29DE               	goto	u1001
  2287  01DD  29DF               	goto	u1000
  2288  01DE                     u1001:
  2289  01DE  29E4               	goto	l1532
  2290  01DF                     u1000:
  2291  01DF                     l1530:
  2292  01DF  09F3               	comf	___awmod@divisor,f
  2293  01E0  09F4               	comf	___awmod@divisor+1,f
  2294  01E1  0AF3               	incf	___awmod@divisor,f
  2295  01E2  1903               	skipnz
  2296  01E3  0AF4               	incf	___awmod@divisor+1,f
  2297  01E4                     l1532:
  2298  01E4  0873               	movf	___awmod@divisor,w
  2299  01E5  0474               	iorwf	___awmod@divisor+1,w
  2300  01E6  1903               	btfsc	3,2
  2301  01E7  29E9               	goto	u1011
  2302  01E8  29EA               	goto	u1010
  2303  01E9                     u1011:
  2304  01E9  2A19               	goto	l1550
  2305  01EA                     u1010:
  2306  01EA                     l1534:
  2307  01EA  01A0               	clrf	___awmod@counter
  2308  01EB  0AA0               	incf	___awmod@counter,f
  2309  01EC  29F8               	goto	l1540
  2310  01ED                     l1536:
  2311  01ED  3001               	movlw	1
  2312  01EE                     u1025:
  2313  01EE  1003               	clrc
  2314  01EF  0DF3               	rlf	___awmod@divisor,f
  2315  01F0  0DF4               	rlf	___awmod@divisor+1,f
  2316  01F1  3EFF               	addlw	-1
  2317  01F2  1D03               	skipz
  2318  01F3  29EE               	goto	u1025
  2319  01F4                     l1538:
  2320  01F4  3001               	movlw	1
  2321  01F5  00F7               	movwf	??___awmod
  2322  01F6  0877               	movf	??___awmod,w
  2323  01F7  07A0               	addwf	___awmod@counter,f
  2324  01F8                     l1540:
  2325  01F8  1FF4               	btfss	___awmod@divisor+1,7
  2326  01F9  29FB               	goto	u1031
  2327  01FA  29FC               	goto	u1030
  2328  01FB                     u1031:
  2329  01FB  29ED               	goto	l1536
  2330  01FC                     u1030:
  2331  01FC                     l1542:
  2332  01FC  0874               	movf	___awmod@divisor+1,w
  2333  01FD  0276               	subwf	___awmod@dividend+1,w
  2334  01FE  1D03               	skipz
  2335  01FF  2A02               	goto	u1045
  2336  0200  0873               	movf	___awmod@divisor,w
  2337  0201  0275               	subwf	___awmod@dividend,w
  2338  0202                     u1045:
  2339  0202  1C03               	skipc
  2340  0203  2A05               	goto	u1041
  2341  0204  2A06               	goto	u1040
  2342  0205                     u1041:
  2343  0205  2A0C               	goto	l1546
  2344  0206                     u1040:
  2345  0206                     l1544:
  2346  0206  0873               	movf	___awmod@divisor,w
  2347  0207  02F5               	subwf	___awmod@dividend,f
  2348  0208  0874               	movf	___awmod@divisor+1,w
  2349  0209  1C03               	skipc
  2350  020A  03F6               	decf	___awmod@dividend+1,f
  2351  020B  02F6               	subwf	___awmod@dividend+1,f
  2352  020C                     l1546:
  2353  020C  3001               	movlw	1
  2354  020D                     u1055:
  2355  020D  1003               	clrc
  2356  020E  0CF4               	rrf	___awmod@divisor+1,f
  2357  020F  0CF3               	rrf	___awmod@divisor,f
  2358  0210  3EFF               	addlw	-1
  2359  0211  1D03               	skipz
  2360  0212  2A0D               	goto	u1055
  2361  0213                     l1548:
  2362  0213  3001               	movlw	1
  2363  0214  02A0               	subwf	___awmod@counter,f
  2364  0215  1D03               	btfss	3,2
  2365  0216  2A18               	goto	u1061
  2366  0217  2A19               	goto	u1060
  2367  0218                     u1061:
  2368  0218  29FC               	goto	l1542
  2369  0219                     u1060:
  2370  0219                     l1550:
  2371  0219  0821               	movf	___awmod@sign,w
  2372  021A  1903               	btfsc	3,2
  2373  021B  2A1D               	goto	u1071
  2374  021C  2A1E               	goto	u1070
  2375  021D                     u1071:
  2376  021D  2A23               	goto	l1554
  2377  021E                     u1070:
  2378  021E                     l1552:
  2379  021E  09F5               	comf	___awmod@dividend,f
  2380  021F  09F6               	comf	___awmod@dividend+1,f
  2381  0220  0AF5               	incf	___awmod@dividend,f
  2382  0221  1903               	skipnz
  2383  0222  0AF6               	incf	___awmod@dividend+1,f
  2384  0223                     l1554:
  2385  0223  0876               	movf	___awmod@dividend+1,w
  2386  0224  00F4               	movwf	?___awmod+1
  2387  0225  0875               	movf	___awmod@dividend,w
  2388  0226  00F3               	movwf	?___awmod
  2389  0227                     l448:
  2390  0227  0008               	return
  2391  0228                     __end_of___awmod:
  2392                           
  2393                           	psect	text12
  2394  0109                     __ptext12:	
  2395 ;; *************** function ___awdiv *****************
  2396 ;; Defined at:
  2397 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awdiv.c"
  2398 ;; Parameters:    Size  Location     Type
  2399 ;;  divisor         2    3[COMMON] int 
  2400 ;;  dividend        2    5[COMMON] int 
  2401 ;; Auto vars:     Size  Location     Type
  2402 ;;  quotient        2    2[BANK0 ] int 
  2403 ;;  sign            1    1[BANK0 ] unsigned char 
  2404 ;;  counter         1    0[BANK0 ] unsigned char 
  2405 ;; Return value:  Size  Location     Type
  2406 ;;                  2    3[COMMON] int 
  2407 ;; Registers used:
  2408 ;;		wreg, status,2, status,0
  2409 ;; Tracked objects:
  2410 ;;		On entry : 0/0
  2411 ;;		On exit  : 0/0
  2412 ;;		Unchanged: 0/0
  2413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2414 ;;      Params:         4       0       0       0       0
  2415 ;;      Locals:         0       4       0       0       0
  2416 ;;      Temps:          1       0       0       0       0
  2417 ;;      Totals:         5       4       0       0       0
  2418 ;;Total ram usage:        9 bytes
  2419 ;; Hardware stack levels used: 1
  2420 ;; Hardware stack levels required when called: 2
  2421 ;; This function calls:
  2422 ;;		Nothing
  2423 ;; This function is called by:
  2424 ;;		_divisor
  2425 ;; This function uses a non-reentrant model
  2426 ;;
  2427                           
  2428                           
  2429                           ;psect for function ___awdiv
  2430  0109                     ___awdiv:
  2431  0109                     l1166:	
  2432                           ;incstack = 0
  2433                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2434                           
  2435  0109  1283               	bcf	3,5	;RP0=0, select bank0
  2436  010A  1303               	bcf	3,6	;RP1=0, select bank0
  2437  010B  01A1               	clrf	___awdiv@sign
  2438  010C                     l1168:
  2439  010C  1FF4               	btfss	___awdiv@divisor+1,7
  2440  010D  290F               	goto	u501
  2441  010E  2910               	goto	u500
  2442  010F                     u501:
  2443  010F  2917               	goto	l1174
  2444  0110                     u500:
  2445  0110                     l1170:
  2446  0110  09F3               	comf	___awdiv@divisor,f
  2447  0111  09F4               	comf	___awdiv@divisor+1,f
  2448  0112  0AF3               	incf	___awdiv@divisor,f
  2449  0113  1903               	skipnz
  2450  0114  0AF4               	incf	___awdiv@divisor+1,f
  2451  0115                     l1172:
  2452  0115  01A1               	clrf	___awdiv@sign
  2453  0116  0AA1               	incf	___awdiv@sign,f
  2454  0117                     l1174:
  2455  0117  1FF6               	btfss	___awdiv@dividend+1,7
  2456  0118  291A               	goto	u511
  2457  0119  291B               	goto	u510
  2458  011A                     u511:
  2459  011A  2924               	goto	l1180
  2460  011B                     u510:
  2461  011B                     l1176:
  2462  011B  09F5               	comf	___awdiv@dividend,f
  2463  011C  09F6               	comf	___awdiv@dividend+1,f
  2464  011D  0AF5               	incf	___awdiv@dividend,f
  2465  011E  1903               	skipnz
  2466  011F  0AF6               	incf	___awdiv@dividend+1,f
  2467  0120                     l1178:
  2468  0120  3001               	movlw	1
  2469  0121  00F7               	movwf	??___awdiv
  2470  0122  0877               	movf	??___awdiv,w
  2471  0123  06A1               	xorwf	___awdiv@sign,f
  2472  0124                     l1180:
  2473  0124  01A2               	clrf	___awdiv@quotient
  2474  0125  01A3               	clrf	___awdiv@quotient+1
  2475  0126                     l1182:
  2476  0126  0873               	movf	___awdiv@divisor,w
  2477  0127  0474               	iorwf	___awdiv@divisor+1,w
  2478  0128  1903               	btfsc	3,2
  2479  0129  292B               	goto	u521
  2480  012A  292C               	goto	u520
  2481  012B                     u521:
  2482  012B  2963               	goto	l1202
  2483  012C                     u520:
  2484  012C                     l1184:
  2485  012C  01A0               	clrf	___awdiv@counter
  2486  012D  0AA0               	incf	___awdiv@counter,f
  2487  012E  293A               	goto	l1190
  2488  012F                     l1186:
  2489  012F  3001               	movlw	1
  2490  0130                     u535:
  2491  0130  1003               	clrc
  2492  0131  0DF3               	rlf	___awdiv@divisor,f
  2493  0132  0DF4               	rlf	___awdiv@divisor+1,f
  2494  0133  3EFF               	addlw	-1
  2495  0134  1D03               	skipz
  2496  0135  2930               	goto	u535
  2497  0136                     l1188:
  2498  0136  3001               	movlw	1
  2499  0137  00F7               	movwf	??___awdiv
  2500  0138  0877               	movf	??___awdiv,w
  2501  0139  07A0               	addwf	___awdiv@counter,f
  2502  013A                     l1190:
  2503  013A  1FF4               	btfss	___awdiv@divisor+1,7
  2504  013B  293D               	goto	u541
  2505  013C  293E               	goto	u540
  2506  013D                     u541:
  2507  013D  292F               	goto	l1186
  2508  013E                     u540:
  2509  013E                     l1192:
  2510  013E  3001               	movlw	1
  2511  013F                     u555:
  2512  013F  1003               	clrc
  2513  0140  0DA2               	rlf	___awdiv@quotient,f
  2514  0141  0DA3               	rlf	___awdiv@quotient+1,f
  2515  0142  3EFF               	addlw	-1
  2516  0143  1D03               	skipz
  2517  0144  293F               	goto	u555
  2518  0145  0874               	movf	___awdiv@divisor+1,w
  2519  0146  0276               	subwf	___awdiv@dividend+1,w
  2520  0147  1D03               	skipz
  2521  0148  294B               	goto	u565
  2522  0149  0873               	movf	___awdiv@divisor,w
  2523  014A  0275               	subwf	___awdiv@dividend,w
  2524  014B                     u565:
  2525  014B  1C03               	skipc
  2526  014C  294E               	goto	u561
  2527  014D  294F               	goto	u560
  2528  014E                     u561:
  2529  014E  2956               	goto	l1198
  2530  014F                     u560:
  2531  014F                     l1194:
  2532  014F  0873               	movf	___awdiv@divisor,w
  2533  0150  02F5               	subwf	___awdiv@dividend,f
  2534  0151  0874               	movf	___awdiv@divisor+1,w
  2535  0152  1C03               	skipc
  2536  0153  03F6               	decf	___awdiv@dividend+1,f
  2537  0154  02F6               	subwf	___awdiv@dividend+1,f
  2538  0155                     l1196:
  2539  0155  1422               	bsf	___awdiv@quotient,0
  2540  0156                     l1198:
  2541  0156  3001               	movlw	1
  2542  0157                     u575:
  2543  0157  1003               	clrc
  2544  0158  0CF4               	rrf	___awdiv@divisor+1,f
  2545  0159  0CF3               	rrf	___awdiv@divisor,f
  2546  015A  3EFF               	addlw	-1
  2547  015B  1D03               	skipz
  2548  015C  2957               	goto	u575
  2549  015D                     l1200:
  2550  015D  3001               	movlw	1
  2551  015E  02A0               	subwf	___awdiv@counter,f
  2552  015F  1D03               	btfss	3,2
  2553  0160  2962               	goto	u581
  2554  0161  2963               	goto	u580
  2555  0162                     u581:
  2556  0162  293E               	goto	l1192
  2557  0163                     u580:
  2558  0163                     l1202:
  2559  0163  0821               	movf	___awdiv@sign,w
  2560  0164  1903               	btfsc	3,2
  2561  0165  2967               	goto	u591
  2562  0166  2968               	goto	u590
  2563  0167                     u591:
  2564  0167  296D               	goto	l1206
  2565  0168                     u590:
  2566  0168                     l1204:
  2567  0168  09A2               	comf	___awdiv@quotient,f
  2568  0169  09A3               	comf	___awdiv@quotient+1,f
  2569  016A  0AA2               	incf	___awdiv@quotient,f
  2570  016B  1903               	skipnz
  2571  016C  0AA3               	incf	___awdiv@quotient+1,f
  2572  016D                     l1206:
  2573  016D  0823               	movf	___awdiv@quotient+1,w
  2574  016E  00F4               	movwf	?___awdiv+1
  2575  016F  0822               	movf	___awdiv@quotient,w
  2576  0170  00F3               	movwf	?___awdiv
  2577  0171                     l435:
  2578  0171  0008               	return
  2579  0172                     __end_of___awdiv:
  2580                           
  2581                           	psect	text13
  2582  03BC                     __ptext13:	
  2583 ;; *************** function _conversion *****************
  2584 ;; Defined at:
  2585 ;;		line 21 in file "ADC.c"
  2586 ;; Parameters:    Size  Location     Type
  2587 ;;		None
  2588 ;; Auto vars:     Size  Location     Type
  2589 ;;		None
  2590 ;; Return value:  Size  Location     Type
  2591 ;;                  1    wreg      void 
  2592 ;; Registers used:
  2593 ;;		wreg, status,2, status,0
  2594 ;; Tracked objects:
  2595 ;;		On entry : 0/0
  2596 ;;		On exit  : 0/0
  2597 ;;		Unchanged: 0/0
  2598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2599 ;;      Params:         0       0       0       0       0
  2600 ;;      Locals:         0       0       0       0       0
  2601 ;;      Temps:          1       0       0       0       0
  2602 ;;      Totals:         1       0       0       0       0
  2603 ;;Total ram usage:        1 bytes
  2604 ;; Hardware stack levels used: 1
  2605 ;; Hardware stack levels required when called: 2
  2606 ;; This function calls:
  2607 ;;		Nothing
  2608 ;; This function is called by:
  2609 ;;		_main
  2610 ;; This function uses a non-reentrant model
  2611 ;;
  2612                           
  2613                           
  2614                           ;psect for function _conversion
  2615  03BC                     _conversion:
  2616  03BC                     l1442:	
  2617                           ;incstack = 0
  2618                           ; Regs used in _conversion: [wreg+status,2+status,0]
  2619                           
  2620                           
  2621                           ;ADC.c: 22:     if(ADCON0bits.GO == 0){
  2622  03BC  1283               	bcf	3,5	;RP0=0, select bank0
  2623  03BD  1303               	bcf	3,6	;RP1=0, select bank0
  2624  03BE  189F               	btfsc	31,1	;volatile
  2625  03BF  2BC1               	goto	u921
  2626  03C0  2BC2               	goto	u920
  2627  03C1                     u921:
  2628  03C1  2BE7               	goto	l168
  2629  03C2                     u920:
  2630  03C2                     l1444:
  2631                           
  2632                           ;ADC.c: 23:         if(ADCON0bits.CHS == 1){
  2633  03C2  0C1F               	rrf	31,w	;volatile
  2634  03C3  00F3               	movwf	??_conversion
  2635  03C4  0C73               	rrf	??_conversion,w
  2636  03C5  390F               	andlw	15
  2637  03C6  3A01               	xorlw	1
  2638  03C7  1D03               	skipz
  2639  03C8  2BCA               	goto	u931
  2640  03C9  2BCB               	goto	u930
  2641  03CA                     u931:
  2642  03CA  2BD2               	goto	l1450
  2643  03CB                     u930:
  2644  03CB                     l1446:
  2645                           
  2646                           ;ADC.c: 24:             ADCON0bits.CHS = 0;
  2647  03CB  30C3               	movlw	-61
  2648  03CC  059F               	andwf	31,f	;volatile
  2649  03CD                     l1448:
  2650                           
  2651                           ;ADC.c: 25:             _delay((unsigned long)((50)*(8000000/4000000.0)));
  2652  03CD  3021               	movlw	33
  2653  03CE  00F3               	movwf	??_conversion
  2654  03CF                     u1257:
  2655  03CF  0BF3               	decfsz	??_conversion,f
  2656  03D0  2BCF               	goto	u1257
  2657                           
  2658                           ;ADC.c: 26:         }
  2659  03D1  2BE0               	goto	l1456
  2660  03D2                     l1450:
  2661  03D2  0C1F               	rrf	31,w	;volatile
  2662  03D3  00F3               	movwf	??_conversion
  2663  03D4  0C73               	rrf	??_conversion,w
  2664  03D5  390F               	andlw	15
  2665  03D6  3A00               	xorlw	0
  2666  03D7  1D03               	skipz
  2667  03D8  2BDA               	goto	u941
  2668  03D9  2BDB               	goto	u940
  2669  03DA                     u941:
  2670  03DA  2BE0               	goto	l1456
  2671  03DB                     u940:
  2672  03DB                     l1452:
  2673                           
  2674                           ;ADC.c: 28:             ADCON0bits.CHS = 1;
  2675  03DB  081F               	movf	31,w	;volatile
  2676  03DC  39C3               	andlw	-61
  2677  03DD  3804               	iorlw	4
  2678  03DE  009F               	movwf	31	;volatile
  2679  03DF  2BCD               	goto	l1448
  2680  03E0                     l1456:
  2681                           
  2682                           ;ADC.c: 31:         _delay((unsigned long)((50)*(8000000/4000000.0)));
  2683  03E0  3021               	movlw	33
  2684  03E1  00F3               	movwf	??_conversion
  2685  03E2                     u1267:
  2686  03E2  0BF3               	decfsz	??_conversion,f
  2687  03E3  2BE2               	goto	u1267
  2688  03E4                     l1458:
  2689                           
  2690                           ;ADC.c: 32:         ADCON0bits.GO = 1;
  2691  03E4  1283               	bcf	3,5	;RP0=0, select bank0
  2692  03E5  1303               	bcf	3,6	;RP1=0, select bank0
  2693  03E6  149F               	bsf	31,1	;volatile
  2694  03E7                     l168:
  2695  03E7  0008               	return
  2696  03E8                     __end_of_conversion:
  2697                           
  2698                           	psect	text14
  2699  03E8                     __ptext14:	
  2700 ;; *************** function _Escribir_stringLCD *****************
  2701 ;; Defined at:
  2702 ;;		line 46 in file "LCD.c"
  2703 ;; Parameters:    Size  Location     Type
  2704 ;;  d               2    5[COMMON] PTR const unsigned char 
  2705 ;;		 -> buffer2(10), buffer1(10), STR_1(17), 
  2706 ;; Auto vars:     Size  Location     Type
  2707 ;;		None
  2708 ;; Return value:  Size  Location     Type
  2709 ;;                  1    wreg      void 
  2710 ;; Registers used:
  2711 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2712 ;; Tracked objects:
  2713 ;;		On entry : 0/0
  2714 ;;		On exit  : 0/0
  2715 ;;		Unchanged: 0/0
  2716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2717 ;;      Params:         2       0       0       0       0
  2718 ;;      Locals:         0       0       0       0       0
  2719 ;;      Temps:          0       0       0       0       0
  2720 ;;      Totals:         2       0       0       0       0
  2721 ;;Total ram usage:        2 bytes
  2722 ;; Hardware stack levels used: 1
  2723 ;; Hardware stack levels required when called: 4
  2724 ;; This function calls:
  2725 ;;		_Escribir_datosLCD
  2726 ;; This function is called by:
  2727 ;;		_main
  2728 ;; This function uses a non-reentrant model
  2729 ;;
  2730                           
  2731                           
  2732                           ;psect for function _Escribir_stringLCD
  2733  03E8                     _Escribir_stringLCD:
  2734  03E8                     l1468:	
  2735                           ;incstack = 0
  2736                           ; Regs used in _Escribir_stringLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2737                           
  2738                           
  2739                           ;LCD.c: 47:     while(*d){
  2740  03E8  2BFD               	goto	l1474
  2741  03E9                     l1470:
  2742                           
  2743                           ;LCD.c: 48:         Escribir_datosLCD(*d++);
  2744  03E9  0876               	movf	Escribir_stringLCD@d+1,w
  2745  03EA  00FF               	movwf	btemp+1
  2746  03EB  0875               	movf	Escribir_stringLCD@d,w
  2747  03EC  0084               	movwf	4
  2748  03ED  120A  118A  2389  120A  118A  	fcall	stringtab
  2749  03F2  120A  118A  24B0  120A  118A  	fcall	_Escribir_datosLCD
  2750  03F7                     l1472:
  2751  03F7  3001               	movlw	1
  2752  03F8  07F5               	addwf	Escribir_stringLCD@d,f
  2753  03F9  1803               	skipnc
  2754  03FA  0AF6               	incf	Escribir_stringLCD@d+1,f
  2755  03FB  3000               	movlw	0
  2756  03FC  07F6               	addwf	Escribir_stringLCD@d+1,f
  2757  03FD                     l1474:
  2758                           
  2759                           ;LCD.c: 47:     while(*d){
  2760  03FD  0876               	movf	Escribir_stringLCD@d+1,w
  2761  03FE  1283               	bcf	3,5	;RP0=0, select bank0
  2762  03FF  1303               	bcf	3,6	;RP1=0, select bank0
  2763  0400  00FF               	movwf	btemp+1
  2764  0401  0875               	movf	Escribir_stringLCD@d,w
  2765  0402  0084               	movwf	4
  2766  0403  120A  118A  2389  120A  118A  	fcall	stringtab
  2767  0408  3A00               	xorlw	0
  2768  0409  1D03               	skipz
  2769  040A  2C0C               	goto	u971
  2770  040B  2C0D               	goto	u970
  2771  040C                     u971:
  2772  040C  2BE9               	goto	l1470
  2773  040D                     u970:
  2774  040D                     l125:
  2775  040D  0008               	return
  2776  040E                     __end_of_Escribir_stringLCD:
  2777                           
  2778                           	psect	text15
  2779  04B0                     __ptext15:	
  2780 ;; *************** function _Escribir_datosLCD *****************
  2781 ;; Defined at:
  2782 ;;		line 25 in file "LCD.c"
  2783 ;; Parameters:    Size  Location     Type
  2784 ;;  LCDchar         1    wreg     unsigned char 
  2785 ;; Auto vars:     Size  Location     Type
  2786 ;;  LCDchar         1    4[COMMON] unsigned char 
  2787 ;; Return value:  Size  Location     Type
  2788 ;;                  1    wreg      void 
  2789 ;; Registers used:
  2790 ;;		wreg, status,2, status,0, pclath, cstack
  2791 ;; Tracked objects:
  2792 ;;		On entry : 0/0
  2793 ;;		On exit  : 0/0
  2794 ;;		Unchanged: 0/0
  2795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2796 ;;      Params:         0       0       0       0       0
  2797 ;;      Locals:         1       0       0       0       0
  2798 ;;      Temps:          0       0       0       0       0
  2799 ;;      Totals:         1       0       0       0       0
  2800 ;;Total ram usage:        1 bytes
  2801 ;; Hardware stack levels used: 1
  2802 ;; Hardware stack levels required when called: 3
  2803 ;; This function calls:
  2804 ;;		_prender_ELCD
  2805 ;; This function is called by:
  2806 ;;		_Escribir_stringLCD
  2807 ;; This function uses a non-reentrant model
  2808 ;;
  2809                           
  2810                           
  2811                           ;psect for function _Escribir_datosLCD
  2812  04B0                     _Escribir_datosLCD:
  2813                           
  2814                           ;incstack = 0
  2815                           ; Regs used in _Escribir_datosLCD: [wreg+status,2+status,0+pclath+cstack]
  2816                           ;Escribir_datosLCD@LCDchar stored from wreg
  2817  04B0  00F4               	movwf	Escribir_datosLCD@LCDchar
  2818  04B1                     l1392:
  2819                           
  2820                           ;LCD.c: 26:     RC0 = 1;
  2821  04B1  1283               	bcf	3,5	;RP0=0, select bank0
  2822  04B2  1303               	bcf	3,6	;RP1=0, select bank0
  2823  04B3  1407               	bsf	7,0	;volatile
  2824  04B4                     l1394:
  2825                           
  2826                           ;LCD.c: 27:     PORTD = LCDchar;
  2827  04B4  0874               	movf	Escribir_datosLCD@LCDchar,w
  2828  04B5  0088               	movwf	8	;volatile
  2829  04B6                     l1396:
  2830                           
  2831                           ;LCD.c: 29:     prender_ELCD();
  2832  04B6  120A  118A  246A  120A  118A  	fcall	_prender_ELCD
  2833  04BB                     l116:
  2834  04BB  0008               	return
  2835  04BC                     __end_of_Escribir_datosLCD:
  2836                           
  2837                           	psect	text16
  2838  046A                     __ptext16:	
  2839 ;; *************** function _prender_ELCD *****************
  2840 ;; Defined at:
  2841 ;;		line 11 in file "LCD.c"
  2842 ;; Parameters:    Size  Location     Type
  2843 ;;		None
  2844 ;; Auto vars:     Size  Location     Type
  2845 ;;		None
  2846 ;; Return value:  Size  Location     Type
  2847 ;;                  1    wreg      void 
  2848 ;; Registers used:
  2849 ;;		wreg
  2850 ;; Tracked objects:
  2851 ;;		On entry : 0/0
  2852 ;;		On exit  : 0/0
  2853 ;;		Unchanged: 0/0
  2854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2855 ;;      Params:         0       0       0       0       0
  2856 ;;      Locals:         0       0       0       0       0
  2857 ;;      Temps:          1       0       0       0       0
  2858 ;;      Totals:         1       0       0       0       0
  2859 ;;Total ram usage:        1 bytes
  2860 ;; Hardware stack levels used: 1
  2861 ;; Hardware stack levels required when called: 2
  2862 ;; This function calls:
  2863 ;;		Nothing
  2864 ;; This function is called by:
  2865 ;;		_Escribir_comandoLCD
  2866 ;;		_Escribir_datosLCD
  2867 ;; This function uses a non-reentrant model
  2868 ;;
  2869                           
  2870                           
  2871                           ;psect for function _prender_ELCD
  2872  046A                     _prender_ELCD:
  2873  046A                     l1154:	
  2874                           ;incstack = 0
  2875                           ; Regs used in _prender_ELCD: [wreg]
  2876                           
  2877                           
  2878                           ;LCD.c: 12:     RC1 = 1;
  2879  046A  1283               	bcf	3,5	;RP0=0, select bank0
  2880  046B  1303               	bcf	3,6	;RP1=0, select bank0
  2881  046C  1487               	bsf	7,1	;volatile
  2882  046D                     l1156:
  2883                           
  2884                           ;LCD.c: 13:     _delay((unsigned long)((500)*(8000000/4000000.0)));
  2885  046D  30C7               	movlw	199
  2886  046E  00F3               	movwf	??_prender_ELCD
  2887  046F                     u1277:
  2888  046F  2C70               	nop2
  2889  0470  0BF3               	decfsz	??_prender_ELCD,f
  2890  0471  2C6F               	goto	u1277
  2891  0472  2C73               	nop2
  2892  0473  2C74               	nop2
  2893  0474                     l1158:
  2894                           
  2895                           ;LCD.c: 14:     RC1 = 0;
  2896  0474  1283               	bcf	3,5	;RP0=0, select bank0
  2897  0475  1303               	bcf	3,6	;RP1=0, select bank0
  2898  0476  1087               	bcf	7,1	;volatile
  2899                           
  2900                           ;LCD.c: 15:     _delay((unsigned long)((500)*(8000000/4000000.0)));
  2901  0477  30C7               	movlw	199
  2902  0478  00F3               	movwf	??_prender_ELCD
  2903  0479                     u1287:
  2904  0479  2C7A               	nop2
  2905  047A  0BF3               	decfsz	??_prender_ELCD,f
  2906  047B  2C79               	goto	u1287
  2907  047C  2C7D               	nop2
  2908  047D  2C7E               	nop2
  2909  047E                     l110:
  2910  047E  0008               	return
  2911  047F                     __end_of_prender_ELCD:
  2912                           
  2913                           	psect	text17
  2914  047F                     __ptext17:	
  2915 ;; *************** function _isr *****************
  2916 ;; Defined at:
  2917 ;;		line 61 in file "LAB2.c"
  2918 ;; Parameters:    Size  Location     Type
  2919 ;;		None
  2920 ;; Auto vars:     Size  Location     Type
  2921 ;;		None
  2922 ;; Return value:  Size  Location     Type
  2923 ;;                  1    wreg      void 
  2924 ;; Registers used:
  2925 ;;		wreg, status,2, status,0, pclath, cstack
  2926 ;; Tracked objects:
  2927 ;;		On entry : 0/0
  2928 ;;		On exit  : 0/0
  2929 ;;		Unchanged: 0/0
  2930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2931 ;;      Params:         0       0       0       0       0
  2932 ;;      Locals:         0       0       0       0       0
  2933 ;;      Temps:          2       0       0       0       0
  2934 ;;      Totals:         2       0       0       0       0
  2935 ;;Total ram usage:        2 bytes
  2936 ;; Hardware stack levels used: 1
  2937 ;; Hardware stack levels required when called: 1
  2938 ;; This function calls:
  2939 ;;		_ADC
  2940 ;; This function is called by:
  2941 ;;		Interrupt level 1
  2942 ;; This function uses a non-reentrant model
  2943 ;;
  2944                           
  2945                           
  2946                           ;psect for function _isr
  2947  047F                     _isr:
  2948  047F                     i1l1478:
  2949                           
  2950                           ;LAB2.c: 62:     if(PIR1bits.ADIF){
  2951  047F  1283               	bcf	3,5	;RP0=0, select bank0
  2952  0480  1303               	bcf	3,6	;RP1=0, select bank0
  2953  0481  1F0C               	btfss	12,6	;volatile
  2954  0482  2C84               	goto	u98_21
  2955  0483  2C85               	goto	u98_20
  2956  0484                     u98_21:
  2957  0484  2C8D               	goto	i1l74
  2958  0485                     u98_20:
  2959  0485                     i1l1480:
  2960                           
  2961                           ;LAB2.c: 63:         ADC();
  2962  0485  120A  118A  2431  120A  118A  	fcall	_ADC
  2963  048A                     i1l1482:
  2964                           
  2965                           ;LAB2.c: 64:         PIR1bits.ADIF = 0;
  2966  048A  1283               	bcf	3,5	;RP0=0, select bank0
  2967  048B  1303               	bcf	3,6	;RP1=0, select bank0
  2968  048C  130C               	bcf	12,6	;volatile
  2969  048D                     i1l74:
  2970  048D  0872               	movf	??_isr+1,w
  2971  048E  008A               	movwf	10
  2972  048F  0E71               	swapf	??_isr,w
  2973  0490  0083               	movwf	3
  2974  0491  0EFE               	swapf	btemp,f
  2975  0492  0E7E               	swapf	btemp,w
  2976  0493  0009               	retfie
  2977  0494                     __end_of_isr:
  2978                           
  2979                           	psect	intentry
  2980  0004                     __pintentry:	
  2981                           ;incstack = 0
  2982                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  2983                           
  2984  0004                     interrupt_function:
  2985  007E                     saved_w	set	btemp
  2986  0004  00FE               	movwf	btemp
  2987  0005  0E03               	swapf	3,w
  2988  0006  00F1               	movwf	??_isr
  2989  0007  080A               	movf	10,w
  2990  0008  00F2               	movwf	??_isr+1
  2991  0009  120A  118A  2C7F   	ljmp	_isr
  2992                           
  2993                           	psect	text18
  2994  0431                     __ptext18:	
  2995 ;; *************** function _ADC *****************
  2996 ;; Defined at:
  2997 ;;		line 11 in file "ADC.c"
  2998 ;; Parameters:    Size  Location     Type
  2999 ;;		None
  3000 ;; Auto vars:     Size  Location     Type
  3001 ;;		None
  3002 ;; Return value:  Size  Location     Type
  3003 ;;                  1    wreg      void 
  3004 ;; Registers used:
  3005 ;;		wreg, status,2, status,0
  3006 ;; Tracked objects:
  3007 ;;		On entry : 0/0
  3008 ;;		On exit  : 0/0
  3009 ;;		Unchanged: 0/0
  3010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3011 ;;      Params:         0       0       0       0       0
  3012 ;;      Locals:         0       0       0       0       0
  3013 ;;      Temps:          1       0       0       0       0
  3014 ;;      Totals:         1       0       0       0       0
  3015 ;;Total ram usage:        1 bytes
  3016 ;; Hardware stack levels used: 1
  3017 ;; This function calls:
  3018 ;;		Nothing
  3019 ;; This function is called by:
  3020 ;;		_isr
  3021 ;; This function uses a non-reentrant model
  3022 ;;
  3023                           
  3024                           
  3025                           ;psect for function _ADC
  3026  0431                     _ADC:
  3027  0431                     i1l1398:	
  3028                           ;incstack = 0
  3029                           ; Regs used in _ADC: [wreg+status,2+status,0]
  3030                           
  3031                           
  3032                           ;ADC.c: 12:     if(ADCON0bits.CHS == 0){
  3033  0431  1283               	bcf	3,5	;RP0=0, select bank0
  3034  0432  1303               	bcf	3,6	;RP1=0, select bank0
  3035  0433  0C1F               	rrf	31,w	;volatile
  3036  0434  00F0               	movwf	??_ADC
  3037  0435  0C70               	rrf	??_ADC,w
  3038  0436  390F               	andlw	15
  3039  0437  3A00               	xorlw	0
  3040  0438  1D03               	skipz
  3041  0439  2C3B               	goto	u90_21
  3042  043A  2C3C               	goto	u90_20
  3043  043B                     u90_21:
  3044  043B  2C41               	goto	i1l1402
  3045  043C                     u90_20:
  3046  043C                     i1l1400:
  3047                           
  3048                           ;ADC.c: 13:         cont1 = ADRESH;
  3049  043C  081E               	movf	30,w	;volatile
  3050  043D  00F0               	movwf	??_ADC
  3051  043E  0870               	movf	??_ADC,w
  3052  043F  00C3               	movwf	_cont1
  3053                           
  3054                           ;ADC.c: 14:     }
  3055  0440  2C4E               	goto	i1l161
  3056  0441                     i1l1402:
  3057  0441  0C1F               	rrf	31,w	;volatile
  3058  0442  00F0               	movwf	??_ADC
  3059  0443  0C70               	rrf	??_ADC,w
  3060  0444  390F               	andlw	15
  3061  0445  3A01               	xorlw	1
  3062  0446  1D03               	skipz
  3063  0447  2C49               	goto	u91_21
  3064  0448  2C4A               	goto	u91_20
  3065  0449                     u91_21:
  3066  0449  2C4E               	goto	i1l161
  3067  044A                     u91_20:
  3068  044A                     i1l1404:
  3069                           
  3070                           ;ADC.c: 16:         cont2 = ADRESH;
  3071  044A  081E               	movf	30,w	;volatile
  3072  044B  00F0               	movwf	??_ADC
  3073  044C  0870               	movf	??_ADC,w
  3074  044D  00C2               	movwf	_cont2
  3075  044E                     i1l161:
  3076  044E  0008               	return
  3077  044F                     __end_of_ADC:
  3078  007E                     btemp	set	126	;btemp
  3079  007E                     wtemp0	set	126
  3080                           
  3081                           	psect	config
  3082                           
  3083                           ;Config register CONFIG1 @ 0x2007
  3084                           ;	Oscillator Selection bits
  3085                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  3086                           ;	Watchdog Timer Enable bit
  3087                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  3088                           ;	Power-up Timer Enable bit
  3089                           ;	PWRTE = OFF, PWRT disabled
  3090                           ;	RE3/MCLR pin function select bit
  3091                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  3092                           ;	Code Protection bit
  3093                           ;	CP = OFF, Program memory code protection is disabled
  3094                           ;	Data Code Protection bit
  3095                           ;	CPD = OFF, Data memory code protection is disabled
  3096                           ;	Brown Out Reset Selection bits
  3097                           ;	BOREN = OFF, BOR disabled
  3098                           ;	Internal External Switchover bit
  3099                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  3100                           ;	Fail-Safe Clock Monitor Enabled bit
  3101                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  3102                           ;	Low Voltage Programming Enable bit
  3103                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  3104                           ;	In-Circuit Debugger Mode bit
  3105                           ;	DEBUG = 0x1, unprogrammed default
  3106  2007                     	org	8199
  3107  2007  20D4               	dw	8404
  3108                           
  3109                           ;Config register CONFIG2 @ 0x2008
  3110                           ;	Brown-out Reset Selection bit
  3111                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  3112                           ;	Flash Program Memory Self Write Enable bits
  3113                           ;	WRT = OFF, Write protection off
  3114  2008                     	org	8200
  3115  2008  3FFF               	dw	16383

Data Sizes:
    Strings     25
    Constant    10
    Data        0
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     34      58
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_3(CODE[8]), STR_2(CODE[8]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> buffer2(BANK0[10]), buffer1(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Escribir_stringLCD@d	PTR const unsigned char  size(2) Largest target is 17
		 -> buffer2(BANK0[10]), buffer1(BANK0[10]), STR_1(CODE[17]), 

    divisor@dig	PTR unsigned char  size(1) Largest target is 1
		 -> vol2(BANK0[1]), vol1(BANK0[1]), 


Critical Paths under _main in COMMON

    _main->_setup
    _setup->_Limpiar_pantallaLCD
    _Limpiar_pantallaLCD->_Escribir_comandoLCD
    _Iniciar_LCD->_Escribir_comandoLCD
    _set_cursor->_Escribir_comandoLCD
    _Escribir_comandoLCD->_prender_ELCD
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _divisor->___awdiv
    _divisor->___awmod
    _Escribir_stringLCD->_Escribir_datosLCD
    _Escribir_datosLCD->_prender_ELCD

Critical Paths under _isr in COMMON

    _isr->_ADC

Critical Paths under _main in BANK0

    _main->_conversion_char
    _conversion_char->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _divisor->___awdiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    3893
                                             33 BANK0      1     1      0
                 _Escribir_stringLCD
                         _conversion
                    _conversion_char
                         _set_cursor
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                1     1      0      44
                                              7 COMMON     1     1      0
                        _Iniciar_LCD
                _Limpiar_pantallaLCD
 ---------------------------------------------------------------------------------
 (2) _Limpiar_pantallaLCD                                  2     2      0      22
                                              5 COMMON     2     2      0
                _Escribir_comandoLCD
 ---------------------------------------------------------------------------------
 (2) _Iniciar_LCD                                          0     0      0      22
                _Escribir_comandoLCD
 ---------------------------------------------------------------------------------
 (1) _set_cursor                                           2     1      1     338
                                              5 COMMON     2     1      1
                _Escribir_comandoLCD
 ---------------------------------------------------------------------------------
 (3) _Escribir_comandoLCD                                  1     1      0      22
                                              4 COMMON     1     1      0
                       _prender_ELCD
 ---------------------------------------------------------------------------------
 (1) _conversion_char                                      7     7      0    3216
                                             26 BANK0      7     7      0
                            _divisor
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             25    18      7    1680
                                              9 BANK0     17    10      7
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              3 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     421
                                              3 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _divisor                                              8     7      1    1536
                                              4 BANK0      8     7      1
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     613
                                              3 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     452
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _conversion                                           1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Escribir_stringLCD                                   2     0      2     295
                                              5 COMMON     2     0      2
                  _Escribir_datosLCD
 ---------------------------------------------------------------------------------
 (2) _Escribir_datosLCD                                    1     1      0      22
                                              4 COMMON     1     1      0
                       _prender_ELCD
 ---------------------------------------------------------------------------------
 (4) _prender_ELCD                                         1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  2     2      0       0
                                              1 COMMON     2     2      0
                                _ADC
 ---------------------------------------------------------------------------------
 (6) _ADC                                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Escribir_stringLCD
     _Escribir_datosLCD
       _prender_ELCD
   _conversion
   _conversion_char
     _divisor
       ___awdiv
       ___awmod
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _set_cursor
     _Escribir_comandoLCD
       _prender_ELCD
   _setup
     _Iniciar_LCD
       _Escribir_comandoLCD
     _Limpiar_pantallaLCD
       _Escribir_comandoLCD

 _isr (ROOT)
   _ADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      45       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     22      3A       5       72.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      45      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Fri Feb 04 12:01:14 2022

                           pc 0002                            l93 027E                            l85 0388  
                          l79 0287                            l88 01CC                  ___awdiv@sign 0021  
                          fsr 0004                           l110 047E                           l113 04AF  
                         l116 04BB                           l125 040D                           l133 0469  
                         l119 0430                           l128 04A3                           _ADC 0431  
                         l168 03E7                           l435 0171                           l278 0108  
                         l448 0227                           l554 0311                           l564 034D  
                         _RC0 0038                           _RC1 0039                           u500 0110  
                         u501 010F                           u510 011B                           u511 011A  
                         u520 012C                           u521 012B                           u540 013E  
                         u541 013D                           u535 0130                           u560 014F  
                         u561 014E                           u810 0349                           u555 013F  
                         u811 0348                           u580 0163                           u581 0162  
                         u565 014B                           u805 033D                           u590 0168  
                         u591 0167                           u575 0157                           u920 03C2  
                         u760 031A                           u921 03C1                           u761 0319  
                         u930 03CB                           u931 03CA                           u940 03DB  
                         u780 032C                           u941 03DA                           u781 032B  
                         u790 0336                           u950 0455                           u791 0335  
                         u775 031E                           u951 0454                           u960 0462  
                         u961 0461                           u970 040D                           u971 040C  
                         u795 0332                           u990 01D4                           u991 01D3  
                         _dec 0079                           _cen 0078                           _isr 047F  
                         fsr0 0004                           _uni 007A                           indf 0000  
                ___awmod@sign 0021                          ?_ADC 0070                          l1200 015D  
                        l1202 0163                          l1204 0168                          l1300 0413  
                        l1206 016D                          l1310 042A                          l1302 0416  
                        l1160 04A5                          l1304 0418                          l1312 0494  
                        l1154 046A                          l1170 0110                          l1162 04A8  
                        l1306 041E                          l1314 049A                          l1410 0353  
                        l1156 046D                          l1180 0124                          l1172 0115  
                        l1164 04AA                          l1308 0424                          l1420 0367  
                        l1412 035E                          l1158 0474                          l1190 013A  
                        l1182 0126                          l1174 0117                          l1166 0109  
                        l1430 0376                          l1422 0368                          l1414 0364  
                        l1406 034E                          l1192 013E                          l1184 012C  
                        l1176 011B                          l1168 010C                          l1520 01CD  
                        l1280 0324                          l1600 0027                          l1440 0383  
                        l1432 0379                          l1424 036E                          l1416 0365  
                        l1408 0352                          l1450 03D2                          l1442 03BC  
                        l1194 014F                          l1186 012F                          l1178 0120  
                        l1530 01DF                          l1522 01D0                          l1290 0343  
                        l1282 0328                          l1274 0312                          l1610 003A  
                        l1602 002D                          l1434 037C                          l1426 0370  
                        l1418 0366                          l1452 03DB                          l1444 03C2  
                        l1196 0155                          l1188 0136                          l1540 01F8  
                        l1532 01E4                          l1524 01D4                          l1284 032C  
                        l1276 031A                          l1292 0349                          l1620 006B  
                        l1612 0057                          l1604 0034                          l1460 0450  
                        l1436 037D                          l1428 0371                          l1470 03E9  
                        l1446 03CB                          l1198 0156                          l1542 01FC  
                        l1534 01EA                          l1550 0219                          l1526 01D9  
                        l1286 0336                          l1278 031D                          l1622 0070  
                        l1614 005F                          l1606 0039                          l1462 0455  
                        l1438 037E                          l1392 04B1                          l1472 03F7  
                        l1456 03E0                          l1448 03CD                          l1552 021E  
                        l1544 0206                          l1536 01ED                          l1528 01DB  
                        l1560 02D0                          l1288 033C                          l1640 00A9  
                        l1632 008E                          l1616 0063                          l1464 045C  
                        l1296 040E                          l1394 04B4                          l1474 03FD  
                        l1458 03E4                          l1554 0223                          l1546 020C  
                        l1538 01F4                          l1570 02E8                          l1562 02D6  
                        l1642 00AE                          l1634 0098                          l1618 0067  
                        l1650 00F2                          l1466 0462                          l1298 0412  
                        l1396 04B6                          l1468 03E8                          l1548 0213  
                        l1572 02F9                          l1564 02D9                          l1580 030D  
                        l1644 00DE                          l1636 009E                          l1628 0072  
                        l1652 0104                          l1660 0172                          l1574 02FF  
                        l1566 02E0                          l1558 02CC                          l1646 00E5  
                        l1638 00A5                          l1670 02AA                          l1662 027F  
                        l1592 0235                          l1584 022B                          l1576 0300  
                        l1568 02E4                          l1648 00E9                          l1672 02B3  
                        l1664 0284                          l1594 026B                          l1586 0233  
                        l1578 0307                          l1666 0294                          l1596 0271  
                        l1668 029D                          l1694 004C                          l1598 0022  
                        ?_isr 0070                          STR_1 03A3                          STR_2 03B4  
                        STR_3 03B4                          u1000 01DF                          u1001 01DE  
                        u1010 01EA                          u1011 01E9                          u1100 02E8  
                        u1101 02E7                          u1030 01FC                          u1031 01FB  
                        u1040 0206                          u1120 02F9                          u1200 009E  
                        u1041 0205                          u1025 01EE                          u1121 02F8  
                        u1201 009D                          u1210 00F2                          u1115 02E9  
                        u1211 00F1                          u1060 0219                          u1140 030D  
                        u1220 0104                          u1061 0218                          u1045 0202  
                        u1141 030C                          u1125 02F5                          u1221 0103  
                        u1070 021E                          u1150 027E                          u1071 021D  
                        u1055 020D                          u1151 027D                          u1135 0301  
                        u1080 02D6                          u1160 002D                          u1081 02D5  
                        u1161 002C                          u1170 0067                          u1155 027A  
                        u1171 0066                          u1180 008D                          u1181 008C  
                        u1237 0373                          u1190 0098                          u1095 02DA  
                        u1191 0097                          u1247 049E                          u1257 03CF  
                        u1185 0089                          u1267 03E2                          u1277 046F  
                        u1287 0479                          i1l74 048D                 ??_Iniciar_LCD 0075  
                        _main 027F                          _vol1 0059                          _vol2 0058  
                        btemp 007E                          start 000C                         ??_ADC 0070  
                       ??_isr 0071    __end_of_Escribir_stringLCD 040E                         ?_main 0070  
             __end_of___awdiv 0172               __end_of___awmod 0228                         _ANSEL 0188  
             ___awdiv@divisor 0073               __end_of___lwdiv 0312                         i1l161 044E  
             __end_of___lwmod 034E               ___awdiv@counter 0020                         _PORTA 0005  
                       _PORTB 0006                         _PORTD 0008                         _PORTE 0009  
                       _TRISA 0085                         _TRISB 0086                         _TRISD 0088  
                       _TRISE 0089                         u90_20 043C                         u90_21 043B  
                       u91_20 044A                         u91_21 0449                         u98_20 0485  
                       u98_21 0484               __end_of_divisor 027F                         _cont1 0043  
                       _cont2 0042               __end_of_dpowers 03A3                         _setup 034E  
         _Limpiar_pantallaLCD 0494                         pclath 000A             ??_conversion_char 003A  
                       status 0003                         wtemp0 007E               __end_of_sprintf 0109  
             __initialization 000F           __end_of_Iniciar_LCD 0431                  __end_of_main 02CC  
           _Escribir_datosLCD 04B0          ?_Limpiar_pantallaLCD 0070            ?_Escribir_datosLCD 0070  
                      ??_main 0041           ??_Escribir_datosLCD 0074                        _ADRESH 001E  
            ___awdiv@dividend 0075                        ?_setup 0070                        _ANSELH 0189  
                      i1l1400 043C                        i1l1402 0441                        i1l1404 044A  
                      i1l1480 0485                        i1l1482 048A                        i1l1398 0431  
                      i1l1478 047F                        _TRISC0 0438                        _TRISC1 0439  
   __end_of_Escribir_datosLCD 04BC         ??_Limpiar_pantallaLCD 0075                     ??___awdiv 0077  
                   ??___awmod 0077                     ??___lwdiv 0077                     ??___lwmod 0027  
            ___awdiv@quotient 0022               ___awmod@divisor 0073               ___awmod@counter 0020  
                   ??_divisor 0025                        saved_w 007E                     ??_sprintf 0030  
     __end_of__initialization 001B                   _Iniciar_LCD 040E                __pcstackCOMMON 0070  
               __end_of_setup 0389                       ??_setup 0077                    __pbssBANK0 0042  
  __size_of_Escribir_datosLCD 000C                    __pmaintext 027F                    __pintentry 0004  
__size_of_Escribir_comandoLCD 000C      Escribir_datosLCD@LCDchar 0074               _conversion_char 0172  
          _Escribir_stringLCD 03E8                    __stringtab 0389                    _conversion 03BC  
         ?_Escribir_stringLCD 0075                       ___awdiv 0109                       ___awmod 01CD  
                     ___lwdiv 02CC                       ___lwmod 0312                       __ptext1 034E  
                     __ptext2 0494                       __ptext3 040E                       __ptext4 044F  
                     __ptext5 04A4                       __ptext6 0172                       __ptext7 001F  
                     __ptext8 0312                       __ptext9 02CC                       _buffer1 004E  
                     _buffer2 0044                  __size_of_ADC 001E                       _divisor 0228  
        ??_Escribir_stringLCD 0077                       _dpowers 0399                  __size_of_isr 0015  
            ___awmod@dividend 0075                 ?_prender_ELCD 0070                   set_cursor@a 0076  
                 set_cursor@b 0075                       _sprintf 001F                       clrloop0 04BD  
        end_of_initialization 001B                    _set_cursor 044F       __end_of_conversion_char 01CD  
              ??_prender_ELCD 0073                  ?_Iniciar_LCD 0070                   ?_conversion 0070  
 __end_of_Limpiar_pantallaLCD 04A4                    divisor@dig 0024           start_initialization 000F  
                 __end_of_ADC 044F                   __end_of_isr 0494           _Escribir_comandoLCD 04A4  
  Escribir_comandoLCD@Comando 0074                   ?_set_cursor 0075              ?_conversion_char 0070  
        ?_Escribir_comandoLCD 0070           __size_of_conversion 002C                   __pbssCOMMON 0078  
                   ___latbits 0002                 __pcstackBANK0 0020                   sprintf@flag 0034  
                 sprintf@prec 0035          __end_of_prender_ELCD 047F              ___lwdiv@dividend 0075  
                    ?___awdiv 0073                      ?___awmod 0073                      ?___lwdiv 0073  
                    ?___lwmod 0023         ??_Escribir_comandoLCD 0074                     __pstrings 0389  
                    ?_divisor 0024              ___lwdiv@quotient 0021           __size_of_set_cursor 001B  
                    ?_sprintf 0029                __size_of_setup 003B             interrupt_function 0004  
                   clear_ram0 04BC                      _PIE1bits 008C          __size_of_Iniciar_LCD 0023  
                    _PIR1bits 000C                    _ADCON0bits 001F                   __stringbase 0398  
                  _ADCON1bits 009F   __size_of_Escribir_stringLCD 0026                  ??_conversion 0073  
         Escribir_stringLCD@d 0075              __size_of___awdiv 0069              __size_of___awmod 005B  
            __size_of___lwdiv 0046              __size_of___lwmod 003C            __end_of__stringtab 0399  
                  sprintf@val 0036              __size_of_divisor 0057            __end_of_conversion 03E8  
             ___lwdiv@divisor 0073               ___lwdiv@counter 0020                      __ptext10 0228  
                    __ptext11 01CD                      __ptext12 0109                      __ptext13 03BC  
                    __ptext14 03E8                      __ptext15 04B0                      __ptext16 046A  
                    __ptext17 047F                      __ptext18 0431              __size_of_sprintf 00EA  
       __size_of_prender_ELCD 0015                 __size_of_main 004D                  ??_set_cursor 0076  
__size_of_Limpiar_pantallaLCD 0010                      divisor@a 0027                      divisor@b 0028  
                    divisor@i 002A                    _INTCONbits 000B                  _prender_ELCD 046A  
          __end_of_set_cursor 046A                      intlevel1 0000                     sprintf@ap 0033  
                   sprintf@sp 0038              ___lwmod@dividend 0025                     stringcode 0393  
                  _OSCCONbits 008F                      sprintf@c 0039                      sprintf@f 0029  
             ___lwmod@divisor 0023               ___lwmod@counter 0028      __size_of_conversion_char 005B  
                    stringdir 0393                      stringtab 0389   __end_of_Escribir_comandoLCD 04B0  
