

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Fri Feb 04 18:28:22 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    33                           	dabs	1,0x7E,2
    34  0000                     
    35                           ; Version 2.20
    36                           ; Generated 12/02/2020 GMT
    37                           ; 
    38                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC16F887 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     	;# 
    70  0001                     	;# 
    71  0002                     	;# 
    72  0003                     	;# 
    73  0004                     	;# 
    74  0005                     	;# 
    75  0006                     	;# 
    76  0007                     	;# 
    77  0008                     	;# 
    78  0009                     	;# 
    79  000A                     	;# 
    80  000B                     	;# 
    81  000C                     	;# 
    82  000D                     	;# 
    83  000E                     	;# 
    84  000E                     	;# 
    85  000F                     	;# 
    86  0010                     	;# 
    87  0011                     	;# 
    88  0012                     	;# 
    89  0013                     	;# 
    90  0014                     	;# 
    91  0015                     	;# 
    92  0015                     	;# 
    93  0016                     	;# 
    94  0017                     	;# 
    95  0018                     	;# 
    96  0019                     	;# 
    97  001A                     	;# 
    98  001B                     	;# 
    99  001B                     	;# 
   100  001C                     	;# 
   101  001D                     	;# 
   102  001E                     	;# 
   103  001F                     	;# 
   104  0081                     	;# 
   105  0085                     	;# 
   106  0086                     	;# 
   107  0087                     	;# 
   108  0088                     	;# 
   109  0089                     	;# 
   110  008C                     	;# 
   111  008D                     	;# 
   112  008E                     	;# 
   113  008F                     	;# 
   114  0090                     	;# 
   115  0091                     	;# 
   116  0092                     	;# 
   117  0093                     	;# 
   118  0093                     	;# 
   119  0093                     	;# 
   120  0094                     	;# 
   121  0095                     	;# 
   122  0096                     	;# 
   123  0097                     	;# 
   124  0098                     	;# 
   125  0099                     	;# 
   126  009A                     	;# 
   127  009B                     	;# 
   128  009C                     	;# 
   129  009D                     	;# 
   130  009E                     	;# 
   131  009F                     	;# 
   132  0105                     	;# 
   133  0107                     	;# 
   134  0108                     	;# 
   135  0109                     	;# 
   136  010C                     	;# 
   137  010C                     	;# 
   138  010D                     	;# 
   139  010E                     	;# 
   140  010F                     	;# 
   141  0185                     	;# 
   142  0187                     	;# 
   143  0188                     	;# 
   144  0189                     	;# 
   145  018C                     	;# 
   146  018D                     	;# 
   147  0000                     	;# 
   148  0001                     	;# 
   149  0002                     	;# 
   150  0003                     	;# 
   151  0004                     	;# 
   152  0005                     	;# 
   153  0006                     	;# 
   154  0007                     	;# 
   155  0008                     	;# 
   156  0009                     	;# 
   157  000A                     	;# 
   158  000B                     	;# 
   159  000C                     	;# 
   160  000D                     	;# 
   161  000E                     	;# 
   162  000E                     	;# 
   163  000F                     	;# 
   164  0010                     	;# 
   165  0011                     	;# 
   166  0012                     	;# 
   167  0013                     	;# 
   168  0014                     	;# 
   169  0015                     	;# 
   170  0015                     	;# 
   171  0016                     	;# 
   172  0017                     	;# 
   173  0018                     	;# 
   174  0019                     	;# 
   175  001A                     	;# 
   176  001B                     	;# 
   177  001B                     	;# 
   178  001C                     	;# 
   179  001D                     	;# 
   180  001E                     	;# 
   181  001F                     	;# 
   182  0081                     	;# 
   183  0085                     	;# 
   184  0086                     	;# 
   185  0087                     	;# 
   186  0088                     	;# 
   187  0089                     	;# 
   188  008C                     	;# 
   189  008D                     	;# 
   190  008E                     	;# 
   191  008F                     	;# 
   192  0090                     	;# 
   193  0091                     	;# 
   194  0092                     	;# 
   195  0093                     	;# 
   196  0093                     	;# 
   197  0093                     	;# 
   198  0094                     	;# 
   199  0095                     	;# 
   200  0096                     	;# 
   201  0097                     	;# 
   202  0098                     	;# 
   203  0099                     	;# 
   204  009A                     	;# 
   205  009B                     	;# 
   206  009C                     	;# 
   207  009D                     	;# 
   208  009E                     	;# 
   209  009F                     	;# 
   210  0105                     	;# 
   211  0107                     	;# 
   212  0108                     	;# 
   213  0109                     	;# 
   214  010C                     	;# 
   215  010C                     	;# 
   216  010D                     	;# 
   217  010E                     	;# 
   218  010F                     	;# 
   219  0185                     	;# 
   220  0187                     	;# 
   221  0188                     	;# 
   222  0189                     	;# 
   223  018C                     	;# 
   224  018D                     	;# 
   225  0000                     	;# 
   226  0001                     	;# 
   227  0002                     	;# 
   228  0003                     	;# 
   229  0004                     	;# 
   230  0005                     	;# 
   231  0006                     	;# 
   232  0007                     	;# 
   233  0008                     	;# 
   234  0009                     	;# 
   235  000A                     	;# 
   236  000B                     	;# 
   237  000C                     	;# 
   238  000D                     	;# 
   239  000E                     	;# 
   240  000E                     	;# 
   241  000F                     	;# 
   242  0010                     	;# 
   243  0011                     	;# 
   244  0012                     	;# 
   245  0013                     	;# 
   246  0014                     	;# 
   247  0015                     	;# 
   248  0015                     	;# 
   249  0016                     	;# 
   250  0017                     	;# 
   251  0018                     	;# 
   252  0019                     	;# 
   253  001A                     	;# 
   254  001B                     	;# 
   255  001B                     	;# 
   256  001C                     	;# 
   257  001D                     	;# 
   258  001E                     	;# 
   259  001F                     	;# 
   260  0081                     	;# 
   261  0085                     	;# 
   262  0086                     	;# 
   263  0087                     	;# 
   264  0088                     	;# 
   265  0089                     	;# 
   266  008C                     	;# 
   267  008D                     	;# 
   268  008E                     	;# 
   269  008F                     	;# 
   270  0090                     	;# 
   271  0091                     	;# 
   272  0092                     	;# 
   273  0093                     	;# 
   274  0093                     	;# 
   275  0093                     	;# 
   276  0094                     	;# 
   277  0095                     	;# 
   278  0096                     	;# 
   279  0097                     	;# 
   280  0098                     	;# 
   281  0099                     	;# 
   282  009A                     	;# 
   283  009B                     	;# 
   284  009C                     	;# 
   285  009D                     	;# 
   286  009E                     	;# 
   287  009F                     	;# 
   288  0105                     	;# 
   289  0107                     	;# 
   290  0108                     	;# 
   291  0109                     	;# 
   292  010C                     	;# 
   293  010C                     	;# 
   294  010D                     	;# 
   295  010E                     	;# 
   296  010F                     	;# 
   297  0185                     	;# 
   298  0187                     	;# 
   299  0188                     	;# 
   300  0189                     	;# 
   301  018C                     	;# 
   302  018D                     	;# 
   303  0000                     	;# 
   304  0001                     	;# 
   305  0002                     	;# 
   306  0003                     	;# 
   307  0004                     	;# 
   308  0005                     	;# 
   309  0006                     	;# 
   310  0007                     	;# 
   311  0008                     	;# 
   312  0009                     	;# 
   313  000A                     	;# 
   314  000B                     	;# 
   315  000C                     	;# 
   316  000D                     	;# 
   317  000E                     	;# 
   318  000E                     	;# 
   319  000F                     	;# 
   320  0010                     	;# 
   321  0011                     	;# 
   322  0012                     	;# 
   323  0013                     	;# 
   324  0014                     	;# 
   325  0015                     	;# 
   326  0015                     	;# 
   327  0016                     	;# 
   328  0017                     	;# 
   329  0018                     	;# 
   330  0019                     	;# 
   331  001A                     	;# 
   332  001B                     	;# 
   333  001B                     	;# 
   334  001C                     	;# 
   335  001D                     	;# 
   336  001E                     	;# 
   337  001F                     	;# 
   338  0081                     	;# 
   339  0085                     	;# 
   340  0086                     	;# 
   341  0087                     	;# 
   342  0088                     	;# 
   343  0089                     	;# 
   344  008C                     	;# 
   345  008D                     	;# 
   346  008E                     	;# 
   347  008F                     	;# 
   348  0090                     	;# 
   349  0091                     	;# 
   350  0092                     	;# 
   351  0093                     	;# 
   352  0093                     	;# 
   353  0093                     	;# 
   354  0094                     	;# 
   355  0095                     	;# 
   356  0096                     	;# 
   357  0097                     	;# 
   358  0098                     	;# 
   359  0099                     	;# 
   360  009A                     	;# 
   361  009B                     	;# 
   362  009C                     	;# 
   363  009D                     	;# 
   364  009E                     	;# 
   365  009F                     	;# 
   366  0105                     	;# 
   367  0107                     	;# 
   368  0108                     	;# 
   369  0109                     	;# 
   370  010C                     	;# 
   371  010C                     	;# 
   372  010D                     	;# 
   373  010E                     	;# 
   374  010F                     	;# 
   375  0185                     	;# 
   376  0187                     	;# 
   377  0188                     	;# 
   378  0189                     	;# 
   379  018C                     	;# 
   380  018D                     	;# 
   381                           
   382                           	psect	strings
   383  03CA                     __pstrings:
   384  03CA                     stringtab:
   385  03CA                     __stringtab:
   386                           
   387                           ;	String table - string pointers are 1 byte each
   388  03CA  1BFF               	btfsc	btemp+1,7
   389  03CB  2BD4               	ljmp	stringcode
   390  03CC  1383               	bcf	3,7
   391  03CD  187F               	btfsc	btemp+1,0
   392  03CE  1783               	bsf	3,7
   393  03CF  0800               	movf	0,w
   394  03D0  0A84               	incf	4,f
   395  03D1  1903               	skipnz
   396  03D2  0AFF               	incf	btemp+1,f
   397  03D3  0008               	return
   398  03D4                     stringcode:
   399  03D4                     stringdir:
   400  03D4  3003               	movlw	high stringdir
   401  03D5  008A               	movwf	10
   402  03D6  0804               	movf	4,w
   403  03D7  0A84               	incf	4,f
   404  03D8  0782               	addwf	2,f
   405  03D9                     __stringbase:
   406  03D9  3400               	retlw	0
   407  03DA                     __end_of__stringtab:
   408  03DA                     _dpowers:
   409  03DA  3401               	retlw	1
   410  03DB  3400               	retlw	0
   411  03DC  340A               	retlw	10
   412  03DD  3400               	retlw	0
   413  03DE  3464               	retlw	100
   414  03DF  3400               	retlw	0
   415  03E0  34E8               	retlw	232
   416  03E1  3403               	retlw	3
   417  03E2  3410               	retlw	16
   418  03E3  3427               	retlw	39
   419  03E4                     __end_of_dpowers:
   420  001E                     _ADRESH	set	30
   421  0008                     _PORTD	set	8
   422  0018                     _RCSTAbits	set	24
   423  000B                     _INTCONbits	set	11
   424  0006                     _PORTB	set	6
   425  0009                     _PORTE	set	9
   426  0005                     _PORTA	set	5
   427  001F                     _ADCON0bits	set	31
   428  001A                     _RCREG	set	26
   429  000C                     _PIR1bits	set	12
   430  0038                     _RC0	set	56
   431  0039                     _RC1	set	57
   432  0088                     _TRISD	set	136
   433  009A                     _SPBRGH	set	154
   434  0099                     _SPBRG	set	153
   435  0098                     _TXSTAbits	set	152
   436  008C                     _PIE1bits	set	140
   437  009F                     _ADCON1bits	set	159
   438  008F                     _OSCCONbits	set	143
   439  0089                     _TRISE	set	137
   440  0086                     _TRISB	set	134
   441  0085                     _TRISA	set	133
   442  0438                     _TRISC0	set	1080
   443  0439                     _TRISC1	set	1081
   444  0187                     _BAUDCTLbits	set	391
   445  0189                     _ANSELH	set	393
   446  0188                     _ANSEL	set	392
   447  03E4                     STR_1:
   448  03E4  3453               	retlw	83	;'S'
   449  03E5  3431               	retlw	49	;'1'
   450  03E6  343A               	retlw	58	;':'
   451  03E7  3420               	retlw	32	;' '
   452  03E8  3420               	retlw	32	;' '
   453  03E9  3420               	retlw	32	;' '
   454  03EA  3420               	retlw	32	;' '
   455  03EB  3453               	retlw	83	;'S'
   456  03EC  3432               	retlw	50	;'2'
   457  03ED  343A               	retlw	58	;':'
   458  03EE  3420               	retlw	32	;' '
   459  03EF  3420               	retlw	32	;' '
   460  03F0  3420               	retlw	32	;' '
   461  03F1  3453               	retlw	83	;'S'
   462  03F2  3433               	retlw	51	;'3'
   463  03F3  343A               	retlw	58	;':'
   464  03F4  3400               	retlw	0
   465  03F5                     STR_2:
   466  03F5  3425               	retlw	37	;'%'
   467  03F6  3464               	retlw	100	;'d'
   468  03F7  342E               	retlw	46	;'.'
   469  03F8  3425               	retlw	37	;'%'
   470  03F9  3464               	retlw	100	;'d'
   471  03FA  3425               	retlw	37	;'%'
   472  03FB  3464               	retlw	100	;'d'
   473  03FC  3400               	retlw	0
   474  03FA                     
   475                           	psect	cinit
   476  000F                     start_initialization:	
   477                           ; #config settings
   478                           
   479  000F                     __initialization:
   480                           
   481                           ; Clear objects allocated to COMMON
   482  000F  01F6               	clrf	__pbssCOMMON& (0+127)
   483  0010  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   484  0011  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   485  0012  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   486                           
   487                           ; Clear objects allocated to BANK0
   488  0013  1383               	bcf	3,7	;select IRP bank0
   489  0014  3045               	movlw	low __pbssBANK0
   490  0015  0084               	movwf	4
   491  0016  3069               	movlw	low (__pbssBANK0+36)
   492  0017  120A  118A  2533  120A  118A  	fcall	clear_ram0
   493  001C                     end_of_initialization:	
   494                           ;End of C runtime variable initialization code
   495                           
   496  001C                     __end_of__initialization:
   497  001C  0183               	clrf	3
   498  001D  120A  118A  290A   	ljmp	_main	;jump to C main() function
   499                           
   500                           	psect	bssCOMMON
   501  0076                     __pbssCOMMON:
   502  0076                     _dato:
   503  0076                     	ds	1
   504  0077                     _cen:
   505  0077                     	ds	1
   506  0078                     _dec:
   507  0078                     	ds	1
   508  0079                     _uni:
   509  0079                     	ds	1
   510                           
   511                           	psect	bssBANK0
   512  0045                     __pbssBANK0:
   513  0045                     _Cont_U:
   514  0045                     	ds	1
   515  0046                     _vol3:
   516  0046                     	ds	1
   517  0047                     _cont2:
   518  0047                     	ds	1
   519  0048                     _cont1:
   520  0048                     	ds	1
   521  0049                     _buffer3:
   522  0049                     	ds	10
   523  0053                     _buffer2:
   524  0053                     	ds	10
   525  005D                     _buffer1:
   526  005D                     	ds	10
   527  0067                     _vol2:
   528  0067                     	ds	1
   529  0068                     _vol1:
   530  0068                     	ds	1
   531                           
   532                           	psect	clrtext
   533  0533                     clear_ram0:	
   534                           ;	Called with FSR containing the base address, and
   535                           ;	W with the last address+1
   536                           
   537  0533  0064               	clrwdt	;clear the watchdog before getting into this loop
   538  0534                     clrloop0:
   539  0534  0180               	clrf	0	;clear RAM location pointed to by FSR
   540  0535  0A84               	incf	4,f	;increment pointer
   541  0536  0604               	xorwf	4,w	;XOR with final address
   542  0537  1903               	btfsc	3,2	;have we reached the end yet?
   543  0538  3400               	retlw	0	;all done for this memory range, return
   544  0539  0604               	xorwf	4,w	;XOR again to restore value
   545  053A  2D34               	goto	clrloop0	;do the next byte
   546                           
   547                           	psect	cstackCOMMON
   548  0070                     __pcstackCOMMON:
   549  0070                     ?_ADC:
   550  0070                     ??_ADC:	
   551                           ; 1 bytes @ 0x0
   552                           
   553  0070                     ?_setup:	
   554                           ; 1 bytes @ 0x0
   555                           
   556  0070                     ?_conversion:	
   557                           ; 1 bytes @ 0x0
   558                           
   559  0070                     ?_conversion_char:	
   560                           ; 1 bytes @ 0x0
   561                           
   562  0070                     ?_dato_recibido:	
   563                           ; 1 bytes @ 0x0
   564                           
   565  0070                     ?_Iniciar_LCD:	
   566                           ; 1 bytes @ 0x0
   567                           
   568  0070                     ?_Limpiar_pantallaLCD:	
   569                           ; 1 bytes @ 0x0
   570                           
   571  0070                     ?_isr:	
   572                           ; 1 bytes @ 0x0
   573                           
   574  0070                     ?_main:	
   575                           ; 1 bytes @ 0x0
   576                           
   577  0070                     ?_prender_ELCD:	
   578                           ; 1 bytes @ 0x0
   579                           
   580  0070                     ?_Escribir_comandoLCD:	
   581                           ; 1 bytes @ 0x0
   582                           
   583  0070                     ?_Escribir_datosLCD:	
   584                           ; 1 bytes @ 0x0
   585                           
   586                           
   587                           ; 1 bytes @ 0x0
   588  0070                     	ds	1
   589  0071                     ??_isr:
   590                           
   591                           ; 1 bytes @ 0x1
   592  0071                     	ds	3
   593  0074                     ??_conversion:
   594  0074                     ??_prender_ELCD:	
   595                           ; 1 bytes @ 0x4
   596                           
   597  0074                     ??___awdiv:	
   598                           ; 1 bytes @ 0x4
   599                           
   600  0074                     ??___awmod:	
   601                           ; 1 bytes @ 0x4
   602                           
   603  0074                     ??___lwdiv:	
   604                           ; 1 bytes @ 0x4
   605                           
   606                           
   607                           ; 1 bytes @ 0x4
   608  0074                     	ds	1
   609  0075                     ?_divisor:
   610  0075                     ??_Escribir_comandoLCD:	
   611                           ; 1 bytes @ 0x5
   612                           
   613  0075                     ??_Escribir_datosLCD:	
   614                           ; 1 bytes @ 0x5
   615                           
   616  0075                     ??___lwmod:	
   617                           ; 1 bytes @ 0x5
   618                           
   619  0075                     divisor@dig:	
   620                           ; 1 bytes @ 0x5
   621                           
   622  0075                     Escribir_comandoLCD@Comando:	
   623                           ; 1 bytes @ 0x5
   624                           
   625  0075                     Escribir_datosLCD@LCDchar:	
   626                           ; 1 bytes @ 0x5
   627                           
   628                           
   629                           ; 1 bytes @ 0x5
   630  0075                     	ds	1
   631  0076                     ??_set_cursor:
   632  0076                     ??_Escribir_stringLCD:	
   633                           ; 1 bytes @ 0x6
   634                           
   635  0076                     ??_Iniciar_LCD:	
   636                           ; 1 bytes @ 0x6
   637                           
   638                           
   639                           	psect	cstackBANK0
   640  0020                     __pcstackBANK0:	
   641                           ; 1 bytes @ 0x6
   642                           
   643  0020                     ?_set_cursor:
   644  0020                     ?_Escribir_stringLCD:	
   645                           ; 1 bytes @ 0x0
   646                           
   647  0020                     ??_Limpiar_pantallaLCD:	
   648                           ; 1 bytes @ 0x0
   649                           
   650  0020                     ?___awdiv:	
   651                           ; 1 bytes @ 0x0
   652                           
   653  0020                     ?___awmod:	
   654                           ; 2 bytes @ 0x0
   655                           
   656  0020                     ?___lwdiv:	
   657                           ; 2 bytes @ 0x0
   658                           
   659  0020                     set_cursor@b:	
   660                           ; 2 bytes @ 0x0
   661                           
   662  0020                     Escribir_stringLCD@d:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0020                     ___awdiv@divisor:	
   666                           ; 2 bytes @ 0x0
   667                           
   668  0020                     ___awmod@divisor:	
   669                           ; 2 bytes @ 0x0
   670                           
   671  0020                     ___lwdiv@divisor:	
   672                           ; 2 bytes @ 0x0
   673                           
   674                           
   675                           ; 2 bytes @ 0x0
   676  0020                     	ds	1
   677  0021                     set_cursor@a:
   678                           
   679                           ; 1 bytes @ 0x1
   680  0021                     	ds	1
   681  0022                     ??_setup:
   682  0022                     ___awdiv@dividend:	
   683                           ; 1 bytes @ 0x2
   684                           
   685  0022                     ___awmod@dividend:	
   686                           ; 2 bytes @ 0x2
   687                           
   688  0022                     ___lwdiv@dividend:	
   689                           ; 2 bytes @ 0x2
   690                           
   691                           
   692                           ; 2 bytes @ 0x2
   693  0022                     	ds	2
   694  0024                     ___awdiv@counter:
   695  0024                     ___awmod@counter:	
   696                           ; 1 bytes @ 0x4
   697                           
   698  0024                     ___lwdiv@counter:	
   699                           ; 1 bytes @ 0x4
   700                           
   701                           
   702                           ; 1 bytes @ 0x4
   703  0024                     	ds	1
   704  0025                     ___awdiv@sign:
   705  0025                     ___awmod@sign:	
   706                           ; 1 bytes @ 0x5
   707                           
   708  0025                     ___lwdiv@quotient:	
   709                           ; 1 bytes @ 0x5
   710                           
   711                           
   712                           ; 2 bytes @ 0x5
   713  0025                     	ds	1
   714  0026                     ___awdiv@quotient:
   715                           
   716                           ; 2 bytes @ 0x6
   717  0026                     	ds	1
   718  0027                     ?___lwmod:
   719  0027                     ___lwmod@divisor:	
   720                           ; 2 bytes @ 0x7
   721                           
   722                           
   723                           ; 2 bytes @ 0x7
   724  0027                     	ds	1
   725  0028                     ??_divisor:
   726                           
   727                           ; 1 bytes @ 0x8
   728  0028                     	ds	1
   729  0029                     ___lwmod@dividend:
   730                           
   731                           ; 2 bytes @ 0x9
   732  0029                     	ds	1
   733  002A                     divisor@a:
   734                           
   735                           ; 1 bytes @ 0xA
   736  002A                     	ds	1
   737  002B                     ___lwmod@counter:
   738  002B                     divisor@b:	
   739                           ; 1 bytes @ 0xB
   740                           
   741                           
   742                           ; 2 bytes @ 0xB
   743  002B                     	ds	1
   744  002C                     ?_sprintf:
   745  002C                     sprintf@f:	
   746                           ; 2 bytes @ 0xC
   747                           
   748                           
   749                           ; 1 bytes @ 0xC
   750  002C                     	ds	1
   751  002D                     divisor@i:
   752                           
   753                           ; 2 bytes @ 0xD
   754  002D                     	ds	6
   755  0033                     ??_sprintf:
   756                           
   757                           ; 1 bytes @ 0x13
   758  0033                     	ds	3
   759  0036                     sprintf@ap:
   760                           
   761                           ; 1 bytes @ 0x16
   762  0036                     	ds	1
   763  0037                     sprintf@flag:
   764                           
   765                           ; 1 bytes @ 0x17
   766  0037                     	ds	1
   767  0038                     sprintf@prec:
   768                           
   769                           ; 1 bytes @ 0x18
   770  0038                     	ds	1
   771  0039                     sprintf@val:
   772                           
   773                           ; 2 bytes @ 0x19
   774  0039                     	ds	2
   775  003B                     sprintf@sp:
   776                           
   777                           ; 1 bytes @ 0x1B
   778  003B                     	ds	1
   779  003C                     sprintf@c:
   780                           
   781                           ; 1 bytes @ 0x1C
   782  003C                     	ds	1
   783  003D                     ??_conversion_char:
   784  003D                     ??_dato_recibido:	
   785                           ; 1 bytes @ 0x1D
   786                           
   787                           
   788                           ; 1 bytes @ 0x1D
   789  003D                     	ds	7
   790  0044                     ??_main:
   791                           
   792                           ; 1 bytes @ 0x24
   793  0044                     	ds	1
   794                           
   795                           	psect	maintext
   796  010A                     __pmaintext:	
   797 ;;
   798 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   799 ;;
   800 ;; *************** function _main *****************
   801 ;; Defined at:
   802 ;;		line 84 in file "LAB2.c"
   803 ;; Parameters:    Size  Location     Type
   804 ;;		None
   805 ;; Auto vars:     Size  Location     Type
   806 ;;		None
   807 ;; Return value:  Size  Location     Type
   808 ;;                  1    wreg      void 
   809 ;; Registers used:
   810 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   811 ;; Tracked objects:
   812 ;;		On entry : B00/0
   813 ;;		On exit  : 0/0
   814 ;;		Unchanged: 0/0
   815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   816 ;;      Params:         0       0       0       0       0
   817 ;;      Locals:         0       0       0       0       0
   818 ;;      Temps:          0       1       0       0       0
   819 ;;      Totals:         0       1       0       0       0
   820 ;;Total ram usage:        1 bytes
   821 ;; Hardware stack levels required when called: 6
   822 ;; This function calls:
   823 ;;		_Escribir_stringLCD
   824 ;;		_conversion
   825 ;;		_conversion_char
   826 ;;		_dato_recibido
   827 ;;		_set_cursor
   828 ;;		_setup
   829 ;; This function is called by:
   830 ;;		Startup code after reset
   831 ;; This function uses a non-reentrant model
   832 ;;
   833                           
   834                           
   835                           ;psect for function _main
   836  010A                     _main:
   837  010A                     l1924:	
   838                           ;incstack = 0
   839                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   840                           
   841                           
   842                           ;LAB2.c: 85:     setup();
   843  010A  120A  118A  22F3  120A  118A  	fcall	_setup
   844  010F                     l1926:
   845                           
   846                           ;LAB2.c: 86:     ADCON0bits.GO = 1;
   847  010F  1283               	bcf	3,5	;RP0=0, select bank0
   848  0110  1303               	bcf	3,6	;RP1=0, select bank0
   849  0111  149F               	bsf	31,1	;volatile
   850  0112                     l104:	
   851                           ;LAB2.c: 87:     while(1){
   852                           
   853                           
   854                           ;LAB2.c: 89:         conversion();
   855  0112  120A  118A  242C  120A  118A  	fcall	_conversion
   856                           
   857                           ;LAB2.c: 92:         set_cursor(1,1);
   858  0117  1283               	bcf	3,5	;RP0=0, select bank0
   859  0118  1303               	bcf	3,6	;RP1=0, select bank0
   860  0119  01A0               	clrf	set_cursor@b
   861  011A  0AA0               	incf	set_cursor@b,f
   862  011B  3001               	movlw	1
   863  011C  120A  118A  24A3  120A  118A  	fcall	_set_cursor
   864  0121                     l1928:
   865                           
   866                           ;LAB2.c: 93:         Escribir_stringLCD("S1:    S2:   S3:");
   867  0121  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   868  0122  1283               	bcf	3,5	;RP0=0, select bank0
   869  0123  1303               	bcf	3,6	;RP1=0, select bank0
   870  0124  00A0               	movwf	Escribir_stringLCD@d
   871  0125  3080               	movlw	128
   872  0126  00A1               	movwf	Escribir_stringLCD@d+1
   873  0127  120A  118A  2458  120A  118A  	fcall	_Escribir_stringLCD
   874  012C                     l1930:
   875                           
   876                           ;LAB2.c: 95:         conversion_char();
   877  012C  120A  118A  21E6  120A  118A  	fcall	_conversion_char
   878                           
   879                           ;LAB2.c: 97:         set_cursor(2,1);
   880  0131  1283               	bcf	3,5	;RP0=0, select bank0
   881  0132  1303               	bcf	3,6	;RP1=0, select bank0
   882  0133  01A0               	clrf	set_cursor@b
   883  0134  0AA0               	incf	set_cursor@b,f
   884  0135  3002               	movlw	2
   885  0136  120A  118A  24A3  120A  118A  	fcall	_set_cursor
   886  013B                     l1932:
   887                           
   888                           ;LAB2.c: 98:         Escribir_stringLCD(buffer1);
   889  013B  305D               	movlw	(low (_buffer1| 0))& (0+255)
   890  013C  1283               	bcf	3,5	;RP0=0, select bank0
   891  013D  1303               	bcf	3,6	;RP1=0, select bank0
   892  013E  00A0               	movwf	Escribir_stringLCD@d
   893  013F  3000               	movlw	0
   894  0140  00A1               	movwf	Escribir_stringLCD@d+1
   895  0141  120A  118A  2458  120A  118A  	fcall	_Escribir_stringLCD
   896  0146                     l1934:
   897                           
   898                           ;LAB2.c: 99:         set_cursor(2,7);
   899  0146  3007               	movlw	7
   900  0147  1283               	bcf	3,5	;RP0=0, select bank0
   901  0148  1303               	bcf	3,6	;RP1=0, select bank0
   902  0149  00C4               	movwf	??_main
   903  014A  0844               	movf	??_main,w
   904  014B  00A0               	movwf	set_cursor@b
   905  014C  3002               	movlw	2
   906  014D  120A  118A  24A3  120A  118A  	fcall	_set_cursor
   907                           
   908                           ;LAB2.c: 100:         Escribir_stringLCD(buffer2);
   909  0152  3053               	movlw	(low (_buffer2| 0))& (0+255)
   910  0153  1283               	bcf	3,5	;RP0=0, select bank0
   911  0154  1303               	bcf	3,6	;RP1=0, select bank0
   912  0155  00A0               	movwf	Escribir_stringLCD@d
   913  0156  3000               	movlw	0
   914  0157  00A1               	movwf	Escribir_stringLCD@d+1
   915  0158  120A  118A  2458  120A  118A  	fcall	_Escribir_stringLCD
   916                           
   917                           ;LAB2.c: 103:         dato_recibido();
   918  015D  120A  118A  24F5  120A  118A  	fcall	_dato_recibido
   919  0162                     l1936:
   920                           
   921                           ;LAB2.c: 105:         set_cursor(2,14);
   922  0162  300E               	movlw	14
   923  0163  1283               	bcf	3,5	;RP0=0, select bank0
   924  0164  1303               	bcf	3,6	;RP1=0, select bank0
   925  0165  00C4               	movwf	??_main
   926  0166  0844               	movf	??_main,w
   927  0167  00A0               	movwf	set_cursor@b
   928  0168  3002               	movlw	2
   929  0169  120A  118A  24A3  120A  118A  	fcall	_set_cursor
   930  016E                     l1938:
   931                           
   932                           ;LAB2.c: 106:         Escribir_stringLCD(buffer3);
   933  016E  3049               	movlw	(low (_buffer3| 0))& (0+255)
   934  016F  1283               	bcf	3,5	;RP0=0, select bank0
   935  0170  1303               	bcf	3,6	;RP1=0, select bank0
   936  0171  00A0               	movwf	Escribir_stringLCD@d
   937  0172  3000               	movlw	0
   938  0173  00A1               	movwf	Escribir_stringLCD@d+1
   939  0174  120A  118A  2458  120A  118A  	fcall	_Escribir_stringLCD
   940  0179  2912               	goto	l104
   941  017A  120A  118A  280C   	ljmp	start
   942  017D                     __end_of_main:
   943                           
   944                           	psect	text1
   945  02F3                     __ptext1:	
   946 ;; *************** function _setup *****************
   947 ;; Defined at:
   948 ;;		line 111 in file "LAB2.c"
   949 ;; Parameters:    Size  Location     Type
   950 ;;		None
   951 ;; Auto vars:     Size  Location     Type
   952 ;;		None
   953 ;; Return value:  Size  Location     Type
   954 ;;                  1    wreg      void 
   955 ;; Registers used:
   956 ;;		wreg, status,2, status,0, pclath, cstack
   957 ;; Tracked objects:
   958 ;;		On entry : 0/0
   959 ;;		On exit  : 0/0
   960 ;;		Unchanged: 0/0
   961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   962 ;;      Params:         0       0       0       0       0
   963 ;;      Locals:         0       0       0       0       0
   964 ;;      Temps:          0       1       0       0       0
   965 ;;      Totals:         0       1       0       0       0
   966 ;;Total ram usage:        1 bytes
   967 ;; Hardware stack levels used: 1
   968 ;; Hardware stack levels required when called: 5
   969 ;; This function calls:
   970 ;;		_Iniciar_LCD
   971 ;;		_Limpiar_pantallaLCD
   972 ;; This function is called by:
   973 ;;		_main
   974 ;; This function uses a non-reentrant model
   975 ;;
   976                           
   977                           
   978                           ;psect for function _setup
   979  02F3                     _setup:
   980  02F3                     l1846:	
   981                           ;incstack = 0
   982                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   983                           
   984                           
   985                           ;LAB2.c: 114:     ANSEL = 0b0011;
   986  02F3  3003               	movlw	3
   987  02F4  1683               	bsf	3,5	;RP0=1, select bank3
   988  02F5  1703               	bsf	3,6	;RP1=1, select bank3
   989  02F6  0088               	movwf	8	;volatile
   990  02F7                     l1848:
   991                           
   992                           ;LAB2.c: 115:     ANSELH = 0;
   993  02F7  0189               	clrf	9	;volatile
   994  02F8                     l1850:
   995                           
   996                           ;LAB2.c: 117:     TRISA = 0b0011;
   997  02F8  3003               	movlw	3
   998  02F9  1683               	bsf	3,5	;RP0=1, select bank1
   999  02FA  1303               	bcf	3,6	;RP1=0, select bank1
  1000  02FB  0085               	movwf	5	;volatile
  1001                           
  1002                           ;LAB2.c: 118:     TRISB = 0;
  1003  02FC  0186               	clrf	6	;volatile
  1004                           
  1005                           ;LAB2.c: 119:     TRISE = 0;
  1006  02FD  0189               	clrf	9	;volatile
  1007                           
  1008                           ;LAB2.c: 121:     PORTA = 0;
  1009  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  1010  02FF  1303               	bcf	3,6	;RP1=0, select bank0
  1011  0300  0185               	clrf	5	;volatile
  1012                           
  1013                           ;LAB2.c: 122:     PORTE = 0;
  1014  0301  0189               	clrf	9	;volatile
  1015                           
  1016                           ;LAB2.c: 123:     PORTB = 0;
  1017  0302  0186               	clrf	6	;volatile
  1018  0303                     l1852:
  1019                           
  1020                           ;LAB2.c: 126:     OSCCONbits.IRCF = 0b0110;
  1021  0303  1683               	bsf	3,5	;RP0=1, select bank1
  1022  0304  1303               	bcf	3,6	;RP1=0, select bank1
  1023  0305  080F               	movf	15,w	;volatile
  1024  0306  398F               	andlw	-113
  1025  0307  3860               	iorlw	96
  1026  0308  008F               	movwf	15	;volatile
  1027  0309                     l1854:
  1028                           
  1029                           ;LAB2.c: 127:     OSCCONbits.SCS = 1;
  1030  0309  140F               	bsf	15,0	;volatile
  1031  030A                     l1856:
  1032                           
  1033                           ;LAB2.c: 130:     ADCON1bits.ADFM = 0;
  1034  030A  139F               	bcf	31,7	;volatile
  1035  030B                     l1858:
  1036                           
  1037                           ;LAB2.c: 131:     ADCON1bits.VCFG0 = 0;
  1038  030B  121F               	bcf	31,4	;volatile
  1039  030C                     l1860:
  1040                           
  1041                           ;LAB2.c: 132:     ADCON1bits.VCFG1 = 0;
  1042  030C  129F               	bcf	31,5	;volatile
  1043  030D                     l1862:
  1044                           
  1045                           ;LAB2.c: 134:     ADCON0bits.ADCS = 0b01;
  1046  030D  1283               	bcf	3,5	;RP0=0, select bank0
  1047  030E  1303               	bcf	3,6	;RP1=0, select bank0
  1048  030F  081F               	movf	31,w	;volatile
  1049  0310  393F               	andlw	-193
  1050  0311  3840               	iorlw	64
  1051  0312  009F               	movwf	31	;volatile
  1052  0313                     l1864:
  1053                           
  1054                           ;LAB2.c: 135:     ADCON0bits.CHS = 0;
  1055  0313  30C3               	movlw	-61
  1056  0314  059F               	andwf	31,f	;volatile
  1057  0315                     l1866:
  1058                           
  1059                           ;LAB2.c: 136:     ADCON0bits.ADON = 1;
  1060  0315  141F               	bsf	31,0	;volatile
  1061  0316                     l1868:
  1062                           
  1063                           ;LAB2.c: 137:     _delay((unsigned long)((50)*(4000000/4000000.0)));
  1064  0316  300F               	movlw	15
  1065  0317  1283               	bcf	3,5	;RP0=0, select bank0
  1066  0318  1303               	bcf	3,6	;RP1=0, select bank0
  1067  0319  00A2               	movwf	??_setup
  1068  031A                     u1427:
  1069  031A  0BA2               	decfsz	??_setup,f
  1070  031B  2B1A               	goto	u1427
  1071  031C  2B1D               	nop2
  1072  031D                     l1870:
  1073                           
  1074                           ;LAB2.c: 140:     PIR1bits.ADIF = 0;
  1075  031D  1283               	bcf	3,5	;RP0=0, select bank0
  1076  031E  1303               	bcf	3,6	;RP1=0, select bank0
  1077  031F  130C               	bcf	12,6	;volatile
  1078  0320                     l1872:
  1079                           
  1080                           ;LAB2.c: 141:     PIE1bits.ADIE = 1;
  1081  0320  1683               	bsf	3,5	;RP0=1, select bank1
  1082  0321  1303               	bcf	3,6	;RP1=0, select bank1
  1083  0322  170C               	bsf	12,6	;volatile
  1084  0323                     l1874:
  1085                           
  1086                           ;LAB2.c: 142:     PIR1bits.RCIF = 0;
  1087  0323  1283               	bcf	3,5	;RP0=0, select bank0
  1088  0324  1303               	bcf	3,6	;RP1=0, select bank0
  1089  0325  128C               	bcf	12,5	;volatile
  1090  0326                     l1876:
  1091                           
  1092                           ;LAB2.c: 143:     PIE1bits.RCIE = 1;
  1093  0326  1683               	bsf	3,5	;RP0=1, select bank1
  1094  0327  1303               	bcf	3,6	;RP1=0, select bank1
  1095  0328  168C               	bsf	12,5	;volatile
  1096  0329                     l1878:
  1097                           
  1098                           ;LAB2.c: 144:     INTCONbits.PEIE = 1;
  1099  0329  170B               	bsf	11,6	;volatile
  1100  032A                     l1880:
  1101                           
  1102                           ;LAB2.c: 145:     INTCONbits.GIE = 1;
  1103  032A  178B               	bsf	11,7	;volatile
  1104  032B                     l1882:
  1105                           
  1106                           ;LAB2.c: 148:     TXSTAbits.SYNC = 0;
  1107  032B  1218               	bcf	24,4	;volatile
  1108  032C                     l1884:
  1109                           
  1110                           ;LAB2.c: 149:     TXSTAbits.BRGH = 1;
  1111  032C  1518               	bsf	24,2	;volatile
  1112  032D                     l1886:
  1113                           
  1114                           ;LAB2.c: 151:     BAUDCTLbits.BRG16 = 0;
  1115  032D  1683               	bsf	3,5	;RP0=1, select bank3
  1116  032E  1703               	bsf	3,6	;RP1=1, select bank3
  1117  032F  1187               	bcf	7,3	;volatile
  1118  0330                     l1888:
  1119                           
  1120                           ;LAB2.c: 153:     SPBRG = 23;
  1121  0330  3017               	movlw	23
  1122  0331  1683               	bsf	3,5	;RP0=1, select bank1
  1123  0332  1303               	bcf	3,6	;RP1=0, select bank1
  1124  0333  0099               	movwf	25	;volatile
  1125  0334                     l1890:
  1126                           
  1127                           ;LAB2.c: 154:     SPBRGH = 0;
  1128  0334  019A               	clrf	26	;volatile
  1129  0335                     l1892:
  1130                           
  1131                           ;LAB2.c: 156:     RCSTAbits.SPEN = 1;
  1132  0335  1283               	bcf	3,5	;RP0=0, select bank0
  1133  0336  1303               	bcf	3,6	;RP1=0, select bank0
  1134  0337  1798               	bsf	24,7	;volatile
  1135  0338                     l1894:
  1136                           
  1137                           ;LAB2.c: 157:     RCSTAbits.RX9 = 0;
  1138  0338  1318               	bcf	24,6	;volatile
  1139  0339                     l1896:
  1140                           
  1141                           ;LAB2.c: 158:     RCSTAbits.CREN = 1;
  1142  0339  1618               	bsf	24,4	;volatile
  1143  033A                     l1898:
  1144                           
  1145                           ;LAB2.c: 160:     TXSTAbits.TXEN = 1;
  1146  033A  1683               	bsf	3,5	;RP0=1, select bank1
  1147  033B  1303               	bcf	3,6	;RP1=0, select bank1
  1148  033C  1698               	bsf	24,5	;volatile
  1149  033D                     l1900:
  1150                           
  1151                           ;LAB2.c: 163:     Iniciar_LCD();
  1152  033D  120A  118A  2480  120A  118A  	fcall	_Iniciar_LCD
  1153  0342                     l1902:
  1154                           
  1155                           ;LAB2.c: 164:     Limpiar_pantallaLCD();
  1156  0342  120A  118A  2509  120A  118A  	fcall	_Limpiar_pantallaLCD
  1157  0347                     l110:
  1158  0347  0008               	return
  1159  0348                     __end_of_setup:
  1160                           
  1161                           	psect	text2
  1162  0509                     __ptext2:	
  1163 ;; *************** function _Limpiar_pantallaLCD *****************
  1164 ;; Defined at:
  1165 ;;		line 52 in file "LCD.c"
  1166 ;; Parameters:    Size  Location     Type
  1167 ;;		None
  1168 ;; Auto vars:     Size  Location     Type
  1169 ;;		None
  1170 ;; Return value:  Size  Location     Type
  1171 ;;                  1    wreg      void 
  1172 ;; Registers used:
  1173 ;;		wreg, status,2, status,0, pclath, cstack
  1174 ;; Tracked objects:
  1175 ;;		On entry : 0/0
  1176 ;;		On exit  : 0/0
  1177 ;;		Unchanged: 0/0
  1178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1179 ;;      Params:         0       0       0       0       0
  1180 ;;      Locals:         0       0       0       0       0
  1181 ;;      Temps:          0       2       0       0       0
  1182 ;;      Totals:         0       2       0       0       0
  1183 ;;Total ram usage:        2 bytes
  1184 ;; Hardware stack levels used: 1
  1185 ;; Hardware stack levels required when called: 4
  1186 ;; This function calls:
  1187 ;;		_Escribir_comandoLCD
  1188 ;; This function is called by:
  1189 ;;		_setup
  1190 ;; This function uses a non-reentrant model
  1191 ;;
  1192                           
  1193                           
  1194                           ;psect for function _Limpiar_pantallaLCD
  1195  0509                     _Limpiar_pantallaLCD:
  1196  0509                     l1760:	
  1197                           ;incstack = 0
  1198                           ; Regs used in _Limpiar_pantallaLCD: [wreg+status,2+status,0+pclath+cstack]
  1199                           
  1200                           
  1201                           ;LCD.c: 53:     Escribir_comandoLCD(0x01);
  1202  0509  3001               	movlw	1
  1203  050A  120A  118A  251B  120A  118A  	fcall	_Escribir_comandoLCD
  1204  050F                     l1762:
  1205                           
  1206                           ;LCD.c: 54:     _delay((unsigned long)((4)*(8000000/4000.0)));
  1207  050F  300B               	movlw	11
  1208  0510  1283               	bcf	3,5	;RP0=0, select bank0
  1209  0511  1303               	bcf	3,6	;RP1=0, select bank0
  1210  0512  00A1               	movwf	??_Limpiar_pantallaLCD+1
  1211  0513  3061               	movlw	97
  1212  0514  00A0               	movwf	??_Limpiar_pantallaLCD
  1213  0515                     u1437:
  1214  0515  0BA0               	decfsz	??_Limpiar_pantallaLCD,f
  1215  0516  2D15               	goto	u1437
  1216  0517  0BA1               	decfsz	??_Limpiar_pantallaLCD+1,f
  1217  0518  2D15               	goto	u1437
  1218  0519  2D1A               	nop2
  1219  051A                     l156:
  1220  051A  0008               	return
  1221  051B                     __end_of_Limpiar_pantallaLCD:
  1222                           
  1223                           	psect	text3
  1224  0480                     __ptext3:	
  1225 ;; *************** function _Iniciar_LCD *****************
  1226 ;; Defined at:
  1227 ;;		line 32 in file "LCD.c"
  1228 ;; Parameters:    Size  Location     Type
  1229 ;;		None
  1230 ;; Auto vars:     Size  Location     Type
  1231 ;;		None
  1232 ;; Return value:  Size  Location     Type
  1233 ;;                  1    wreg      void 
  1234 ;; Registers used:
  1235 ;;		wreg, status,2, status,0, pclath, cstack
  1236 ;; Tracked objects:
  1237 ;;		On entry : 0/0
  1238 ;;		On exit  : 0/0
  1239 ;;		Unchanged: 0/0
  1240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1241 ;;      Params:         0       0       0       0       0
  1242 ;;      Locals:         0       0       0       0       0
  1243 ;;      Temps:          0       0       0       0       0
  1244 ;;      Totals:         0       0       0       0       0
  1245 ;;Total ram usage:        0 bytes
  1246 ;; Hardware stack levels used: 1
  1247 ;; Hardware stack levels required when called: 4
  1248 ;; This function calls:
  1249 ;;		_Escribir_comandoLCD
  1250 ;; This function is called by:
  1251 ;;		_setup
  1252 ;; This function uses a non-reentrant model
  1253 ;;
  1254                           
  1255                           
  1256                           ;psect for function _Iniciar_LCD
  1257  0480                     _Iniciar_LCD:
  1258  0480                     l1744:	
  1259                           ;incstack = 0
  1260                           ; Regs used in _Iniciar_LCD: [wreg+status,2+status,0+pclath+cstack]
  1261                           
  1262                           
  1263                           ;LCD.c: 33:     RC1 = 0;
  1264  0480  1283               	bcf	3,5	;RP0=0, select bank0
  1265  0481  1303               	bcf	3,6	;RP1=0, select bank0
  1266  0482  1087               	bcf	7,1	;volatile
  1267                           
  1268                           ;LCD.c: 34:     RC0 = 0;
  1269  0483  1007               	bcf	7,0	;volatile
  1270  0484                     l1746:
  1271                           
  1272                           ;LCD.c: 35:     PORTD = 0;
  1273  0484  0188               	clrf	8	;volatile
  1274  0485                     l1748:
  1275                           
  1276                           ;LCD.c: 36:     TRISC1 = 0;
  1277  0485  1683               	bsf	3,5	;RP0=1, select bank1
  1278  0486  1303               	bcf	3,6	;RP1=0, select bank1
  1279  0487  1087               	bcf	7,1	;volatile
  1280  0488                     l1750:
  1281                           
  1282                           ;LCD.c: 37:     TRISC0 = 0;
  1283  0488  1007               	bcf	7,0	;volatile
  1284                           
  1285                           ;LCD.c: 38:     TRISD = 0;
  1286  0489  0188               	clrf	8	;volatile
  1287  048A                     l1752:
  1288                           
  1289                           ;LCD.c: 40:     Escribir_comandoLCD(0x38);
  1290  048A  3038               	movlw	56
  1291  048B  120A  118A  251B  120A  118A  	fcall	_Escribir_comandoLCD
  1292  0490                     l1754:
  1293                           
  1294                           ;LCD.c: 41:     Escribir_comandoLCD(0x0C);
  1295  0490  300C               	movlw	12
  1296  0491  120A  118A  251B  120A  118A  	fcall	_Escribir_comandoLCD
  1297  0496                     l1756:
  1298                           
  1299                           ;LCD.c: 42:     Escribir_comandoLCD(0x01);
  1300  0496  3001               	movlw	1
  1301  0497  120A  118A  251B  120A  118A  	fcall	_Escribir_comandoLCD
  1302  049C                     l1758:
  1303                           
  1304                           ;LCD.c: 43:     Escribir_comandoLCD(0x06);
  1305  049C  3006               	movlw	6
  1306  049D  120A  118A  251B  120A  118A  	fcall	_Escribir_comandoLCD
  1307  04A2                     l147:
  1308  04A2  0008               	return
  1309  04A3                     __end_of_Iniciar_LCD:
  1310                           
  1311                           	psect	text4
  1312  04A3                     __ptext4:	
  1313 ;; *************** function _set_cursor *****************
  1314 ;; Defined at:
  1315 ;;		line 57 in file "LCD.c"
  1316 ;; Parameters:    Size  Location     Type
  1317 ;;  a               1    wreg     unsigned char 
  1318 ;;  b               1    0[BANK0 ] unsigned char 
  1319 ;; Auto vars:     Size  Location     Type
  1320 ;;  a               1    1[BANK0 ] unsigned char 
  1321 ;; Return value:  Size  Location     Type
  1322 ;;                  1    wreg      void 
  1323 ;; Registers used:
  1324 ;;		wreg, status,2, status,0, pclath, cstack
  1325 ;; Tracked objects:
  1326 ;;		On entry : 0/0
  1327 ;;		On exit  : 0/0
  1328 ;;		Unchanged: 0/0
  1329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1330 ;;      Params:         0       1       0       0       0
  1331 ;;      Locals:         0       1       0       0       0
  1332 ;;      Temps:          0       0       0       0       0
  1333 ;;      Totals:         0       2       0       0       0
  1334 ;;Total ram usage:        2 bytes
  1335 ;; Hardware stack levels used: 1
  1336 ;; Hardware stack levels required when called: 4
  1337 ;; This function calls:
  1338 ;;		_Escribir_comandoLCD
  1339 ;; This function is called by:
  1340 ;;		_main
  1341 ;; This function uses a non-reentrant model
  1342 ;;
  1343                           
  1344                           
  1345                           ;psect for function _set_cursor
  1346  04A3                     _set_cursor:
  1347                           
  1348                           ;incstack = 0
  1349                           ; Regs used in _set_cursor: [wreg+status,2+status,0+pclath+cstack]
  1350                           ;set_cursor@a stored from wreg
  1351  04A3  1283               	bcf	3,5	;RP0=0, select bank0
  1352  04A4  1303               	bcf	3,6	;RP1=0, select bank0
  1353  04A5  00A1               	movwf	set_cursor@a
  1354  04A6                     l1904:
  1355                           
  1356                           ;LCD.c: 58:     if(a == 1){
  1357  04A6  0321               	decf	set_cursor@a,w
  1358  04A7  1D03               	btfss	3,2
  1359  04A8  2CAA               	goto	u1391
  1360  04A9  2CAB               	goto	u1390
  1361  04AA                     u1391:
  1362  04AA  2CB2               	goto	l1908
  1363  04AB                     u1390:
  1364  04AB                     l1906:
  1365                           
  1366                           ;LCD.c: 59:         Escribir_comandoLCD(0x80 + (b-1));
  1367  04AB  0820               	movf	set_cursor@b,w
  1368  04AC  3E7F               	addlw	127
  1369  04AD  120A  118A  251B  120A  118A  	fcall	_Escribir_comandoLCD
  1370  04B2                     l1908:
  1371                           
  1372                           ;LCD.c: 61:     if(a == 2){
  1373  04B2  3002               	movlw	2
  1374  04B3  1283               	bcf	3,5	;RP0=0, select bank0
  1375  04B4  1303               	bcf	3,6	;RP1=0, select bank0
  1376  04B5  0621               	xorwf	set_cursor@a,w
  1377  04B6  1D03               	btfss	3,2
  1378  04B7  2CB9               	goto	u1401
  1379  04B8  2CBA               	goto	u1400
  1380  04B9                     u1401:
  1381  04B9  2CC1               	goto	l161
  1382  04BA                     u1400:
  1383  04BA                     l1910:
  1384                           
  1385                           ;LCD.c: 62:         Escribir_comandoLCD(0xC0 + (b-1));
  1386  04BA  0820               	movf	set_cursor@b,w
  1387  04BB  3EBF               	addlw	191
  1388  04BC  120A  118A  251B  120A  118A  	fcall	_Escribir_comandoLCD
  1389  04C1                     l161:
  1390  04C1  0008               	return
  1391  04C2                     __end_of_set_cursor:
  1392                           
  1393                           	psect	text5
  1394  051B                     __ptext5:	
  1395 ;; *************** function _Escribir_comandoLCD *****************
  1396 ;; Defined at:
  1397 ;;		line 18 in file "LCD.c"
  1398 ;; Parameters:    Size  Location     Type
  1399 ;;  Comando         1    wreg     unsigned char 
  1400 ;; Auto vars:     Size  Location     Type
  1401 ;;  Comando         1    5[COMMON] unsigned char 
  1402 ;; Return value:  Size  Location     Type
  1403 ;;                  1    wreg      void 
  1404 ;; Registers used:
  1405 ;;		wreg, status,2, status,0, pclath, cstack
  1406 ;; Tracked objects:
  1407 ;;		On entry : 0/0
  1408 ;;		On exit  : 0/0
  1409 ;;		Unchanged: 0/0
  1410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1411 ;;      Params:         0       0       0       0       0
  1412 ;;      Locals:         1       0       0       0       0
  1413 ;;      Temps:          0       0       0       0       0
  1414 ;;      Totals:         1       0       0       0       0
  1415 ;;Total ram usage:        1 bytes
  1416 ;; Hardware stack levels used: 1
  1417 ;; Hardware stack levels required when called: 3
  1418 ;; This function calls:
  1419 ;;		_prender_ELCD
  1420 ;; This function is called by:
  1421 ;;		_Iniciar_LCD
  1422 ;;		_Limpiar_pantallaLCD
  1423 ;;		_set_cursor
  1424 ;;		_shift_right
  1425 ;;		_shift_left
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429                           
  1430                           ;psect for function _Escribir_comandoLCD
  1431  051B                     _Escribir_comandoLCD:
  1432                           
  1433                           ;incstack = 0
  1434                           ; Regs used in _Escribir_comandoLCD: [wreg+status,2+status,0+pclath+cstack]
  1435                           ;Escribir_comandoLCD@Comando stored from wreg
  1436  051B  00F5               	movwf	Escribir_comandoLCD@Comando
  1437  051C                     l1630:
  1438                           
  1439                           ;LCD.c: 19:     RC0 = 0;
  1440  051C  1283               	bcf	3,5	;RP0=0, select bank0
  1441  051D  1303               	bcf	3,6	;RP1=0, select bank0
  1442  051E  1007               	bcf	7,0	;volatile
  1443  051F                     l1632:
  1444                           
  1445                           ;LCD.c: 20:     PORTD = Comando;
  1446  051F  0875               	movf	Escribir_comandoLCD@Comando,w
  1447  0520  0088               	movwf	8	;volatile
  1448  0521                     l1634:
  1449                           
  1450                           ;LCD.c: 22:     prender_ELCD();
  1451  0521  120A  118A  24E0  120A  118A  	fcall	_prender_ELCD
  1452  0526                     l141:
  1453  0526  0008               	return
  1454  0527                     __end_of_Escribir_comandoLCD:
  1455                           
  1456                           	psect	text6
  1457  04F5                     __ptext6:	
  1458 ;; *************** function _dato_recibido *****************
  1459 ;; Defined at:
  1460 ;;		line 183 in file "LAB2.c"
  1461 ;; Parameters:    Size  Location     Type
  1462 ;;		None
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;		None
  1465 ;; Return value:  Size  Location     Type
  1466 ;;                  1    wreg      void 
  1467 ;; Registers used:
  1468 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1469 ;; Tracked objects:
  1470 ;;		On entry : 0/0
  1471 ;;		On exit  : 0/0
  1472 ;;		Unchanged: 0/0
  1473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1474 ;;      Params:         0       0       0       0       0
  1475 ;;      Locals:         0       0       0       0       0
  1476 ;;      Temps:          0       3       0       0       0
  1477 ;;      Totals:         0       3       0       0       0
  1478 ;;Total ram usage:        3 bytes
  1479 ;; Hardware stack levels used: 1
  1480 ;; Hardware stack levels required when called: 4
  1481 ;; This function calls:
  1482 ;;		_sprintf
  1483 ;; This function is called by:
  1484 ;;		_main
  1485 ;; This function uses a non-reentrant model
  1486 ;;
  1487                           
  1488                           
  1489                           ;psect for function _dato_recibido
  1490  04F5                     _dato_recibido:
  1491  04F5                     l1922:	
  1492                           ;incstack = 0
  1493                           ; Regs used in _dato_recibido: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1494                           
  1495                           
  1496                           ;LAB2.c: 184:     sprintf(buffer3, "%d", Cont_U);
  1497  04F5  3021               	movlw	(low (((STR_2+5)-__stringbase)| (0+32768)))& (0+255)
  1498  04F6  1283               	bcf	3,5	;RP0=0, select bank0
  1499  04F7  1303               	bcf	3,6	;RP1=0, select bank0
  1500  04F8  00BD               	movwf	??_dato_recibido
  1501  04F9  083D               	movf	??_dato_recibido,w
  1502  04FA  00AC               	movwf	sprintf@f
  1503  04FB  0845               	movf	_Cont_U,w
  1504  04FC  00BE               	movwf	??_dato_recibido+1
  1505  04FD  01BF               	clrf	??_dato_recibido+2
  1506  04FE  083E               	movf	??_dato_recibido+1,w
  1507  04FF  00AD               	movwf	?_sprintf+1
  1508  0500  083F               	movf	??_dato_recibido+2,w
  1509  0501  00AE               	movwf	?_sprintf+2
  1510  0502  3049               	movlw	(low (_buffer3| 0))& (0+255)
  1511  0503  120A  118A  2020  120A  118A  	fcall	_sprintf
  1512  0508                     l121:
  1513  0508  0008               	return
  1514  0509                     __end_of_dato_recibido:
  1515                           
  1516                           	psect	text7
  1517  01E6                     __ptext7:	
  1518 ;; *************** function _conversion_char *****************
  1519 ;; Defined at:
  1520 ;;		line 167 in file "LAB2.c"
  1521 ;; Parameters:    Size  Location     Type
  1522 ;;		None
  1523 ;; Auto vars:     Size  Location     Type
  1524 ;;		None
  1525 ;; Return value:  Size  Location     Type
  1526 ;;                  1    wreg      void 
  1527 ;; Registers used:
  1528 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1529 ;; Tracked objects:
  1530 ;;		On entry : 0/0
  1531 ;;		On exit  : 0/0
  1532 ;;		Unchanged: 0/0
  1533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1534 ;;      Params:         0       0       0       0       0
  1535 ;;      Locals:         0       0       0       0       0
  1536 ;;      Temps:          0       7       0       0       0
  1537 ;;      Totals:         0       7       0       0       0
  1538 ;;Total ram usage:        7 bytes
  1539 ;; Hardware stack levels used: 1
  1540 ;; Hardware stack levels required when called: 4
  1541 ;; This function calls:
  1542 ;;		_divisor
  1543 ;;		_sprintf
  1544 ;; This function is called by:
  1545 ;;		_main
  1546 ;; This function uses a non-reentrant model
  1547 ;;
  1548                           
  1549                           
  1550                           ;psect for function _conversion_char
  1551  01E6                     _conversion_char:
  1552  01E6                     l1920:	
  1553                           ;incstack = 0
  1554                           ; Regs used in _conversion_char: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1555                           
  1556                           
  1557                           ;LAB2.c: 168:     divisor(cont1, vol1);
  1558  01E6  3068               	movlw	(low (_vol1| 0))& (0+255)
  1559  01E7  1283               	bcf	3,5	;RP0=0, select bank0
  1560  01E8  1303               	bcf	3,6	;RP1=0, select bank0
  1561  01E9  00BD               	movwf	??_conversion_char
  1562  01EA  083D               	movf	??_conversion_char,w
  1563  01EB  00F5               	movwf	divisor@dig
  1564  01EC  0848               	movf	_cont1,w
  1565  01ED  120A  118A  229C  120A  118A  	fcall	_divisor
  1566                           
  1567                           ;LAB2.c: 169:     sprintf(buffer1, "%d.%d%d", vol1[2], vol1[1], vol1[0]);
  1568  01F2  301C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1569  01F3  1283               	bcf	3,5	;RP0=0, select bank0
  1570  01F4  1303               	bcf	3,6	;RP1=0, select bank0
  1571  01F5  00BD               	movwf	??_conversion_char
  1572  01F6  083D               	movf	??_conversion_char,w
  1573  01F7  00AC               	movwf	sprintf@f
  1574  01F8  086A               	movf	_vol1+2,w
  1575  01F9  00BE               	movwf	??_conversion_char+1
  1576  01FA  01BF               	clrf	??_conversion_char+2
  1577  01FB  083E               	movf	??_conversion_char+1,w
  1578  01FC  00AD               	movwf	?_sprintf+1
  1579  01FD  083F               	movf	??_conversion_char+2,w
  1580  01FE  00AE               	movwf	?_sprintf+2
  1581  01FF  0869               	movf	_vol1+1,w
  1582  0200  00C0               	movwf	??_conversion_char+3
  1583  0201  01C1               	clrf	??_conversion_char+4
  1584  0202  0840               	movf	??_conversion_char+3,w
  1585  0203  00AF               	movwf	?_sprintf+3
  1586  0204  0841               	movf	??_conversion_char+4,w
  1587  0205  00B0               	movwf	?_sprintf+4
  1588  0206  0868               	movf	_vol1,w
  1589  0207  00C2               	movwf	??_conversion_char+5
  1590  0208  01C3               	clrf	??_conversion_char+6
  1591  0209  0842               	movf	??_conversion_char+5,w
  1592  020A  00B1               	movwf	?_sprintf+5
  1593  020B  0843               	movf	??_conversion_char+6,w
  1594  020C  00B2               	movwf	?_sprintf+6
  1595  020D  305D               	movlw	(low (_buffer1| 0))& (0+255)
  1596  020E  120A  118A  2020  120A  118A  	fcall	_sprintf
  1597                           
  1598                           ;LAB2.c: 171:     divisor(cont2, vol2);
  1599  0213  3067               	movlw	(low (_vol2| 0))& (0+255)
  1600  0214  1283               	bcf	3,5	;RP0=0, select bank0
  1601  0215  1303               	bcf	3,6	;RP1=0, select bank0
  1602  0216  00BD               	movwf	??_conversion_char
  1603  0217  083D               	movf	??_conversion_char,w
  1604  0218  00F5               	movwf	divisor@dig
  1605  0219  0847               	movf	_cont2,w
  1606  021A  120A  118A  229C  120A  118A  	fcall	_divisor
  1607                           
  1608                           ;LAB2.c: 172:     sprintf(buffer2, "%d.%d%d", vol2[2], vol2[1], vol2[0]);
  1609  021F  301C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1610  0220  1283               	bcf	3,5	;RP0=0, select bank0
  1611  0221  1303               	bcf	3,6	;RP1=0, select bank0
  1612  0222  00BD               	movwf	??_conversion_char
  1613  0223  083D               	movf	??_conversion_char,w
  1614  0224  00AC               	movwf	sprintf@f
  1615  0225  0869               	movf	_vol2+2,w
  1616  0226  00BE               	movwf	??_conversion_char+1
  1617  0227  01BF               	clrf	??_conversion_char+2
  1618  0228  083E               	movf	??_conversion_char+1,w
  1619  0229  00AD               	movwf	?_sprintf+1
  1620  022A  083F               	movf	??_conversion_char+2,w
  1621  022B  00AE               	movwf	?_sprintf+2
  1622  022C  0868               	movf	_vol2+1,w
  1623  022D  00C0               	movwf	??_conversion_char+3
  1624  022E  01C1               	clrf	??_conversion_char+4
  1625  022F  0840               	movf	??_conversion_char+3,w
  1626  0230  00AF               	movwf	?_sprintf+3
  1627  0231  0841               	movf	??_conversion_char+4,w
  1628  0232  00B0               	movwf	?_sprintf+4
  1629  0233  0867               	movf	_vol2,w
  1630  0234  00C2               	movwf	??_conversion_char+5
  1631  0235  01C3               	clrf	??_conversion_char+6
  1632  0236  0842               	movf	??_conversion_char+5,w
  1633  0237  00B1               	movwf	?_sprintf+5
  1634  0238  0843               	movf	??_conversion_char+6,w
  1635  0239  00B2               	movwf	?_sprintf+6
  1636  023A  3053               	movlw	(low (_buffer2| 0))& (0+255)
  1637  023B  120A  118A  2020  120A  118A  	fcall	_sprintf
  1638  0240                     l113:
  1639  0240  0008               	return
  1640  0241                     __end_of_conversion_char:
  1641                           
  1642                           	psect	text8
  1643  0020                     __ptext8:	
  1644 ;; *************** function _sprintf *****************
  1645 ;; Defined at:
  1646 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c"
  1647 ;; Parameters:    Size  Location     Type
  1648 ;;  sp              1    wreg     PTR unsigned char 
  1649 ;;		 -> buffer3(10), buffer2(10), buffer1(10), 
  1650 ;;  f               1   12[BANK0 ] PTR const unsigned char 
  1651 ;;		 -> STR_4(3), STR_3(8), STR_2(8), 
  1652 ;; Auto vars:     Size  Location     Type
  1653 ;;  sp              1   27[BANK0 ] PTR unsigned char 
  1654 ;;		 -> buffer3(10), buffer2(10), buffer1(10), 
  1655 ;;  tmpval          4    0        struct .
  1656 ;;  val             2   25[BANK0 ] unsigned int 
  1657 ;;  cp              2    0        PTR const unsigned char 
  1658 ;;  len             2    0        unsigned int 
  1659 ;;  c               1   28[BANK0 ] unsigned char 
  1660 ;;  prec            1   24[BANK0 ] char 
  1661 ;;  flag            1   23[BANK0 ] unsigned char 
  1662 ;;  ap              1   22[BANK0 ] PTR void [1]
  1663 ;;		 -> ?_sprintf(2), 
  1664 ;; Return value:  Size  Location     Type
  1665 ;;                  2   12[BANK0 ] int 
  1666 ;; Registers used:
  1667 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1668 ;; Tracked objects:
  1669 ;;		On entry : 0/0
  1670 ;;		On exit  : 0/0
  1671 ;;		Unchanged: 0/0
  1672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1673 ;;      Params:         0       7       0       0       0
  1674 ;;      Locals:         0       7       0       0       0
  1675 ;;      Temps:          0       3       0       0       0
  1676 ;;      Totals:         0      17       0       0       0
  1677 ;;Total ram usage:       17 bytes
  1678 ;; Hardware stack levels used: 1
  1679 ;; Hardware stack levels required when called: 3
  1680 ;; This function calls:
  1681 ;;		___lwdiv
  1682 ;;		___lwmod
  1683 ;; This function is called by:
  1684 ;;		_conversion_char
  1685 ;;		_dato_recibido
  1686 ;; This function uses a non-reentrant model
  1687 ;;
  1688                           
  1689                           
  1690                           ;psect for function _sprintf
  1691  0020                     _sprintf:
  1692                           
  1693                           ;incstack = 0
  1694                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1695                           ;sprintf@sp stored from wreg
  1696  0020  1283               	bcf	3,5	;RP0=0, select bank0
  1697  0021  1303               	bcf	3,6	;RP1=0, select bank0
  1698  0022  00BB               	movwf	sprintf@sp
  1699  0023                     l1778:
  1700                           
  1701                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  1702  0023  302D               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1703  0024  00B3               	movwf	??_sprintf
  1704  0025  0833               	movf	??_sprintf,w
  1705  0026  00B6               	movwf	sprintf@ap
  1706                           
  1707                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1708  0027  28F3               	goto	l1830
  1709  0028                     l1780:
  1710                           
  1711                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1712  0028  3025               	movlw	37
  1713  0029  063C               	xorwf	sprintf@c,w
  1714  002A  1903               	btfsc	3,2
  1715  002B  282D               	goto	u1321
  1716  002C  282E               	goto	u1320
  1717  002D                     u1321:
  1718  002D  283A               	goto	l1786
  1719  002E                     u1320:
  1720  002E                     l1782:
  1721                           
  1722                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1723  002E  083C               	movf	sprintf@c,w
  1724  002F  00B3               	movwf	??_sprintf
  1725  0030  083B               	movf	sprintf@sp,w
  1726  0031  0084               	movwf	4
  1727  0032  0833               	movf	??_sprintf,w
  1728  0033  1383               	bcf	3,7	;select IRP bank0
  1729  0034  0080               	movwf	0
  1730  0035                     l1784:
  1731  0035  3001               	movlw	1
  1732  0036  00B3               	movwf	??_sprintf
  1733  0037  0833               	movf	??_sprintf,w
  1734  0038  07BB               	addwf	sprintf@sp,f
  1735                           
  1736                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 559:    continue;
  1737  0039  28F3               	goto	l1830
  1738  003A                     l1786:
  1739                           
  1740                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1741  003A  01B7               	clrf	sprintf@flag
  1742  003B                     l1790:	
  1743                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  1744                           
  1745  003B  3001               	movlw	1
  1746  003C  07AC               	addwf	sprintf@f,f
  1747  003D  30FF               	movlw	-1
  1748  003E  072C               	addwf	sprintf@f,w
  1749  003F  0084               	movwf	4
  1750  0040  120A  118A  23D4  120A  118A  	fcall	stringdir
  1751  0045  00BC               	movwf	sprintf@c
  1752  0046  00B3               	movwf	??_sprintf
  1753  0047  01B4               	clrf	??_sprintf+1
  1754                           
  1755                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1756                           ; Switch size 1, requested type "simple"
  1757                           ; Number of cases is 1, Range of values is 0 to 0
  1758                           ; switch strategies available:
  1759                           ; Name         Instructions Cycles
  1760                           ; simple_byte            4     3 (average)
  1761                           ; direct_byte           11     8 (fixed)
  1762                           ; jumptable            260     6 (fixed)
  1763                           ;	Chosen strategy is simple_byte
  1764  0048  0834               	movf	??_sprintf+1,w
  1765  0049  3A00               	xorlw	0	; case 0
  1766  004A  1903               	skipnz
  1767  004B  284D               	goto	l1964
  1768  004C  28F3               	goto	l1830
  1769  004D                     l1964:
  1770                           
  1771                           ; Switch size 1, requested type "simple"
  1772                           ; Number of cases is 3, Range of values is 0 to 105
  1773                           ; switch strategies available:
  1774                           ; Name         Instructions Cycles
  1775                           ; simple_byte           10     6 (average)
  1776                           ; jumptable            260     6 (fixed)
  1777                           ;	Chosen strategy is simple_byte
  1778  004D  0833               	movf	??_sprintf,w
  1779  004E  3A00               	xorlw	0	; case 0
  1780  004F  1903               	skipnz
  1781  0050  2905               	goto	l1832
  1782  0051  3A64               	xorlw	100	; case 100
  1783  0052  1903               	skipnz
  1784  0053  2858               	goto	l1792
  1785  0054  3A0D               	xorlw	13	; case 105
  1786  0055  1903               	skipnz
  1787  0056  2858               	goto	l1792
  1788  0057  28F3               	goto	l1830
  1789  0058                     l1792:
  1790                           
  1791                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1792  0058  0836               	movf	sprintf@ap,w
  1793  0059  0084               	movwf	4
  1794  005A  1383               	bcf	3,7	;select IRP bank0
  1795  005B  0800               	movf	0,w
  1796  005C  00B9               	movwf	sprintf@val
  1797  005D  0A84               	incf	4,f
  1798  005E  0800               	movf	0,w
  1799  005F  00BA               	movwf	sprintf@val+1
  1800  0060                     l1794:
  1801  0060  3002               	movlw	2
  1802  0061  00B3               	movwf	??_sprintf
  1803  0062  0833               	movf	??_sprintf,w
  1804  0063  07B6               	addwf	sprintf@ap,f
  1805  0064                     l1796:
  1806                           
  1807                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1808  0064  1FBA               	btfss	sprintf@val+1,7
  1809  0065  2867               	goto	u1331
  1810  0066  2868               	goto	u1330
  1811  0067                     u1331:
  1812  0067  2871               	goto	l1802
  1813  0068                     u1330:
  1814  0068                     l1798:
  1815                           
  1816                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1817  0068  3003               	movlw	3
  1818  0069  00B3               	movwf	??_sprintf
  1819  006A  0833               	movf	??_sprintf,w
  1820  006B  04B7               	iorwf	sprintf@flag,f
  1821  006C                     l1800:
  1822                           
  1823                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1824  006C  09B9               	comf	sprintf@val,f
  1825  006D  09BA               	comf	sprintf@val+1,f
  1826  006E  0AB9               	incf	sprintf@val,f
  1827  006F  1903               	skipnz
  1828  0070  0ABA               	incf	sprintf@val+1,f
  1829  0071                     l1802:
  1830                           
  1831                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1832  0071  01BC               	clrf	sprintf@c
  1833  0072  0ABC               	incf	sprintf@c,f
  1834  0073                     l1808:
  1835                           
  1836                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1837  0073  083C               	movf	sprintf@c,w
  1838  0074  00B3               	movwf	??_sprintf
  1839  0075  0733               	addwf	??_sprintf,w
  1840  0076  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1841  0077  0084               	movwf	4
  1842  0078  120A  118A  23D4  120A  118A  	fcall	stringdir
  1843  007D  00B4               	movwf	??_sprintf+1
  1844  007E  120A  118A  23D4  120A  118A  	fcall	stringdir
  1845  0083  00B5               	movwf	??_sprintf+2
  1846  0084  0835               	movf	??_sprintf+2,w
  1847  0085  023A               	subwf	sprintf@val+1,w
  1848  0086  1D03               	skipz
  1849  0087  288A               	goto	u1345
  1850  0088  0834               	movf	??_sprintf+1,w
  1851  0089  0239               	subwf	sprintf@val,w
  1852  008A                     u1345:
  1853  008A  1803               	skipnc
  1854  008B  288D               	goto	u1341
  1855  008C  288E               	goto	u1340
  1856  008D                     u1341:
  1857  008D  288F               	goto	l1812
  1858  008E                     u1340:
  1859  008E  2899               	goto	l1814
  1860  008F                     l1812:
  1861  008F  3001               	movlw	1
  1862  0090  00B3               	movwf	??_sprintf
  1863  0091  0833               	movf	??_sprintf,w
  1864  0092  07BC               	addwf	sprintf@c,f
  1865  0093  3005               	movlw	5
  1866  0094  063C               	xorwf	sprintf@c,w
  1867  0095  1D03               	btfss	3,2
  1868  0096  2898               	goto	u1351
  1869  0097  2899               	goto	u1350
  1870  0098                     u1351:
  1871  0098  2873               	goto	l1808
  1872  0099                     u1350:
  1873  0099                     l1814:
  1874                           
  1875                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  1876  0099  0837               	movf	sprintf@flag,w
  1877  009A  3903               	andlw	3
  1878  009B  1903               	btfsc	3,2
  1879  009C  289E               	goto	u1361
  1880  009D  289F               	goto	u1360
  1881  009E                     u1361:
  1882  009E  28AA               	goto	l1820
  1883  009F                     u1360:
  1884  009F                     l1816:
  1885                           
  1886                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1887  009F  302D               	movlw	45
  1888  00A0  00B3               	movwf	??_sprintf
  1889  00A1  083B               	movf	sprintf@sp,w
  1890  00A2  0084               	movwf	4
  1891  00A3  0833               	movf	??_sprintf,w
  1892  00A4  1383               	bcf	3,7	;select IRP bank0
  1893  00A5  0080               	movwf	0
  1894  00A6                     l1818:
  1895  00A6  3001               	movlw	1
  1896  00A7  00B3               	movwf	??_sprintf
  1897  00A8  0833               	movf	??_sprintf,w
  1898  00A9  07BB               	addwf	sprintf@sp,f
  1899  00AA                     l1820:
  1900                           
  1901                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1902  00AA  083C               	movf	sprintf@c,w
  1903  00AB  00B3               	movwf	??_sprintf
  1904  00AC  0833               	movf	??_sprintf,w
  1905  00AD  00B8               	movwf	sprintf@prec
  1906                           
  1907                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1908  00AE  28EA               	goto	l1828
  1909  00AF                     l1822:
  1910                           
  1911                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1912  00AF  300A               	movlw	10
  1913  00B0  00A7               	movwf	___lwmod@divisor
  1914  00B1  3000               	movlw	0
  1915  00B2  00A8               	movwf	___lwmod@divisor+1
  1916  00B3  0838               	movf	sprintf@prec,w
  1917  00B4  00B3               	movwf	??_sprintf
  1918  00B5  0733               	addwf	??_sprintf,w
  1919  00B6  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1920  00B7  0084               	movwf	4
  1921  00B8  120A  118A  23D4  120A  118A  	fcall	stringdir
  1922  00BD  00A0               	movwf	___lwdiv@divisor
  1923  00BE  120A  118A  23D4  120A  118A  	fcall	stringdir
  1924  00C3  00A1               	movwf	___lwdiv@divisor+1
  1925  00C4  083A               	movf	sprintf@val+1,w
  1926  00C5  00A3               	movwf	___lwdiv@dividend+1
  1927  00C6  0839               	movf	sprintf@val,w
  1928  00C7  00A2               	movwf	___lwdiv@dividend
  1929  00C8  120A  118A  2348  120A  118A  	fcall	___lwdiv
  1930  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  1931  00CE  1303               	bcf	3,6	;RP1=0, select bank0
  1932  00CF  0821               	movf	?___lwdiv+1,w
  1933  00D0  00AA               	movwf	___lwmod@dividend+1
  1934  00D1  0820               	movf	?___lwdiv,w
  1935  00D2  00A9               	movwf	___lwmod@dividend
  1936  00D3  120A  118A  238E  120A  118A  	fcall	___lwmod
  1937  00D8  1283               	bcf	3,5	;RP0=0, select bank0
  1938  00D9  1303               	bcf	3,6	;RP1=0, select bank0
  1939  00DA  0827               	movf	?___lwmod,w
  1940  00DB  3E30               	addlw	48
  1941  00DC  00B4               	movwf	??_sprintf+1
  1942  00DD  0834               	movf	??_sprintf+1,w
  1943  00DE  00BC               	movwf	sprintf@c
  1944  00DF                     l1824:
  1945                           
  1946                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1947  00DF  083C               	movf	sprintf@c,w
  1948  00E0  00B3               	movwf	??_sprintf
  1949  00E1  083B               	movf	sprintf@sp,w
  1950  00E2  0084               	movwf	4
  1951  00E3  0833               	movf	??_sprintf,w
  1952  00E4  1383               	bcf	3,7	;select IRP bank0
  1953  00E5  0080               	movwf	0
  1954  00E6                     l1826:
  1955  00E6  3001               	movlw	1
  1956  00E7  00B3               	movwf	??_sprintf
  1957  00E8  0833               	movf	??_sprintf,w
  1958  00E9  07BB               	addwf	sprintf@sp,f
  1959  00EA                     l1828:
  1960                           
  1961                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1962  00EA  30FF               	movlw	255
  1963  00EB  00B3               	movwf	??_sprintf
  1964  00EC  0833               	movf	??_sprintf,w
  1965  00ED  07B8               	addwf	sprintf@prec,f
  1966  00EE  0A38               	incf	sprintf@prec,w
  1967  00EF  1D03               	btfss	3,2
  1968  00F0  28F2               	goto	u1371
  1969  00F1  28F3               	goto	u1370
  1970  00F2                     u1371:
  1971  00F2  28AF               	goto	l1822
  1972  00F3                     u1370:
  1973  00F3                     l1830:
  1974                           
  1975                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1976  00F3  3001               	movlw	1
  1977  00F4  07AC               	addwf	sprintf@f,f
  1978  00F5  30FF               	movlw	-1
  1979  00F6  072C               	addwf	sprintf@f,w
  1980  00F7  0084               	movwf	4
  1981  00F8  120A  118A  23D4  120A  118A  	fcall	stringdir
  1982  00FD  00B3               	movwf	??_sprintf
  1983  00FE  0833               	movf	??_sprintf,w
  1984  00FF  00BC               	movwf	sprintf@c
  1985  0100  083C               	movf	sprintf@c,w
  1986  0101  1D03               	btfss	3,2
  1987  0102  2904               	goto	u1381
  1988  0103  2905               	goto	u1380
  1989  0104                     u1381:
  1990  0104  2828               	goto	l1780
  1991  0105                     u1380:
  1992  0105                     l1832:
  1993                           
  1994                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1995  0105  083B               	movf	sprintf@sp,w
  1996  0106  0084               	movwf	4
  1997  0107  1383               	bcf	3,7	;select IRP bank0
  1998  0108  0180               	clrf	0
  1999  0109                     l306:
  2000  0109  0008               	return
  2001  010A                     __end_of_sprintf:
  2002                           
  2003                           	psect	text9
  2004  038E                     __ptext9:	
  2005 ;; *************** function ___lwmod *****************
  2006 ;; Defined at:
  2007 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  2008 ;; Parameters:    Size  Location     Type
  2009 ;;  divisor         2    7[BANK0 ] unsigned int 
  2010 ;;  dividend        2    9[BANK0 ] unsigned int 
  2011 ;; Auto vars:     Size  Location     Type
  2012 ;;  counter         1   11[BANK0 ] unsigned char 
  2013 ;; Return value:  Size  Location     Type
  2014 ;;                  2    7[BANK0 ] unsigned int 
  2015 ;; Registers used:
  2016 ;;		wreg, status,2, status,0
  2017 ;; Tracked objects:
  2018 ;;		On entry : 0/0
  2019 ;;		On exit  : 0/0
  2020 ;;		Unchanged: 0/0
  2021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2022 ;;      Params:         0       4       0       0       0
  2023 ;;      Locals:         0       1       0       0       0
  2024 ;;      Temps:          1       0       0       0       0
  2025 ;;      Totals:         1       5       0       0       0
  2026 ;;Total ram usage:        6 bytes
  2027 ;; Hardware stack levels used: 1
  2028 ;; Hardware stack levels required when called: 2
  2029 ;; This function calls:
  2030 ;;		Nothing
  2031 ;; This function is called by:
  2032 ;;		_sprintf
  2033 ;; This function uses a non-reentrant model
  2034 ;;
  2035                           
  2036                           
  2037                           ;psect for function ___lwmod
  2038  038E                     ___lwmod:
  2039  038E                     l1340:	
  2040                           ;incstack = 0
  2041                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2042                           
  2043  038E  1283               	bcf	3,5	;RP0=0, select bank0
  2044  038F  1303               	bcf	3,6	;RP1=0, select bank0
  2045  0390  0827               	movf	___lwmod@divisor,w
  2046  0391  0428               	iorwf	___lwmod@divisor+1,w
  2047  0392  1903               	btfsc	3,2
  2048  0393  2B95               	goto	u791
  2049  0394  2B96               	goto	u790
  2050  0395                     u791:
  2051  0395  2BC5               	goto	l1358
  2052  0396                     u790:
  2053  0396                     l1342:
  2054  0396  01AB               	clrf	___lwmod@counter
  2055  0397  0AAB               	incf	___lwmod@counter,f
  2056  0398  2BA4               	goto	l1348
  2057  0399                     l1344:
  2058  0399  3001               	movlw	1
  2059  039A                     u805:
  2060  039A  1003               	clrc
  2061  039B  0DA7               	rlf	___lwmod@divisor,f
  2062  039C  0DA8               	rlf	___lwmod@divisor+1,f
  2063  039D  3EFF               	addlw	-1
  2064  039E  1D03               	skipz
  2065  039F  2B9A               	goto	u805
  2066  03A0                     l1346:
  2067  03A0  3001               	movlw	1
  2068  03A1  00F5               	movwf	??___lwmod
  2069  03A2  0875               	movf	??___lwmod,w
  2070  03A3  07AB               	addwf	___lwmod@counter,f
  2071  03A4                     l1348:
  2072  03A4  1FA8               	btfss	___lwmod@divisor+1,7
  2073  03A5  2BA7               	goto	u811
  2074  03A6  2BA8               	goto	u810
  2075  03A7                     u811:
  2076  03A7  2B99               	goto	l1344
  2077  03A8                     u810:
  2078  03A8                     l1350:
  2079  03A8  0828               	movf	___lwmod@divisor+1,w
  2080  03A9  022A               	subwf	___lwmod@dividend+1,w
  2081  03AA  1D03               	skipz
  2082  03AB  2BAE               	goto	u825
  2083  03AC  0827               	movf	___lwmod@divisor,w
  2084  03AD  0229               	subwf	___lwmod@dividend,w
  2085  03AE                     u825:
  2086  03AE  1C03               	skipc
  2087  03AF  2BB1               	goto	u821
  2088  03B0  2BB2               	goto	u820
  2089  03B1                     u821:
  2090  03B1  2BB8               	goto	l1354
  2091  03B2                     u820:
  2092  03B2                     l1352:
  2093  03B2  0827               	movf	___lwmod@divisor,w
  2094  03B3  02A9               	subwf	___lwmod@dividend,f
  2095  03B4  0828               	movf	___lwmod@divisor+1,w
  2096  03B5  1C03               	skipc
  2097  03B6  03AA               	decf	___lwmod@dividend+1,f
  2098  03B7  02AA               	subwf	___lwmod@dividend+1,f
  2099  03B8                     l1354:
  2100  03B8  3001               	movlw	1
  2101  03B9                     u835:
  2102  03B9  1003               	clrc
  2103  03BA  0CA8               	rrf	___lwmod@divisor+1,f
  2104  03BB  0CA7               	rrf	___lwmod@divisor,f
  2105  03BC  3EFF               	addlw	-1
  2106  03BD  1D03               	skipz
  2107  03BE  2BB9               	goto	u835
  2108  03BF                     l1356:
  2109  03BF  3001               	movlw	1
  2110  03C0  02AB               	subwf	___lwmod@counter,f
  2111  03C1  1D03               	btfss	3,2
  2112  03C2  2BC4               	goto	u841
  2113  03C3  2BC5               	goto	u840
  2114  03C4                     u841:
  2115  03C4  2BA8               	goto	l1350
  2116  03C5                     u840:
  2117  03C5                     l1358:
  2118  03C5  082A               	movf	___lwmod@dividend+1,w
  2119  03C6  00A8               	movwf	?___lwmod+1
  2120  03C7  0829               	movf	___lwmod@dividend,w
  2121  03C8  00A7               	movwf	?___lwmod
  2122  03C9                     l592:
  2123  03C9  0008               	return
  2124  03CA                     __end_of___lwmod:
  2125                           
  2126                           	psect	text10
  2127  0348                     __ptext10:	
  2128 ;; *************** function ___lwdiv *****************
  2129 ;; Defined at:
  2130 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  2131 ;; Parameters:    Size  Location     Type
  2132 ;;  divisor         2    0[BANK0 ] unsigned int 
  2133 ;;  dividend        2    2[BANK0 ] unsigned int 
  2134 ;; Auto vars:     Size  Location     Type
  2135 ;;  quotient        2    5[BANK0 ] unsigned int 
  2136 ;;  counter         1    4[BANK0 ] unsigned char 
  2137 ;; Return value:  Size  Location     Type
  2138 ;;                  2    0[BANK0 ] unsigned int 
  2139 ;; Registers used:
  2140 ;;		wreg, status,2, status,0
  2141 ;; Tracked objects:
  2142 ;;		On entry : 0/0
  2143 ;;		On exit  : 0/0
  2144 ;;		Unchanged: 0/0
  2145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2146 ;;      Params:         0       4       0       0       0
  2147 ;;      Locals:         0       3       0       0       0
  2148 ;;      Temps:          1       0       0       0       0
  2149 ;;      Totals:         1       7       0       0       0
  2150 ;;Total ram usage:        8 bytes
  2151 ;; Hardware stack levels used: 1
  2152 ;; Hardware stack levels required when called: 2
  2153 ;; This function calls:
  2154 ;;		Nothing
  2155 ;; This function is called by:
  2156 ;;		_sprintf
  2157 ;; This function uses a non-reentrant model
  2158 ;;
  2159                           
  2160                           
  2161                           ;psect for function ___lwdiv
  2162  0348                     ___lwdiv:
  2163  0348                     l1718:	
  2164                           ;incstack = 0
  2165                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2166                           
  2167  0348  1283               	bcf	3,5	;RP0=0, select bank0
  2168  0349  1303               	bcf	3,6	;RP1=0, select bank0
  2169  034A  01A5               	clrf	___lwdiv@quotient
  2170  034B  01A6               	clrf	___lwdiv@quotient+1
  2171  034C                     l1720:
  2172  034C  0820               	movf	___lwdiv@divisor,w
  2173  034D  0421               	iorwf	___lwdiv@divisor+1,w
  2174  034E  1903               	btfsc	3,2
  2175  034F  2B51               	goto	u1241
  2176  0350  2B52               	goto	u1240
  2177  0351                     u1241:
  2178  0351  2B89               	goto	l1740
  2179  0352                     u1240:
  2180  0352                     l1722:
  2181  0352  01A4               	clrf	___lwdiv@counter
  2182  0353  0AA4               	incf	___lwdiv@counter,f
  2183  0354  2B60               	goto	l1728
  2184  0355                     l1724:
  2185  0355  3001               	movlw	1
  2186  0356                     u1255:
  2187  0356  1003               	clrc
  2188  0357  0DA0               	rlf	___lwdiv@divisor,f
  2189  0358  0DA1               	rlf	___lwdiv@divisor+1,f
  2190  0359  3EFF               	addlw	-1
  2191  035A  1D03               	skipz
  2192  035B  2B56               	goto	u1255
  2193  035C                     l1726:
  2194  035C  3001               	movlw	1
  2195  035D  00F4               	movwf	??___lwdiv
  2196  035E  0874               	movf	??___lwdiv,w
  2197  035F  07A4               	addwf	___lwdiv@counter,f
  2198  0360                     l1728:
  2199  0360  1FA1               	btfss	___lwdiv@divisor+1,7
  2200  0361  2B63               	goto	u1261
  2201  0362  2B64               	goto	u1260
  2202  0363                     u1261:
  2203  0363  2B55               	goto	l1724
  2204  0364                     u1260:
  2205  0364                     l1730:
  2206  0364  3001               	movlw	1
  2207  0365                     u1275:
  2208  0365  1003               	clrc
  2209  0366  0DA5               	rlf	___lwdiv@quotient,f
  2210  0367  0DA6               	rlf	___lwdiv@quotient+1,f
  2211  0368  3EFF               	addlw	-1
  2212  0369  1D03               	skipz
  2213  036A  2B65               	goto	u1275
  2214  036B  0821               	movf	___lwdiv@divisor+1,w
  2215  036C  0223               	subwf	___lwdiv@dividend+1,w
  2216  036D  1D03               	skipz
  2217  036E  2B71               	goto	u1285
  2218  036F  0820               	movf	___lwdiv@divisor,w
  2219  0370  0222               	subwf	___lwdiv@dividend,w
  2220  0371                     u1285:
  2221  0371  1C03               	skipc
  2222  0372  2B74               	goto	u1281
  2223  0373  2B75               	goto	u1280
  2224  0374                     u1281:
  2225  0374  2B7C               	goto	l1736
  2226  0375                     u1280:
  2227  0375                     l1732:
  2228  0375  0820               	movf	___lwdiv@divisor,w
  2229  0376  02A2               	subwf	___lwdiv@dividend,f
  2230  0377  0821               	movf	___lwdiv@divisor+1,w
  2231  0378  1C03               	skipc
  2232  0379  03A3               	decf	___lwdiv@dividend+1,f
  2233  037A  02A3               	subwf	___lwdiv@dividend+1,f
  2234  037B                     l1734:
  2235  037B  1425               	bsf	___lwdiv@quotient,0
  2236  037C                     l1736:
  2237  037C  3001               	movlw	1
  2238  037D                     u1295:
  2239  037D  1003               	clrc
  2240  037E  0CA1               	rrf	___lwdiv@divisor+1,f
  2241  037F  0CA0               	rrf	___lwdiv@divisor,f
  2242  0380  3EFF               	addlw	-1
  2243  0381  1D03               	skipz
  2244  0382  2B7D               	goto	u1295
  2245  0383                     l1738:
  2246  0383  3001               	movlw	1
  2247  0384  02A4               	subwf	___lwdiv@counter,f
  2248  0385  1D03               	btfss	3,2
  2249  0386  2B88               	goto	u1301
  2250  0387  2B89               	goto	u1300
  2251  0388                     u1301:
  2252  0388  2B64               	goto	l1730
  2253  0389                     u1300:
  2254  0389                     l1740:
  2255  0389  0826               	movf	___lwdiv@quotient+1,w
  2256  038A  00A1               	movwf	?___lwdiv+1
  2257  038B  0825               	movf	___lwdiv@quotient,w
  2258  038C  00A0               	movwf	?___lwdiv
  2259  038D                     l582:
  2260  038D  0008               	return
  2261  038E                     __end_of___lwdiv:
  2262                           
  2263                           	psect	text11
  2264  029C                     __ptext11:	
  2265 ;; *************** function _divisor *****************
  2266 ;; Defined at:
  2267 ;;		line 175 in file "LAB2.c"
  2268 ;; Parameters:    Size  Location     Type
  2269 ;;  a               1    wreg     unsigned char 
  2270 ;;  dig             1    5[COMMON] PTR unsigned char 
  2271 ;;		 -> vol2(1), vol1(1), 
  2272 ;; Auto vars:     Size  Location     Type
  2273 ;;  a               1   10[BANK0 ] unsigned char 
  2274 ;;  i               2   13[BANK0 ] int 
  2275 ;;  b               2   11[BANK0 ] int 
  2276 ;; Return value:  Size  Location     Type
  2277 ;;                  1    wreg      void 
  2278 ;; Registers used:
  2279 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2280 ;; Tracked objects:
  2281 ;;		On entry : 0/0
  2282 ;;		On exit  : 0/0
  2283 ;;		Unchanged: 0/0
  2284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2285 ;;      Params:         1       0       0       0       0
  2286 ;;      Locals:         0       5       0       0       0
  2287 ;;      Temps:          0       2       0       0       0
  2288 ;;      Totals:         1       7       0       0       0
  2289 ;;Total ram usage:        8 bytes
  2290 ;; Hardware stack levels used: 1
  2291 ;; Hardware stack levels required when called: 3
  2292 ;; This function calls:
  2293 ;;		___awdiv
  2294 ;;		___awmod
  2295 ;; This function is called by:
  2296 ;;		_conversion_char
  2297 ;; This function uses a non-reentrant model
  2298 ;;
  2299                           
  2300                           
  2301                           ;psect for function _divisor
  2302  029C                     _divisor:
  2303                           
  2304                           ;incstack = 0
  2305                           ; Regs used in _divisor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2306                           ;divisor@a stored from wreg
  2307  029C  1283               	bcf	3,5	;RP0=0, select bank0
  2308  029D  1303               	bcf	3,6	;RP1=0, select bank0
  2309  029E  00AA               	movwf	divisor@a
  2310  029F                     l1764:
  2311                           
  2312                           ;LAB2.c: 176:     int b = 2*a;
  2313  029F  082A               	movf	divisor@a,w
  2314  02A0  00A8               	movwf	??_divisor
  2315  02A1  01A9               	clrf	??_divisor+1
  2316  02A2  1003               	clrc
  2317  02A3  0D28               	rlf	??_divisor,w
  2318  02A4  00AB               	movwf	divisor@b
  2319  02A5  0D29               	rlf	??_divisor+1,w
  2320  02A6  00AC               	movwf	divisor@b+1
  2321  02A7                     l1766:
  2322                           
  2323                           ;LAB2.c: 177:     for(int i = 0; i<3 ; i++){
  2324  02A7  01AD               	clrf	divisor@i
  2325  02A8  01AE               	clrf	divisor@i+1
  2326  02A9                     l1772:
  2327                           
  2328                           ;LAB2.c: 178:         dig[i] = b % 10;
  2329  02A9  300A               	movlw	10
  2330  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  2331  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  2332  02AC  00A0               	movwf	___awmod@divisor
  2333  02AD  3000               	movlw	0
  2334  02AE  00A1               	movwf	___awmod@divisor+1
  2335  02AF  082C               	movf	divisor@b+1,w
  2336  02B0  00A3               	movwf	___awmod@dividend+1
  2337  02B1  082B               	movf	divisor@b,w
  2338  02B2  00A2               	movwf	___awmod@dividend
  2339  02B3  120A  118A  2241  120A  118A  	fcall	___awmod
  2340  02B8  1283               	bcf	3,5	;RP0=0, select bank0
  2341  02B9  1303               	bcf	3,6	;RP1=0, select bank0
  2342  02BA  0820               	movf	?___awmod,w
  2343  02BB  00A8               	movwf	??_divisor
  2344  02BC  082D               	movf	divisor@i,w
  2345  02BD  0775               	addwf	divisor@dig,w
  2346  02BE  00A9               	movwf	??_divisor+1
  2347  02BF  0829               	movf	??_divisor+1,w
  2348  02C0  0084               	movwf	4
  2349  02C1  0828               	movf	??_divisor,w
  2350  02C2  1383               	bcf	3,7	;select IRP bank0
  2351  02C3  0080               	movwf	0
  2352                           
  2353                           ;LAB2.c: 179:         b = (b - dig[i])/10;
  2354  02C4  300A               	movlw	10
  2355  02C5  00A0               	movwf	___awdiv@divisor
  2356  02C6  3000               	movlw	0
  2357  02C7  00A1               	movwf	___awdiv@divisor+1
  2358  02C8  082D               	movf	divisor@i,w
  2359  02C9  0775               	addwf	divisor@dig,w
  2360  02CA  00A8               	movwf	??_divisor
  2361  02CB  0828               	movf	??_divisor,w
  2362  02CC  0084               	movwf	4
  2363  02CD  0800               	movf	0,w
  2364  02CE  022B               	subwf	divisor@b,w
  2365  02CF  00A2               	movwf	___awdiv@dividend
  2366  02D0  082C               	movf	divisor@b+1,w
  2367  02D1  1C03               	skipc
  2368  02D2  032C               	decf	divisor@b+1,w
  2369  02D3  00A3               	movwf	___awdiv@dividend+1
  2370  02D4  120A  118A  217D  120A  118A  	fcall	___awdiv
  2371  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  2372  02DA  1303               	bcf	3,6	;RP1=0, select bank0
  2373  02DB  0821               	movf	?___awdiv+1,w
  2374  02DC  00AC               	movwf	divisor@b+1
  2375  02DD  0820               	movf	?___awdiv,w
  2376  02DE  00AB               	movwf	divisor@b
  2377  02DF                     l1774:
  2378                           
  2379                           ;LAB2.c: 180:     }
  2380  02DF  3001               	movlw	1
  2381  02E0  07AD               	addwf	divisor@i,f
  2382  02E1  1803               	skipnc
  2383  02E2  0AAE               	incf	divisor@i+1,f
  2384  02E3  3000               	movlw	0
  2385  02E4  07AE               	addwf	divisor@i+1,f
  2386  02E5                     l1776:
  2387  02E5  082E               	movf	divisor@i+1,w
  2388  02E6  3A80               	xorlw	128
  2389  02E7  00FF               	movwf	btemp+1
  2390  02E8  3080               	movlw	128
  2391  02E9  027F               	subwf	btemp+1,w
  2392  02EA  1D03               	skipz
  2393  02EB  2AEE               	goto	u1315
  2394  02EC  3003               	movlw	3
  2395  02ED  022D               	subwf	divisor@i,w
  2396  02EE                     u1315:
  2397  02EE  1C03               	skipc
  2398  02EF  2AF1               	goto	u1311
  2399  02F0  2AF2               	goto	u1310
  2400  02F1                     u1311:
  2401  02F1  2AA9               	goto	l1772
  2402  02F2                     u1310:
  2403  02F2                     l118:
  2404  02F2  0008               	return
  2405  02F3                     __end_of_divisor:
  2406                           
  2407                           	psect	text12
  2408  0241                     __ptext12:	
  2409 ;; *************** function ___awmod *****************
  2410 ;; Defined at:
  2411 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awmod.c"
  2412 ;; Parameters:    Size  Location     Type
  2413 ;;  divisor         2    0[BANK0 ] int 
  2414 ;;  dividend        2    2[BANK0 ] int 
  2415 ;; Auto vars:     Size  Location     Type
  2416 ;;  sign            1    5[BANK0 ] unsigned char 
  2417 ;;  counter         1    4[BANK0 ] unsigned char 
  2418 ;; Return value:  Size  Location     Type
  2419 ;;                  2    0[BANK0 ] int 
  2420 ;; Registers used:
  2421 ;;		wreg, status,2, status,0
  2422 ;; Tracked objects:
  2423 ;;		On entry : 0/0
  2424 ;;		On exit  : 0/0
  2425 ;;		Unchanged: 0/0
  2426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2427 ;;      Params:         0       4       0       0       0
  2428 ;;      Locals:         0       2       0       0       0
  2429 ;;      Temps:          1       0       0       0       0
  2430 ;;      Totals:         1       6       0       0       0
  2431 ;;Total ram usage:        7 bytes
  2432 ;; Hardware stack levels used: 1
  2433 ;; Hardware stack levels required when called: 2
  2434 ;; This function calls:
  2435 ;;		Nothing
  2436 ;; This function is called by:
  2437 ;;		_divisor
  2438 ;; This function uses a non-reentrant model
  2439 ;;
  2440                           
  2441                           
  2442                           ;psect for function ___awmod
  2443  0241                     ___awmod:
  2444  0241                     l1680:	
  2445                           ;incstack = 0
  2446                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2447                           
  2448  0241  1283               	bcf	3,5	;RP0=0, select bank0
  2449  0242  1303               	bcf	3,6	;RP1=0, select bank0
  2450  0243  01A5               	clrf	___awmod@sign
  2451  0244                     l1682:
  2452  0244  1FA3               	btfss	___awmod@dividend+1,7
  2453  0245  2A47               	goto	u1151
  2454  0246  2A48               	goto	u1150
  2455  0247                     u1151:
  2456  0247  2A4F               	goto	l1688
  2457  0248                     u1150:
  2458  0248                     l1684:
  2459  0248  09A2               	comf	___awmod@dividend,f
  2460  0249  09A3               	comf	___awmod@dividend+1,f
  2461  024A  0AA2               	incf	___awmod@dividend,f
  2462  024B  1903               	skipnz
  2463  024C  0AA3               	incf	___awmod@dividend+1,f
  2464  024D                     l1686:
  2465  024D  01A5               	clrf	___awmod@sign
  2466  024E  0AA5               	incf	___awmod@sign,f
  2467  024F                     l1688:
  2468  024F  1FA1               	btfss	___awmod@divisor+1,7
  2469  0250  2A52               	goto	u1161
  2470  0251  2A53               	goto	u1160
  2471  0252                     u1161:
  2472  0252  2A58               	goto	l1692
  2473  0253                     u1160:
  2474  0253                     l1690:
  2475  0253  09A0               	comf	___awmod@divisor,f
  2476  0254  09A1               	comf	___awmod@divisor+1,f
  2477  0255  0AA0               	incf	___awmod@divisor,f
  2478  0256  1903               	skipnz
  2479  0257  0AA1               	incf	___awmod@divisor+1,f
  2480  0258                     l1692:
  2481  0258  0820               	movf	___awmod@divisor,w
  2482  0259  0421               	iorwf	___awmod@divisor+1,w
  2483  025A  1903               	btfsc	3,2
  2484  025B  2A5D               	goto	u1171
  2485  025C  2A5E               	goto	u1170
  2486  025D                     u1171:
  2487  025D  2A8D               	goto	l1710
  2488  025E                     u1170:
  2489  025E                     l1694:
  2490  025E  01A4               	clrf	___awmod@counter
  2491  025F  0AA4               	incf	___awmod@counter,f
  2492  0260  2A6C               	goto	l1700
  2493  0261                     l1696:
  2494  0261  3001               	movlw	1
  2495  0262                     u1185:
  2496  0262  1003               	clrc
  2497  0263  0DA0               	rlf	___awmod@divisor,f
  2498  0264  0DA1               	rlf	___awmod@divisor+1,f
  2499  0265  3EFF               	addlw	-1
  2500  0266  1D03               	skipz
  2501  0267  2A62               	goto	u1185
  2502  0268                     l1698:
  2503  0268  3001               	movlw	1
  2504  0269  00F4               	movwf	??___awmod
  2505  026A  0874               	movf	??___awmod,w
  2506  026B  07A4               	addwf	___awmod@counter,f
  2507  026C                     l1700:
  2508  026C  1FA1               	btfss	___awmod@divisor+1,7
  2509  026D  2A6F               	goto	u1191
  2510  026E  2A70               	goto	u1190
  2511  026F                     u1191:
  2512  026F  2A61               	goto	l1696
  2513  0270                     u1190:
  2514  0270                     l1702:
  2515  0270  0821               	movf	___awmod@divisor+1,w
  2516  0271  0223               	subwf	___awmod@dividend+1,w
  2517  0272  1D03               	skipz
  2518  0273  2A76               	goto	u1205
  2519  0274  0820               	movf	___awmod@divisor,w
  2520  0275  0222               	subwf	___awmod@dividend,w
  2521  0276                     u1205:
  2522  0276  1C03               	skipc
  2523  0277  2A79               	goto	u1201
  2524  0278  2A7A               	goto	u1200
  2525  0279                     u1201:
  2526  0279  2A80               	goto	l1706
  2527  027A                     u1200:
  2528  027A                     l1704:
  2529  027A  0820               	movf	___awmod@divisor,w
  2530  027B  02A2               	subwf	___awmod@dividend,f
  2531  027C  0821               	movf	___awmod@divisor+1,w
  2532  027D  1C03               	skipc
  2533  027E  03A3               	decf	___awmod@dividend+1,f
  2534  027F  02A3               	subwf	___awmod@dividend+1,f
  2535  0280                     l1706:
  2536  0280  3001               	movlw	1
  2537  0281                     u1215:
  2538  0281  1003               	clrc
  2539  0282  0CA1               	rrf	___awmod@divisor+1,f
  2540  0283  0CA0               	rrf	___awmod@divisor,f
  2541  0284  3EFF               	addlw	-1
  2542  0285  1D03               	skipz
  2543  0286  2A81               	goto	u1215
  2544  0287                     l1708:
  2545  0287  3001               	movlw	1
  2546  0288  02A4               	subwf	___awmod@counter,f
  2547  0289  1D03               	btfss	3,2
  2548  028A  2A8C               	goto	u1221
  2549  028B  2A8D               	goto	u1220
  2550  028C                     u1221:
  2551  028C  2A70               	goto	l1702
  2552  028D                     u1220:
  2553  028D                     l1710:
  2554  028D  0825               	movf	___awmod@sign,w
  2555  028E  1903               	btfsc	3,2
  2556  028F  2A91               	goto	u1231
  2557  0290  2A92               	goto	u1230
  2558  0291                     u1231:
  2559  0291  2A97               	goto	l1714
  2560  0292                     u1230:
  2561  0292                     l1712:
  2562  0292  09A2               	comf	___awmod@dividend,f
  2563  0293  09A3               	comf	___awmod@dividend+1,f
  2564  0294  0AA2               	incf	___awmod@dividend,f
  2565  0295  1903               	skipnz
  2566  0296  0AA3               	incf	___awmod@dividend+1,f
  2567  0297                     l1714:
  2568  0297  0823               	movf	___awmod@dividend+1,w
  2569  0298  00A1               	movwf	?___awmod+1
  2570  0299  0822               	movf	___awmod@dividend,w
  2571  029A  00A0               	movwf	?___awmod
  2572  029B                     l476:
  2573  029B  0008               	return
  2574  029C                     __end_of___awmod:
  2575                           
  2576                           	psect	text13
  2577  017D                     __ptext13:	
  2578 ;; *************** function ___awdiv *****************
  2579 ;; Defined at:
  2580 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awdiv.c"
  2581 ;; Parameters:    Size  Location     Type
  2582 ;;  divisor         2    0[BANK0 ] int 
  2583 ;;  dividend        2    2[BANK0 ] int 
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;  quotient        2    6[BANK0 ] int 
  2586 ;;  sign            1    5[BANK0 ] unsigned char 
  2587 ;;  counter         1    4[BANK0 ] unsigned char 
  2588 ;; Return value:  Size  Location     Type
  2589 ;;                  2    0[BANK0 ] int 
  2590 ;; Registers used:
  2591 ;;		wreg, status,2, status,0
  2592 ;; Tracked objects:
  2593 ;;		On entry : 0/0
  2594 ;;		On exit  : 0/0
  2595 ;;		Unchanged: 0/0
  2596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2597 ;;      Params:         0       4       0       0       0
  2598 ;;      Locals:         0       4       0       0       0
  2599 ;;      Temps:          1       0       0       0       0
  2600 ;;      Totals:         1       8       0       0       0
  2601 ;;Total ram usage:        9 bytes
  2602 ;; Hardware stack levels used: 1
  2603 ;; Hardware stack levels required when called: 2
  2604 ;; This function calls:
  2605 ;;		Nothing
  2606 ;; This function is called by:
  2607 ;;		_divisor
  2608 ;; This function uses a non-reentrant model
  2609 ;;
  2610                           
  2611                           
  2612                           ;psect for function ___awdiv
  2613  017D                     ___awdiv:
  2614  017D                     l1636:	
  2615                           ;incstack = 0
  2616                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2617                           
  2618  017D  1283               	bcf	3,5	;RP0=0, select bank0
  2619  017E  1303               	bcf	3,6	;RP1=0, select bank0
  2620  017F  01A5               	clrf	___awdiv@sign
  2621  0180                     l1638:
  2622  0180  1FA1               	btfss	___awdiv@divisor+1,7
  2623  0181  2983               	goto	u1051
  2624  0182  2984               	goto	u1050
  2625  0183                     u1051:
  2626  0183  298B               	goto	l1644
  2627  0184                     u1050:
  2628  0184                     l1640:
  2629  0184  09A0               	comf	___awdiv@divisor,f
  2630  0185  09A1               	comf	___awdiv@divisor+1,f
  2631  0186  0AA0               	incf	___awdiv@divisor,f
  2632  0187  1903               	skipnz
  2633  0188  0AA1               	incf	___awdiv@divisor+1,f
  2634  0189                     l1642:
  2635  0189  01A5               	clrf	___awdiv@sign
  2636  018A  0AA5               	incf	___awdiv@sign,f
  2637  018B                     l1644:
  2638  018B  1FA3               	btfss	___awdiv@dividend+1,7
  2639  018C  298E               	goto	u1061
  2640  018D  298F               	goto	u1060
  2641  018E                     u1061:
  2642  018E  2998               	goto	l1650
  2643  018F                     u1060:
  2644  018F                     l1646:
  2645  018F  09A2               	comf	___awdiv@dividend,f
  2646  0190  09A3               	comf	___awdiv@dividend+1,f
  2647  0191  0AA2               	incf	___awdiv@dividend,f
  2648  0192  1903               	skipnz
  2649  0193  0AA3               	incf	___awdiv@dividend+1,f
  2650  0194                     l1648:
  2651  0194  3001               	movlw	1
  2652  0195  00F4               	movwf	??___awdiv
  2653  0196  0874               	movf	??___awdiv,w
  2654  0197  06A5               	xorwf	___awdiv@sign,f
  2655  0198                     l1650:
  2656  0198  01A6               	clrf	___awdiv@quotient
  2657  0199  01A7               	clrf	___awdiv@quotient+1
  2658  019A                     l1652:
  2659  019A  0820               	movf	___awdiv@divisor,w
  2660  019B  0421               	iorwf	___awdiv@divisor+1,w
  2661  019C  1903               	btfsc	3,2
  2662  019D  299F               	goto	u1071
  2663  019E  29A0               	goto	u1070
  2664  019F                     u1071:
  2665  019F  29D7               	goto	l1672
  2666  01A0                     u1070:
  2667  01A0                     l1654:
  2668  01A0  01A4               	clrf	___awdiv@counter
  2669  01A1  0AA4               	incf	___awdiv@counter,f
  2670  01A2  29AE               	goto	l1660
  2671  01A3                     l1656:
  2672  01A3  3001               	movlw	1
  2673  01A4                     u1085:
  2674  01A4  1003               	clrc
  2675  01A5  0DA0               	rlf	___awdiv@divisor,f
  2676  01A6  0DA1               	rlf	___awdiv@divisor+1,f
  2677  01A7  3EFF               	addlw	-1
  2678  01A8  1D03               	skipz
  2679  01A9  29A4               	goto	u1085
  2680  01AA                     l1658:
  2681  01AA  3001               	movlw	1
  2682  01AB  00F4               	movwf	??___awdiv
  2683  01AC  0874               	movf	??___awdiv,w
  2684  01AD  07A4               	addwf	___awdiv@counter,f
  2685  01AE                     l1660:
  2686  01AE  1FA1               	btfss	___awdiv@divisor+1,7
  2687  01AF  29B1               	goto	u1091
  2688  01B0  29B2               	goto	u1090
  2689  01B1                     u1091:
  2690  01B1  29A3               	goto	l1656
  2691  01B2                     u1090:
  2692  01B2                     l1662:
  2693  01B2  3001               	movlw	1
  2694  01B3                     u1105:
  2695  01B3  1003               	clrc
  2696  01B4  0DA6               	rlf	___awdiv@quotient,f
  2697  01B5  0DA7               	rlf	___awdiv@quotient+1,f
  2698  01B6  3EFF               	addlw	-1
  2699  01B7  1D03               	skipz
  2700  01B8  29B3               	goto	u1105
  2701  01B9  0821               	movf	___awdiv@divisor+1,w
  2702  01BA  0223               	subwf	___awdiv@dividend+1,w
  2703  01BB  1D03               	skipz
  2704  01BC  29BF               	goto	u1115
  2705  01BD  0820               	movf	___awdiv@divisor,w
  2706  01BE  0222               	subwf	___awdiv@dividend,w
  2707  01BF                     u1115:
  2708  01BF  1C03               	skipc
  2709  01C0  29C2               	goto	u1111
  2710  01C1  29C3               	goto	u1110
  2711  01C2                     u1111:
  2712  01C2  29CA               	goto	l1668
  2713  01C3                     u1110:
  2714  01C3                     l1664:
  2715  01C3  0820               	movf	___awdiv@divisor,w
  2716  01C4  02A2               	subwf	___awdiv@dividend,f
  2717  01C5  0821               	movf	___awdiv@divisor+1,w
  2718  01C6  1C03               	skipc
  2719  01C7  03A3               	decf	___awdiv@dividend+1,f
  2720  01C8  02A3               	subwf	___awdiv@dividend+1,f
  2721  01C9                     l1666:
  2722  01C9  1426               	bsf	___awdiv@quotient,0
  2723  01CA                     l1668:
  2724  01CA  3001               	movlw	1
  2725  01CB                     u1125:
  2726  01CB  1003               	clrc
  2727  01CC  0CA1               	rrf	___awdiv@divisor+1,f
  2728  01CD  0CA0               	rrf	___awdiv@divisor,f
  2729  01CE  3EFF               	addlw	-1
  2730  01CF  1D03               	skipz
  2731  01D0  29CB               	goto	u1125
  2732  01D1                     l1670:
  2733  01D1  3001               	movlw	1
  2734  01D2  02A4               	subwf	___awdiv@counter,f
  2735  01D3  1D03               	btfss	3,2
  2736  01D4  29D6               	goto	u1131
  2737  01D5  29D7               	goto	u1130
  2738  01D6                     u1131:
  2739  01D6  29B2               	goto	l1662
  2740  01D7                     u1130:
  2741  01D7                     l1672:
  2742  01D7  0825               	movf	___awdiv@sign,w
  2743  01D8  1903               	btfsc	3,2
  2744  01D9  29DB               	goto	u1141
  2745  01DA  29DC               	goto	u1140
  2746  01DB                     u1141:
  2747  01DB  29E1               	goto	l1676
  2748  01DC                     u1140:
  2749  01DC                     l1674:
  2750  01DC  09A6               	comf	___awdiv@quotient,f
  2751  01DD  09A7               	comf	___awdiv@quotient+1,f
  2752  01DE  0AA6               	incf	___awdiv@quotient,f
  2753  01DF  1903               	skipnz
  2754  01E0  0AA7               	incf	___awdiv@quotient+1,f
  2755  01E1                     l1676:
  2756  01E1  0827               	movf	___awdiv@quotient+1,w
  2757  01E2  00A1               	movwf	?___awdiv+1
  2758  01E3  0826               	movf	___awdiv@quotient,w
  2759  01E4  00A0               	movwf	?___awdiv
  2760  01E5                     l463:
  2761  01E5  0008               	return
  2762  01E6                     __end_of___awdiv:
  2763                           
  2764                           	psect	text14
  2765  042C                     __ptext14:	
  2766 ;; *************** function _conversion *****************
  2767 ;; Defined at:
  2768 ;;		line 21 in file "ADC.c"
  2769 ;; Parameters:    Size  Location     Type
  2770 ;;		None
  2771 ;; Auto vars:     Size  Location     Type
  2772 ;;		None
  2773 ;; Return value:  Size  Location     Type
  2774 ;;                  1    wreg      void 
  2775 ;; Registers used:
  2776 ;;		wreg, status,2, status,0
  2777 ;; Tracked objects:
  2778 ;;		On entry : 0/0
  2779 ;;		On exit  : 0/0
  2780 ;;		Unchanged: 0/0
  2781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2782 ;;      Params:         0       0       0       0       0
  2783 ;;      Locals:         0       0       0       0       0
  2784 ;;      Temps:          1       0       0       0       0
  2785 ;;      Totals:         1       0       0       0       0
  2786 ;;Total ram usage:        1 bytes
  2787 ;; Hardware stack levels used: 1
  2788 ;; Hardware stack levels required when called: 2
  2789 ;; This function calls:
  2790 ;;		Nothing
  2791 ;; This function is called by:
  2792 ;;		_main
  2793 ;; This function uses a non-reentrant model
  2794 ;;
  2795                           
  2796                           
  2797                           ;psect for function _conversion
  2798  042C                     _conversion:
  2799  042C                     l1530:	
  2800                           ;incstack = 0
  2801                           ; Regs used in _conversion: [wreg+status,2+status,0]
  2802                           
  2803                           
  2804                           ;ADC.c: 22:     if(ADCON0bits.GO == 0){
  2805  042C  1283               	bcf	3,5	;RP0=0, select bank0
  2806  042D  1303               	bcf	3,6	;RP1=0, select bank0
  2807  042E  189F               	btfsc	31,1	;volatile
  2808  042F  2C31               	goto	u951
  2809  0430  2C32               	goto	u950
  2810  0431                     u951:
  2811  0431  2C57               	goto	l196
  2812  0432                     u950:
  2813  0432                     l1532:
  2814                           
  2815                           ;ADC.c: 23:         if(ADCON0bits.CHS == 1){
  2816  0432  0C1F               	rrf	31,w	;volatile
  2817  0433  00F4               	movwf	??_conversion
  2818  0434  0C74               	rrf	??_conversion,w
  2819  0435  390F               	andlw	15
  2820  0436  3A01               	xorlw	1
  2821  0437  1D03               	skipz
  2822  0438  2C3A               	goto	u961
  2823  0439  2C3B               	goto	u960
  2824  043A                     u961:
  2825  043A  2C42               	goto	l1538
  2826  043B                     u960:
  2827  043B                     l1534:
  2828                           
  2829                           ;ADC.c: 24:             ADCON0bits.CHS = 0;
  2830  043B  30C3               	movlw	-61
  2831  043C  059F               	andwf	31,f	;volatile
  2832  043D                     l1536:
  2833                           
  2834                           ;ADC.c: 25:             _delay((unsigned long)((50)*(8000000/4000000.0)));
  2835  043D  3021               	movlw	33
  2836  043E  00F4               	movwf	??_conversion
  2837  043F                     u1447:
  2838  043F  0BF4               	decfsz	??_conversion,f
  2839  0440  2C3F               	goto	u1447
  2840                           
  2841                           ;ADC.c: 26:         }
  2842  0441  2C50               	goto	l1544
  2843  0442                     l1538:
  2844  0442  0C1F               	rrf	31,w	;volatile
  2845  0443  00F4               	movwf	??_conversion
  2846  0444  0C74               	rrf	??_conversion,w
  2847  0445  390F               	andlw	15
  2848  0446  3A00               	xorlw	0
  2849  0447  1D03               	skipz
  2850  0448  2C4A               	goto	u971
  2851  0449  2C4B               	goto	u970
  2852  044A                     u971:
  2853  044A  2C50               	goto	l1544
  2854  044B                     u970:
  2855  044B                     l1540:
  2856                           
  2857                           ;ADC.c: 28:             ADCON0bits.CHS = 1;
  2858  044B  081F               	movf	31,w	;volatile
  2859  044C  39C3               	andlw	-61
  2860  044D  3804               	iorlw	4
  2861  044E  009F               	movwf	31	;volatile
  2862  044F  2C3D               	goto	l1536
  2863  0450                     l1544:
  2864                           
  2865                           ;ADC.c: 31:         _delay((unsigned long)((50)*(8000000/4000000.0)));
  2866  0450  3021               	movlw	33
  2867  0451  00F4               	movwf	??_conversion
  2868  0452                     u1457:
  2869  0452  0BF4               	decfsz	??_conversion,f
  2870  0453  2C52               	goto	u1457
  2871  0454                     l1546:
  2872                           
  2873                           ;ADC.c: 32:         ADCON0bits.GO = 1;
  2874  0454  1283               	bcf	3,5	;RP0=0, select bank0
  2875  0455  1303               	bcf	3,6	;RP1=0, select bank0
  2876  0456  149F               	bsf	31,1	;volatile
  2877  0457                     l196:
  2878  0457  0008               	return
  2879  0458                     __end_of_conversion:
  2880                           
  2881                           	psect	text15
  2882  0458                     __ptext15:	
  2883 ;; *************** function _Escribir_stringLCD *****************
  2884 ;; Defined at:
  2885 ;;		line 46 in file "LCD.c"
  2886 ;; Parameters:    Size  Location     Type
  2887 ;;  d               2    0[BANK0 ] PTR const unsigned char 
  2888 ;;		 -> buffer3(10), buffer2(10), buffer1(10), STR_1(17), 
  2889 ;; Auto vars:     Size  Location     Type
  2890 ;;		None
  2891 ;; Return value:  Size  Location     Type
  2892 ;;                  1    wreg      void 
  2893 ;; Registers used:
  2894 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2895 ;; Tracked objects:
  2896 ;;		On entry : 0/0
  2897 ;;		On exit  : 0/0
  2898 ;;		Unchanged: 0/0
  2899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2900 ;;      Params:         0       2       0       0       0
  2901 ;;      Locals:         0       0       0       0       0
  2902 ;;      Temps:          0       0       0       0       0
  2903 ;;      Totals:         0       2       0       0       0
  2904 ;;Total ram usage:        2 bytes
  2905 ;; Hardware stack levels used: 1
  2906 ;; Hardware stack levels required when called: 4
  2907 ;; This function calls:
  2908 ;;		_Escribir_datosLCD
  2909 ;; This function is called by:
  2910 ;;		_main
  2911 ;; This function uses a non-reentrant model
  2912 ;;
  2913                           
  2914                           
  2915                           ;psect for function _Escribir_stringLCD
  2916  0458                     _Escribir_stringLCD:
  2917  0458                     l1912:	
  2918                           ;incstack = 0
  2919                           ; Regs used in _Escribir_stringLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2920                           
  2921                           
  2922                           ;LCD.c: 47:     while(*d){
  2923  0458  2C6F               	goto	l1918
  2924  0459                     l1914:
  2925                           
  2926                           ;LCD.c: 48:         Escribir_datosLCD(*d++);
  2927  0459  0821               	movf	Escribir_stringLCD@d+1,w
  2928  045A  00FF               	movwf	btemp+1
  2929  045B  0820               	movf	Escribir_stringLCD@d,w
  2930  045C  0084               	movwf	4
  2931  045D  120A  118A  23CA  120A  118A  	fcall	stringtab
  2932  0462  120A  118A  2527  120A  118A  	fcall	_Escribir_datosLCD
  2933  0467                     l1916:
  2934  0467  3001               	movlw	1
  2935  0468  1283               	bcf	3,5	;RP0=0, select bank0
  2936  0469  1303               	bcf	3,6	;RP1=0, select bank0
  2937  046A  07A0               	addwf	Escribir_stringLCD@d,f
  2938  046B  1803               	skipnc
  2939  046C  0AA1               	incf	Escribir_stringLCD@d+1,f
  2940  046D  3000               	movlw	0
  2941  046E  07A1               	addwf	Escribir_stringLCD@d+1,f
  2942  046F                     l1918:
  2943                           
  2944                           ;LCD.c: 47:     while(*d){
  2945  046F  1283               	bcf	3,5	;RP0=0, select bank0
  2946  0470  1303               	bcf	3,6	;RP1=0, select bank0
  2947  0471  0821               	movf	Escribir_stringLCD@d+1,w
  2948  0472  00FF               	movwf	btemp+1
  2949  0473  0820               	movf	Escribir_stringLCD@d,w
  2950  0474  0084               	movwf	4
  2951  0475  120A  118A  23CA  120A  118A  	fcall	stringtab
  2952  047A  3A00               	xorlw	0
  2953  047B  1D03               	skipz
  2954  047C  2C7E               	goto	u1411
  2955  047D  2C7F               	goto	u1410
  2956  047E                     u1411:
  2957  047E  2C59               	goto	l1914
  2958  047F                     u1410:
  2959  047F                     l153:
  2960  047F  0008               	return
  2961  0480                     __end_of_Escribir_stringLCD:
  2962                           
  2963                           	psect	text16
  2964  0527                     __ptext16:	
  2965 ;; *************** function _Escribir_datosLCD *****************
  2966 ;; Defined at:
  2967 ;;		line 25 in file "LCD.c"
  2968 ;; Parameters:    Size  Location     Type
  2969 ;;  LCDchar         1    wreg     unsigned char 
  2970 ;; Auto vars:     Size  Location     Type
  2971 ;;  LCDchar         1    5[COMMON] unsigned char 
  2972 ;; Return value:  Size  Location     Type
  2973 ;;                  1    wreg      void 
  2974 ;; Registers used:
  2975 ;;		wreg, status,2, status,0, pclath, cstack
  2976 ;; Tracked objects:
  2977 ;;		On entry : 0/0
  2978 ;;		On exit  : 0/0
  2979 ;;		Unchanged: 0/0
  2980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2981 ;;      Params:         0       0       0       0       0
  2982 ;;      Locals:         1       0       0       0       0
  2983 ;;      Temps:          0       0       0       0       0
  2984 ;;      Totals:         1       0       0       0       0
  2985 ;;Total ram usage:        1 bytes
  2986 ;; Hardware stack levels used: 1
  2987 ;; Hardware stack levels required when called: 3
  2988 ;; This function calls:
  2989 ;;		_prender_ELCD
  2990 ;; This function is called by:
  2991 ;;		_Escribir_stringLCD
  2992 ;; This function uses a non-reentrant model
  2993 ;;
  2994                           
  2995                           
  2996                           ;psect for function _Escribir_datosLCD
  2997  0527                     _Escribir_datosLCD:
  2998                           
  2999                           ;incstack = 0
  3000                           ; Regs used in _Escribir_datosLCD: [wreg+status,2+status,0+pclath+cstack]
  3001                           ;Escribir_datosLCD@LCDchar stored from wreg
  3002  0527  00F5               	movwf	Escribir_datosLCD@LCDchar
  3003  0528                     l1840:
  3004                           
  3005                           ;LCD.c: 26:     RC0 = 1;
  3006  0528  1283               	bcf	3,5	;RP0=0, select bank0
  3007  0529  1303               	bcf	3,6	;RP1=0, select bank0
  3008  052A  1407               	bsf	7,0	;volatile
  3009  052B                     l1842:
  3010                           
  3011                           ;LCD.c: 27:     PORTD = LCDchar;
  3012  052B  0875               	movf	Escribir_datosLCD@LCDchar,w
  3013  052C  0088               	movwf	8	;volatile
  3014  052D                     l1844:
  3015                           
  3016                           ;LCD.c: 29:     prender_ELCD();
  3017  052D  120A  118A  24E0  120A  118A  	fcall	_prender_ELCD
  3018  0532                     l144:
  3019  0532  0008               	return
  3020  0533                     __end_of_Escribir_datosLCD:
  3021                           
  3022                           	psect	text17
  3023  04E0                     __ptext17:	
  3024 ;; *************** function _prender_ELCD *****************
  3025 ;; Defined at:
  3026 ;;		line 11 in file "LCD.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;		None
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;		None
  3031 ;; Return value:  Size  Location     Type
  3032 ;;                  1    wreg      void 
  3033 ;; Registers used:
  3034 ;;		wreg
  3035 ;; Tracked objects:
  3036 ;;		On entry : 0/0
  3037 ;;		On exit  : 0/0
  3038 ;;		Unchanged: 0/0
  3039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3040 ;;      Params:         0       0       0       0       0
  3041 ;;      Locals:         0       0       0       0       0
  3042 ;;      Temps:          1       0       0       0       0
  3043 ;;      Totals:         1       0       0       0       0
  3044 ;;Total ram usage:        1 bytes
  3045 ;; Hardware stack levels used: 1
  3046 ;; Hardware stack levels required when called: 2
  3047 ;; This function calls:
  3048 ;;		Nothing
  3049 ;; This function is called by:
  3050 ;;		_Escribir_comandoLCD
  3051 ;;		_Escribir_datosLCD
  3052 ;; This function uses a non-reentrant model
  3053 ;;
  3054                           
  3055                           
  3056                           ;psect for function _prender_ELCD
  3057  04E0                     _prender_ELCD:
  3058  04E0                     l1624:	
  3059                           ;incstack = 0
  3060                           ; Regs used in _prender_ELCD: [wreg]
  3061                           
  3062                           
  3063                           ;LCD.c: 12:     RC1 = 1;
  3064  04E0  1283               	bcf	3,5	;RP0=0, select bank0
  3065  04E1  1303               	bcf	3,6	;RP1=0, select bank0
  3066  04E2  1487               	bsf	7,1	;volatile
  3067  04E3                     l1626:
  3068                           
  3069                           ;LCD.c: 13:     _delay((unsigned long)((500)*(8000000/4000000.0)));
  3070  04E3  30C7               	movlw	199
  3071  04E4  00F4               	movwf	??_prender_ELCD
  3072  04E5                     u1467:
  3073  04E5  2CE6               	nop2
  3074  04E6  0BF4               	decfsz	??_prender_ELCD,f
  3075  04E7  2CE5               	goto	u1467
  3076  04E8  2CE9               	nop2
  3077  04E9  2CEA               	nop2
  3078  04EA                     l1628:
  3079                           
  3080                           ;LCD.c: 14:     RC1 = 0;
  3081  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  3082  04EB  1303               	bcf	3,6	;RP1=0, select bank0
  3083  04EC  1087               	bcf	7,1	;volatile
  3084                           
  3085                           ;LCD.c: 15:     _delay((unsigned long)((500)*(8000000/4000000.0)));
  3086  04ED  30C7               	movlw	199
  3087  04EE  00F4               	movwf	??_prender_ELCD
  3088  04EF                     u1477:
  3089  04EF  2CF0               	nop2
  3090  04F0  0BF4               	decfsz	??_prender_ELCD,f
  3091  04F1  2CEF               	goto	u1477
  3092  04F2  2CF3               	nop2
  3093  04F3  2CF4               	nop2
  3094  04F4                     l138:
  3095  04F4  0008               	return
  3096  04F5                     __end_of_prender_ELCD:
  3097                           
  3098                           	psect	text18
  3099  03FD                     __ptext18:	
  3100 ;; *************** function _isr *****************
  3101 ;; Defined at:
  3102 ;;		line 65 in file "LAB2.c"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;		None
  3105 ;; Auto vars:     Size  Location     Type
  3106 ;;		None
  3107 ;; Return value:  Size  Location     Type
  3108 ;;                  1    wreg      void 
  3109 ;; Registers used:
  3110 ;;		wreg, status,2, status,0, pclath, cstack
  3111 ;; Tracked objects:
  3112 ;;		On entry : 0/0
  3113 ;;		On exit  : 0/0
  3114 ;;		Unchanged: 0/0
  3115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3116 ;;      Params:         0       0       0       0       0
  3117 ;;      Locals:         0       0       0       0       0
  3118 ;;      Temps:          3       0       0       0       0
  3119 ;;      Totals:         3       0       0       0       0
  3120 ;;Total ram usage:        3 bytes
  3121 ;; Hardware stack levels used: 1
  3122 ;; Hardware stack levels required when called: 1
  3123 ;; This function calls:
  3124 ;;		_ADC
  3125 ;; This function is called by:
  3126 ;;		Interrupt level 1
  3127 ;; This function uses a non-reentrant model
  3128 ;;
  3129                           
  3130                           
  3131                           ;psect for function _isr
  3132  03FD                     _isr:
  3133  03FD                     i1l1568:
  3134                           
  3135                           ;LAB2.c: 66:     if(PIR1bits.ADIF){
  3136  03FD  1283               	bcf	3,5	;RP0=0, select bank0
  3137  03FE  1303               	bcf	3,6	;RP1=0, select bank0
  3138  03FF  1F0C               	btfss	12,6	;volatile
  3139  0400  2C02               	goto	u101_21
  3140  0401  2C03               	goto	u101_20
  3141  0402                     u101_21:
  3142  0402  2C0B               	goto	i1l1574
  3143  0403                     u101_20:
  3144  0403                     i1l1570:
  3145                           
  3146                           ;LAB2.c: 67:         ADC();
  3147  0403  120A  118A  24C2  120A  118A  	fcall	_ADC
  3148  0408                     i1l1572:
  3149                           
  3150                           ;LAB2.c: 68:         PIR1bits.ADIF = 0;
  3151  0408  1283               	bcf	3,5	;RP0=0, select bank0
  3152  0409  1303               	bcf	3,6	;RP1=0, select bank0
  3153  040A  130C               	bcf	12,6	;volatile
  3154  040B                     i1l1574:
  3155                           
  3156                           ;LAB2.c: 70:     if(PIR1bits.RCIF){
  3157  040B  1E8C               	btfss	12,5	;volatile
  3158  040C  2C0E               	goto	u102_21
  3159  040D  2C0F               	goto	u102_20
  3160  040E                     u102_21:
  3161  040E  2C25               	goto	i1l99
  3162  040F                     u102_20:
  3163  040F                     i1l1576:
  3164                           
  3165                           ;LAB2.c: 71:         dato = RCREG;
  3166  040F  081A               	movf	26,w	;volatile
  3167  0410  00F1               	movwf	??_isr
  3168  0411  0871               	movf	??_isr,w
  3169  0412  00F6               	movwf	_dato
  3170  0413                     i1l1578:
  3171                           
  3172                           ;LAB2.c: 72:         if(dato == 75){
  3173  0413  304B               	movlw	75
  3174  0414  0676               	xorwf	_dato,w
  3175  0415  1D03               	btfss	3,2
  3176  0416  2C18               	goto	u103_21
  3177  0417  2C19               	goto	u103_20
  3178  0418                     u103_21:
  3179  0418  2C1D               	goto	i1l97
  3180  0419                     u103_20:
  3181  0419                     i1l1580:
  3182                           
  3183                           ;LAB2.c: 73:             Cont_U++;
  3184  0419  3001               	movlw	1
  3185  041A  00F1               	movwf	??_isr
  3186  041B  0871               	movf	??_isr,w
  3187  041C  07C5               	addwf	_Cont_U,f
  3188  041D                     i1l97:	
  3189                           ;LAB2.c: 74:         }
  3190                           
  3191                           
  3192                           ;LAB2.c: 75:         if(dato == 77){
  3193  041D  304D               	movlw	77
  3194  041E  0676               	xorwf	_dato,w
  3195  041F  1D03               	btfss	3,2
  3196  0420  2C22               	goto	u104_21
  3197  0421  2C23               	goto	u104_20
  3198  0422                     u104_21:
  3199  0422  2C25               	goto	i1l99
  3200  0423                     u104_20:
  3201  0423                     i1l1582:
  3202                           
  3203                           ;LAB2.c: 76:             Cont_U--;
  3204  0423  3001               	movlw	1
  3205  0424  02C5               	subwf	_Cont_U,f
  3206  0425                     i1l99:
  3207  0425  0873               	movf	??_isr+2,w
  3208  0426  008A               	movwf	10
  3209  0427  0E72               	swapf	??_isr+1,w
  3210  0428  0083               	movwf	3
  3211  0429  0EFE               	swapf	btemp,f
  3212  042A  0E7E               	swapf	btemp,w
  3213  042B  0009               	retfie
  3214  042C                     __end_of_isr:
  3215                           
  3216                           	psect	intentry
  3217  0004                     __pintentry:	
  3218                           ;incstack = 0
  3219                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  3220                           
  3221  0004                     interrupt_function:
  3222  007E                     saved_w	set	btemp
  3223  0004  00FE               	movwf	btemp
  3224  0005  0E03               	swapf	3,w
  3225  0006  00F2               	movwf	??_isr+1
  3226  0007  080A               	movf	10,w
  3227  0008  00F3               	movwf	??_isr+2
  3228  0009  120A  118A  2BFD   	ljmp	_isr
  3229                           
  3230                           	psect	text19
  3231  04C2                     __ptext19:	
  3232 ;; *************** function _ADC *****************
  3233 ;; Defined at:
  3234 ;;		line 11 in file "ADC.c"
  3235 ;; Parameters:    Size  Location     Type
  3236 ;;		None
  3237 ;; Auto vars:     Size  Location     Type
  3238 ;;		None
  3239 ;; Return value:  Size  Location     Type
  3240 ;;                  1    wreg      void 
  3241 ;; Registers used:
  3242 ;;		wreg, status,2, status,0
  3243 ;; Tracked objects:
  3244 ;;		On entry : 0/0
  3245 ;;		On exit  : 0/0
  3246 ;;		Unchanged: 0/0
  3247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3248 ;;      Params:         0       0       0       0       0
  3249 ;;      Locals:         0       0       0       0       0
  3250 ;;      Temps:          1       0       0       0       0
  3251 ;;      Totals:         1       0       0       0       0
  3252 ;;Total ram usage:        1 bytes
  3253 ;; Hardware stack levels used: 1
  3254 ;; This function calls:
  3255 ;;		Nothing
  3256 ;; This function is called by:
  3257 ;;		_isr
  3258 ;; This function uses a non-reentrant model
  3259 ;;
  3260                           
  3261                           
  3262                           ;psect for function _ADC
  3263  04C2                     _ADC:
  3264  04C2                     i1l1464:	
  3265                           ;incstack = 0
  3266                           ; Regs used in _ADC: [wreg+status,2+status,0]
  3267                           
  3268                           
  3269                           ;ADC.c: 12:     if(ADCON0bits.CHS == 0){
  3270  04C2  1283               	bcf	3,5	;RP0=0, select bank0
  3271  04C3  1303               	bcf	3,6	;RP1=0, select bank0
  3272  04C4  0C1F               	rrf	31,w	;volatile
  3273  04C5  00F0               	movwf	??_ADC
  3274  04C6  0C70               	rrf	??_ADC,w
  3275  04C7  390F               	andlw	15
  3276  04C8  3A00               	xorlw	0
  3277  04C9  1D03               	skipz
  3278  04CA  2CCC               	goto	u93_21
  3279  04CB  2CCD               	goto	u93_20
  3280  04CC                     u93_21:
  3281  04CC  2CD2               	goto	i1l1468
  3282  04CD                     u93_20:
  3283  04CD                     i1l1466:
  3284                           
  3285                           ;ADC.c: 13:         cont1 = ADRESH;
  3286  04CD  081E               	movf	30,w	;volatile
  3287  04CE  00F0               	movwf	??_ADC
  3288  04CF  0870               	movf	??_ADC,w
  3289  04D0  00C8               	movwf	_cont1
  3290                           
  3291                           ;ADC.c: 14:     }
  3292  04D1  2CDF               	goto	i1l189
  3293  04D2                     i1l1468:
  3294  04D2  0C1F               	rrf	31,w	;volatile
  3295  04D3  00F0               	movwf	??_ADC
  3296  04D4  0C70               	rrf	??_ADC,w
  3297  04D5  390F               	andlw	15
  3298  04D6  3A01               	xorlw	1
  3299  04D7  1D03               	skipz
  3300  04D8  2CDA               	goto	u94_21
  3301  04D9  2CDB               	goto	u94_20
  3302  04DA                     u94_21:
  3303  04DA  2CDF               	goto	i1l189
  3304  04DB                     u94_20:
  3305  04DB                     i1l1470:
  3306                           
  3307                           ;ADC.c: 16:         cont2 = ADRESH;
  3308  04DB  081E               	movf	30,w	;volatile
  3309  04DC  00F0               	movwf	??_ADC
  3310  04DD  0870               	movf	??_ADC,w
  3311  04DE  00C7               	movwf	_cont2
  3312  04DF                     i1l189:
  3313  04DF  0008               	return
  3314  04E0                     __end_of_ADC:
  3315  007E                     btemp	set	126	;btemp
  3316  007E                     wtemp0	set	126
  3317                           
  3318                           	psect	config
  3319                           
  3320                           ;Config register CONFIG1 @ 0x2007
  3321                           ;	Oscillator Selection bits
  3322                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  3323                           ;	Watchdog Timer Enable bit
  3324                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  3325                           ;	Power-up Timer Enable bit
  3326                           ;	PWRTE = OFF, PWRT disabled
  3327                           ;	RE3/MCLR pin function select bit
  3328                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  3329                           ;	Code Protection bit
  3330                           ;	CP = OFF, Program memory code protection is disabled
  3331                           ;	Data Code Protection bit
  3332                           ;	CPD = OFF, Data memory code protection is disabled
  3333                           ;	Brown Out Reset Selection bits
  3334                           ;	BOREN = OFF, BOR disabled
  3335                           ;	Internal External Switchover bit
  3336                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  3337                           ;	Fail-Safe Clock Monitor Enabled bit
  3338                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  3339                           ;	Low Voltage Programming Enable bit
  3340                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  3341                           ;	In-Circuit Debugger Mode bit
  3342                           ;	DEBUG = 0x1, unprogrammed default
  3343  2007                     	org	8199
  3344  2007  20D4               	dw	8404
  3345                           
  3346                           ;Config register CONFIG2 @ 0x2008
  3347                           ;	Brown-out Reset Selection bit
  3348                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  3349                           ;	Flash Program Memory Self Write Enable bits
  3350                           ;	WRT = OFF, Write protection off
  3351  2008                     	org	8200
  3352  2008  3FFF               	dw	16383

Data Sizes:
    Strings     25
    Constant    10
    Data        0
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     37      73
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_4(CODE[3]), STR_3(CODE[8]), STR_2(CODE[8]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> buffer3(BANK0[10]), buffer2(BANK0[10]), buffer1(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Escribir_stringLCD@d	PTR const unsigned char  size(2) Largest target is 17
		 -> buffer3(BANK0[10]), buffer2(BANK0[10]), buffer1(BANK0[10]), STR_1(CODE[17]), 

    divisor@dig	PTR unsigned char  size(1) Largest target is 1
		 -> vol2(BANK0[1]), vol1(BANK0[1]), 


Critical Paths under _main in COMMON

    _Limpiar_pantallaLCD->_Escribir_comandoLCD
    _Iniciar_LCD->_Escribir_comandoLCD
    _set_cursor->_Escribir_comandoLCD
    _Escribir_comandoLCD->_prender_ELCD
    _conversion_char->_divisor
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _divisor->___awdiv
    _divisor->___awmod
    _Escribir_stringLCD->_Escribir_datosLCD
    _Escribir_datosLCD->_prender_ELCD

Critical Paths under _isr in COMMON

    _isr->_ADC

Critical Paths under _main in BANK0

    _main->_conversion_char
    _setup->_Limpiar_pantallaLCD
    _dato_recibido->_sprintf
    _conversion_char->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _divisor->___awdiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    6354
                                             36 BANK0      1     1      0
                 _Escribir_stringLCD
                         _conversion
                    _conversion_char
                      _dato_recibido
                         _set_cursor
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                1     1      0      62
                                              2 BANK0      1     1      0
                        _Iniciar_LCD
                _Limpiar_pantallaLCD
 ---------------------------------------------------------------------------------
 (2) _Limpiar_pantallaLCD                                  2     2      0      31
                                              0 BANK0      2     2      0
                _Escribir_comandoLCD
 ---------------------------------------------------------------------------------
 (2) _Iniciar_LCD                                          0     0      0      31
                _Escribir_comandoLCD
 ---------------------------------------------------------------------------------
 (1) _set_cursor                                           2     1      1     515
                                              0 BANK0      2     1      1
                _Escribir_comandoLCD
 ---------------------------------------------------------------------------------
 (3) _Escribir_comandoLCD                                  1     1      0      31
                                              5 COMMON     1     1      0
                       _prender_ELCD
 ---------------------------------------------------------------------------------
 (1) _dato_recibido                                        3     3      0    1806
                                             29 BANK0      3     3      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _conversion_char                                      7     7      0    3515
                                             29 BANK0      7     7      0
                            _divisor
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             25    18      7    1806
                                             12 BANK0     17    10      7
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              5 COMMON     1     1      0
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     421
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _divisor                                              8     7      1    1709
                                              5 COMMON     1     0      1
                                              8 BANK0      7     7      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     613
                                              4 COMMON     1     1      0
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     625
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _conversion                                           1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Escribir_stringLCD                                   2     0      2     456
                                              0 BANK0      2     0      2
                  _Escribir_datosLCD
 ---------------------------------------------------------------------------------
 (2) _Escribir_datosLCD                                    1     1      0      31
                                              5 COMMON     1     1      0
                       _prender_ELCD
 ---------------------------------------------------------------------------------
 (4) _prender_ELCD                                         1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  3     3      0       0
                                              1 COMMON     3     3      0
                                _ADC
 ---------------------------------------------------------------------------------
 (6) _ADC                                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Escribir_stringLCD
     _Escribir_datosLCD
       _prender_ELCD
   _conversion
   _conversion_char
     _divisor
       ___awdiv
       ___awmod
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _dato_recibido
     _sprintf
   _set_cursor
     _Escribir_comandoLCD
       _prender_ELCD
   _setup
     _Iniciar_LCD
       _Escribir_comandoLCD
     _Limpiar_pantallaLCD
       _Escribir_comandoLCD

 _isr (ROOT)
   _ADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      53       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      49       5       91.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      53      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Fri Feb 04 18:28:22 2022

                           pc 0002                  ___awdiv@sign 0025                            fsr 0004  
                         l110 0347                           l104 0112                           l113 0240  
                         l121 0508                           l141 0526                           l118 02F2  
                         l144 0532                           l153 047F                           l161 04C1  
                         l138 04F4                           l306 0109                           l147 04A2  
                         l156 051A                           _ADC 04C2                           l196 0457  
                         l463 01E5                           l476 029B                           l582 038D  
                         l592 03C9                           _RC0 0038                           _RC1 0039  
                         u810 03A8                           u811 03A7                           u820 03B2  
                         u821 03B1                           u805 039A                           u840 03C5  
                         u841 03C4                           u825 03AE                           u835 03B9  
                         u950 0432                           u790 0396                           u951 0431  
                         u791 0395                           u960 043B                           u961 043A  
                         u970 044B                           u971 044A                           _dec 0078  
                         _cen 0077                           _isr 03FD                           fsr0 0004  
                         _uni 0079                           indf 0000                  ___awmod@sign 0025  
                        ?_ADC 0070                          l1340 038E                          l1350 03A8  
                        l1342 0396                          l1352 03B2                          l1344 0399  
                        l1530 042C                          l1354 03B8                          l1346 03A0  
                        l1540 044B                          l1532 0432                          l1700 026C  
                        l1356 03BF                          l1348 03A4                          l1534 043B  
                        l1702 0270                          l1710 028D                          l1358 03C5  
                        l1630 051C                          l1624 04E0                          l1544 0450  
                        l1536 043D                          l1640 0184                          l1712 0292  
                        l1704 027A                          l1720 034C                          l1800 006C  
                        l1632 051F                          l1626 04E3                          l1546 0454  
                        l1538 0442                          l1650 0198                          l1642 0189  
                        l1714 0297                          l1706 0280                          l1730 0364  
                        l1722 0352                          l1802 0071                          l1634 0521  
                        l1628 04EA                          l1660 01AE                          l1652 019A  
                        l1644 018B                          l1636 017D                          l1708 0287  
                        l1732 0375                          l1724 0355                          l1740 0389  
                        l1820 00AA                          l1812 008F                          l1900 033D  
                        l1670 01D1                          l1662 01B2                          l1654 01A0  
                        l1646 018F                          l1638 0180                          l1734 037B  
                        l1726 035C                          l1718 0348                          l1822 00AF  
                        l1814 0099                          l1830 00F3                          l1910 04BA  
                        l1750 0488                          l1902 0342                          l1840 0528  
                        l1912 0458                          l1664 01C3                          l1656 01A3  
                        l1672 01D7                          l1648 0194                          l1680 0241  
                        l1736 037C                          l1728 0360                          l1824 00DF  
                        l1816 009F                          l1808 0073                          l1832 0105  
                        l1920 01E6                          l1904 04A6                          l1752 048A  
                        l1744 0480                          l1760 0509                          l1842 052B  
                        l1914 0459                          l1674 01DC                          l1666 01C9  
                        l1658 01AA                          l1690 0253                          l1682 0244  
                        l1738 0383                          l1826 00E6                          l1818 00A6  
                        l1922 04F5                          l1906 04AB                          l1754 0490  
                        l1746 0484                          l1762 050F                          l1850 02F8  
                        l1930 012C                          l1844 052D                          l1916 0467  
                        l1676 01E1                          l1668 01CA                          l1692 0258  
                        l1684 0248                          l1772 02A9                          l1764 029F  
                        l1828 00EA                          l1780 0028                          l1908 04B2  
                        l1756 0496                          l1748 0485                          l1860 030C  
                        l1852 0303                          l1932 013B                          l1924 010A  
                        l1918 046F                          l1694 025E                          l1686 024D  
                        l1774 02DF                          l1766 02A7                          l1790 003B  
                        l1782 002E                          l1758 049C                          l1870 031D  
                        l1862 030D                          l1854 0309                          l1846 02F3  
                        l1934 0146                          l1926 010F                          l1696 0261  
                        l1688 024F                          l1776 02E5                          l1792 0058  
                        l1784 0035                          l1880 032A                          l1872 0320  
                        l1864 0313                          l1856 030A                          l1848 02F7  
                        l1936 0162                          l1928 0121                          l1698 0268  
                        l1794 0060                          l1786 003A                          l1778 0023  
                        l1890 0334                          l1882 032B                          l1874 0323  
                        l1866 0315                          l1858 030B                          l1938 016E  
                        l1796 0064                          l1964 004D                          l1892 0335  
                        l1884 032C                          l1876 0326                          l1868 0316  
                        l1798 0068                          l1894 0338                          l1886 032D  
                        l1878 0329                          l1896 0339                          l1888 0330  
                        l1898 033A                          ?_isr 0070                          STR_1 03E4  
                        STR_2 03F5                          STR_3 03F5                          STR_4 03FA  
                        u1110 01C3                          u1111 01C2                          u1200 027A  
                        u1105 01B3                          u1201 0279                          u1130 01D7  
                        u1050 0184                          u1131 01D6                          u1115 01BF  
                        u1051 0183                          u1140 01DC                          u1060 018F  
                        u1220 028D                          u1300 0389                          u1141 01DB  
                        u1125 01CB                          u1061 018E                          u1221 028C  
                        u1205 0276                          u1301 0388                          u1070 01A0  
                        u1230 0292                          u1150 0248                          u1310 02F2  
                        u1071 019F                          u1231 0291                          u1215 0281  
                        u1151 0247                          u1311 02F1                          u1160 0253  
                        u1240 0352                          u1320 002E                          u1400 04BA  
                        u1161 0252                          u1241 0351                          u1321 002D  
                        u1401 04B9                          u1410 047F                          u1090 01B2  
                        u1170 025E                          u1330 0068                          u1411 047E  
                        u1091 01B1                          u1171 025D                          u1315 02EE  
                        u1331 0067                          u1260 0364                          u1340 008E  
                        u1085 01A4                          u1261 0363                          u1341 008D  
                        u1190 0270                          u1350 0099                          u1191 026F  
                        u1255 0356                          u1351 0098                          u1280 0375  
                        u1360 009F                          u1185 0262                          u1281 0374  
                        u1361 009E                          u1345 008A                          u1370 00F3  
                        u1275 0365                          u1371 00F2                          u1427 031A  
                        u1380 0105                          u1285 0371                          u1381 0104  
                        u1437 0515                          u1390 04AB                          u1447 043F  
                        u1295 037D                          u1391 04AA                          u1457 0452  
                        u1467 04E5                          u1477 04EF                          i1l97 041D  
                        i1l99 0425                 ??_Iniciar_LCD 0076                          _dato 0076  
                        _main 010A                          _vol1 0068                          _vol2 0067  
                        _vol3 0046                          btemp 007E                          start 000C  
                       ??_ADC 0070                         ??_isr 0071    __end_of_Escribir_stringLCD 0480  
                       ?_main 0070               __end_of___awdiv 01E6               __end_of___awmod 029C  
                       _ANSEL 0188               ___awdiv@divisor 0020               __end_of___lwdiv 038E  
             __end_of___lwmod 03CA                         i1l189 04DF               ___awdiv@counter 0024  
                       _RCREG 001A                         _SPBRG 0099                         _PORTA 0005  
                       _PORTB 0006                         _PORTD 0008                         _PORTE 0009  
                       _TRISA 0085                         _TRISB 0086                         _TRISD 0088  
                       _TRISE 0089                         u93_20 04CD                         u93_21 04CC  
                       u94_20 04DB                         u94_21 04DA               __end_of_divisor 02F3  
                       _cont1 0048                         _cont2 0047               __end_of_dpowers 03E4  
                       _setup 02F3           _Limpiar_pantallaLCD 0509                         pclath 000A  
           ??_conversion_char 003D                         status 0003                         wtemp0 007E  
             __end_of_sprintf 010A               __initialization 000F           __end_of_Iniciar_LCD 04A3  
                __end_of_main 017D             _Escribir_datosLCD 0527          ?_Limpiar_pantallaLCD 0070  
          ?_Escribir_datosLCD 0070                        ??_main 0044           ??_Escribir_datosLCD 0075  
                      _ADRESH 001E              ___awdiv@dividend 0022                        ?_setup 0070  
                      _ANSELH 0189                        u101_20 0403                        u101_21 0402  
                      u102_20 040F                        u102_21 040E                        u103_20 0419  
                      u103_21 0418                        u104_20 0423                        u104_21 0422  
                      i1l1470 04DB                        i1l1464 04C2                        i1l1466 04CD  
                      i1l1570 0403                        i1l1468 04D2                        i1l1580 0419  
                      i1l1572 0408                        i1l1582 0423                        i1l1574 040B  
                      i1l1576 040F                        i1l1568 03FD                        i1l1578 0413  
                      _SPBRGH 009A                        _TRISC0 0438                        _TRISC1 0439  
                      _Cont_U 0045     __end_of_Escribir_datosLCD 0533         ??_Limpiar_pantallaLCD 0020  
                   ??___awdiv 0074                     ??___awmod 0074         __end_of_dato_recibido 0509  
                   ??___lwdiv 0074                     ??___lwmod 0075              ___awdiv@quotient 0026  
             ___awmod@divisor 0020               ___awmod@counter 0024                     ??_divisor 0028  
                      saved_w 007E                     ??_sprintf 0033       __end_of__initialization 001C  
                 _Iniciar_LCD 0480                __pcstackCOMMON 0070                 __end_of_setup 0348  
                     ??_setup 0022                    __pbssBANK0 0045    __size_of_Escribir_datosLCD 000C  
                  __pmaintext 010A                    __pintentry 0004  __size_of_Escribir_comandoLCD 000C  
    Escribir_datosLCD@LCDchar 0075               _conversion_char 01E6            _Escribir_stringLCD 0458  
                  __stringtab 03CA                    _conversion 042C           ?_Escribir_stringLCD 0020  
                     ___awdiv 017D                       ___awmod 0241                       ___lwdiv 0348  
                     ___lwmod 038E                       __ptext1 02F3                       __ptext2 0509  
                     __ptext3 0480                       __ptext4 04A3                       __ptext5 051B  
                     __ptext6 04F5                       __ptext7 01E6                       __ptext8 0020  
                     __ptext9 038E                       _buffer1 005D                       _buffer2 0053  
                     _buffer3 0049                  __size_of_ADC 001E                       _divisor 029C  
        ??_Escribir_stringLCD 0076                       _dpowers 03DA                  __size_of_isr 002F  
            ___awmod@dividend 0022                 ?_prender_ELCD 0070                   set_cursor@a 0021  
                 set_cursor@b 0020                       _sprintf 0020                       clrloop0 0534  
        end_of_initialization 001C                    _set_cursor 04A3                     _RCSTAbits 0018  
     __end_of_conversion_char 0241                ??_prender_ELCD 0074                  ?_Iniciar_LCD 0070  
                 ?_conversion 0070                     _TXSTAbits 0098   __end_of_Limpiar_pantallaLCD 051B  
                  divisor@dig 0075                   _BAUDCTLbits 0187           start_initialization 000F  
                 __end_of_ADC 04E0                   __end_of_isr 042C        __size_of_dato_recibido 0014  
         _Escribir_comandoLCD 051B    Escribir_comandoLCD@Comando 0075                   ?_set_cursor 0020  
            ?_conversion_char 0070          ?_Escribir_comandoLCD 0070           __size_of_conversion 002C  
                 __pbssCOMMON 0076                     ___latbits 0002                 __pcstackBANK0 0020  
                 sprintf@flag 0037                   sprintf@prec 0038          __end_of_prender_ELCD 04F5  
            ___lwdiv@dividend 0022                      ?___awdiv 0020                      ?___awmod 0020  
                    ?___lwdiv 0020                      ?___lwmod 0027         ??_Escribir_comandoLCD 0075  
               _dato_recibido 04F5                     __pstrings 03CA                      ?_divisor 0075  
            ___lwdiv@quotient 0025           __size_of_set_cursor 001F                      ?_sprintf 002C  
              __size_of_setup 0055             interrupt_function 0004                     clear_ram0 0533  
                    _PIE1bits 008C          __size_of_Iniciar_LCD 0023                      _PIR1bits 000C  
              ?_dato_recibido 0070                    _ADCON0bits 001F                   __stringbase 03D9  
                  _ADCON1bits 009F   __size_of_Escribir_stringLCD 0028                  ??_conversion 0074  
         Escribir_stringLCD@d 0020              __size_of___awdiv 0069              __size_of___awmod 005B  
            __size_of___lwdiv 0046              __size_of___lwmod 003C            __end_of__stringtab 03DA  
                  sprintf@val 0039              __size_of_divisor 0057            __end_of_conversion 0458  
             ___lwdiv@divisor 0020               ___lwdiv@counter 0024                      __ptext10 0348  
                    __ptext11 029C                      __ptext12 0241                      __ptext13 017D  
                    __ptext14 042C                      __ptext15 0458                      __ptext16 0527  
                    __ptext17 04E0                      __ptext18 03FD                      __ptext19 04C2  
            __size_of_sprintf 00EA         __size_of_prender_ELCD 0015                 __size_of_main 0073  
                ??_set_cursor 0076               ??_dato_recibido 003D  __size_of_Limpiar_pantallaLCD 0012  
                    divisor@a 002A                      divisor@b 002B                      divisor@i 002D  
                  _INTCONbits 000B                  _prender_ELCD 04E0            __end_of_set_cursor 04C2  
                    intlevel1 0000                     sprintf@ap 0036                     sprintf@sp 003B  
            ___lwmod@dividend 0029                     stringcode 03D4                    _OSCCONbits 008F  
                    sprintf@c 003C                      sprintf@f 002C               ___lwmod@divisor 0027  
             ___lwmod@counter 002B      __size_of_conversion_char 005B                      stringdir 03D4  
                    stringtab 03CA   __end_of_Escribir_comandoLCD 0527  
