

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Wed Feb 02 12:26:19 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,merge=1,delta=2
    15                           	psect	text8,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 2.20
    21                           ; Generated 12/02/2020 GMT
    22                           ; 
    23                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F887 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000D                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0013                     	;# 
    75  0014                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001B                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  001D                     	;# 
    87  001E                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0086                     	;# 
    92  0087                     	;# 
    93  0088                     	;# 
    94  0089                     	;# 
    95  008C                     	;# 
    96  008D                     	;# 
    97  008E                     	;# 
    98  008F                     	;# 
    99  0090                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0093                     	;# 
   105  0094                     	;# 
   106  0095                     	;# 
   107  0096                     	;# 
   108  0097                     	;# 
   109  0098                     	;# 
   110  0099                     	;# 
   111  009A                     	;# 
   112  009B                     	;# 
   113  009C                     	;# 
   114  009D                     	;# 
   115  009E                     	;# 
   116  009F                     	;# 
   117  0105                     	;# 
   118  0107                     	;# 
   119  0108                     	;# 
   120  0109                     	;# 
   121  010C                     	;# 
   122  010C                     	;# 
   123  010D                     	;# 
   124  010E                     	;# 
   125  010F                     	;# 
   126  0185                     	;# 
   127  0187                     	;# 
   128  0188                     	;# 
   129  0189                     	;# 
   130  018C                     	;# 
   131  018D                     	;# 
   132  0000                     	;# 
   133  0001                     	;# 
   134  0002                     	;# 
   135  0003                     	;# 
   136  0004                     	;# 
   137  0005                     	;# 
   138  0006                     	;# 
   139  0007                     	;# 
   140  0008                     	;# 
   141  0009                     	;# 
   142  000A                     	;# 
   143  000B                     	;# 
   144  000C                     	;# 
   145  000D                     	;# 
   146  000E                     	;# 
   147  000E                     	;# 
   148  000F                     	;# 
   149  0010                     	;# 
   150  0011                     	;# 
   151  0012                     	;# 
   152  0013                     	;# 
   153  0014                     	;# 
   154  0015                     	;# 
   155  0015                     	;# 
   156  0016                     	;# 
   157  0017                     	;# 
   158  0018                     	;# 
   159  0019                     	;# 
   160  001A                     	;# 
   161  001B                     	;# 
   162  001B                     	;# 
   163  001C                     	;# 
   164  001D                     	;# 
   165  001E                     	;# 
   166  001F                     	;# 
   167  0081                     	;# 
   168  0085                     	;# 
   169  0086                     	;# 
   170  0087                     	;# 
   171  0088                     	;# 
   172  0089                     	;# 
   173  008C                     	;# 
   174  008D                     	;# 
   175  008E                     	;# 
   176  008F                     	;# 
   177  0090                     	;# 
   178  0091                     	;# 
   179  0092                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0093                     	;# 
   183  0094                     	;# 
   184  0095                     	;# 
   185  0096                     	;# 
   186  0097                     	;# 
   187  0098                     	;# 
   188  0099                     	;# 
   189  009A                     	;# 
   190  009B                     	;# 
   191  009C                     	;# 
   192  009D                     	;# 
   193  009E                     	;# 
   194  009F                     	;# 
   195  0105                     	;# 
   196  0107                     	;# 
   197  0108                     	;# 
   198  0109                     	;# 
   199  010C                     	;# 
   200  010C                     	;# 
   201  010D                     	;# 
   202  010E                     	;# 
   203  010F                     	;# 
   204  0185                     	;# 
   205  0187                     	;# 
   206  0188                     	;# 
   207  0189                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  0000                     	;# 
   211  0001                     	;# 
   212  0002                     	;# 
   213  0003                     	;# 
   214  0004                     	;# 
   215  0005                     	;# 
   216  0006                     	;# 
   217  0007                     	;# 
   218  0008                     	;# 
   219  0009                     	;# 
   220  000A                     	;# 
   221  000B                     	;# 
   222  000C                     	;# 
   223  000D                     	;# 
   224  000E                     	;# 
   225  000E                     	;# 
   226  000F                     	;# 
   227  0010                     	;# 
   228  0011                     	;# 
   229  0012                     	;# 
   230  0013                     	;# 
   231  0014                     	;# 
   232  0015                     	;# 
   233  0015                     	;# 
   234  0016                     	;# 
   235  0017                     	;# 
   236  0018                     	;# 
   237  0019                     	;# 
   238  001A                     	;# 
   239  001B                     	;# 
   240  001B                     	;# 
   241  001C                     	;# 
   242  001D                     	;# 
   243  001E                     	;# 
   244  001F                     	;# 
   245  0081                     	;# 
   246  0085                     	;# 
   247  0086                     	;# 
   248  0087                     	;# 
   249  0088                     	;# 
   250  0089                     	;# 
   251  008C                     	;# 
   252  008D                     	;# 
   253  008E                     	;# 
   254  008F                     	;# 
   255  0090                     	;# 
   256  0091                     	;# 
   257  0092                     	;# 
   258  0093                     	;# 
   259  0093                     	;# 
   260  0093                     	;# 
   261  0094                     	;# 
   262  0095                     	;# 
   263  0096                     	;# 
   264  0097                     	;# 
   265  0098                     	;# 
   266  0099                     	;# 
   267  009A                     	;# 
   268  009B                     	;# 
   269  009C                     	;# 
   270  009D                     	;# 
   271  009E                     	;# 
   272  009F                     	;# 
   273  0105                     	;# 
   274  0107                     	;# 
   275  0108                     	;# 
   276  0109                     	;# 
   277  010C                     	;# 
   278  010C                     	;# 
   279  010D                     	;# 
   280  010E                     	;# 
   281  010F                     	;# 
   282  0185                     	;# 
   283  0187                     	;# 
   284  0188                     	;# 
   285  0189                     	;# 
   286  018C                     	;# 
   287  018D                     	;# 
   288  000C                     _PIR1bits	set	12
   289  001F                     _ADCON0bits	set	31
   290  0001                     _TMR0	set	1
   291  000B                     _INTCONbits	set	11
   292  0009                     _PORTE	set	9
   293  0007                     _PORTC	set	7
   294  0008                     _PORTD	set	8
   295  0006                     _PORTB	set	6
   296  0005                     _PORTA	set	5
   297  0038                     _RC0	set	56
   298  0039                     _RC1	set	57
   299  0029                     _RA1	set	41
   300  0028                     _RA0	set	40
   301  008C                     _PIE1bits	set	140
   302  009F                     _ADCON1bits	set	159
   303  008F                     _OSCCONbits	set	143
   304  0096                     _IOCBbits	set	150
   305  0095                     _WPUBbits	set	149
   306  0081                     _OPTION_REGbits	set	129
   307  0089                     _TRISE	set	137
   308  0088                     _TRISD	set	136
   309  0087                     _TRISC	set	135
   310  0086                     _TRISB	set	134
   311  0085                     _TRISA	set	133
   312  0438                     _TRISC0	set	1080
   313  0439                     _TRISC1	set	1081
   314  0189                     _ANSELH	set	393
   315  0188                     _ANSEL	set	392
   316                           
   317                           	psect	strings
   318  00DD                     __pstrings:
   319  00DD                     stringtab:
   320  00DD                     __stringtab:
   321  00DD                     stringcode:	
   322                           ;	String table - string pointers are 1 byte each
   323                           
   324  00DD                     stringdir:
   325  00DD  3000               	movlw	high stringdir
   326  00DE  008A               	movwf	10
   327  00DF  0804               	movf	4,w
   328  00E0  0A84               	incf	4,f
   329  00E1  0782               	addwf	2,f
   330  00E2                     __stringbase:
   331  00E2  3400               	retlw	0
   332  00E3                     __end_of__stringtab:
   333  00E3                     STR_1:
   334  00E3  3453               	retlw	83	;'S'
   335  00E4  3431               	retlw	49	;'1'
   336  00E5  3400               	retlw	0
   337  00E6                     STR_2:
   338  00E6  3453               	retlw	83	;'S'
   339  00E7  3432               	retlw	50	;'2'
   340  00E8  3400               	retlw	0
   341  00E9                     STR_3:
   342  00E9  3453               	retlw	83	;'S'
   343  00EA  3433               	retlw	51	;'3'
   344  00EB  3400               	retlw	0
   345                           
   346                           	psect	cinit
   347  000F                     start_initialization:	
   348                           ; #config settings
   349                           
   350  000F                     __initialization:
   351  000F                     end_of_initialization:	
   352                           ;End of C runtime variable initialization code
   353                           
   354  000F                     __end_of__initialization:
   355  000F  0183               	clrf	3
   356  0010  120A  118A  2813   	ljmp	_main	;jump to C main() function
   357                           
   358                           	psect	cstackCOMMON
   359  0070                     __pcstackCOMMON:
   360  0070                     ?_Iniciar_LCD:
   361  0070                     ?_Limpiar_pantallaLCD:	
   362                           ; 1 bytes @ 0x0
   363                           
   364  0070                     ?_Escribir_stringLCD:	
   365                           ; 1 bytes @ 0x0
   366                           
   367  0070                     ?_isr:	
   368                           ; 1 bytes @ 0x0
   369                           
   370  0070                     ??_isr:	
   371                           ; 1 bytes @ 0x0
   372                           
   373  0070                     ?_main:	
   374                           ; 1 bytes @ 0x0
   375                           
   376  0070                     ?_prender_ELCD:	
   377                           ; 1 bytes @ 0x0
   378                           
   379  0070                     ?_Escribir_comandoLCD:	
   380                           ; 1 bytes @ 0x0
   381                           
   382  0070                     ?_Escribir_datosLCD:	
   383                           ; 1 bytes @ 0x0
   384                           
   385                           
   386                           ; 1 bytes @ 0x0
   387  0070                     	ds	2
   388  0072                     ??_prender_ELCD:
   389                           
   390                           ; 1 bytes @ 0x2
   391  0072                     	ds	1
   392  0073                     ??_Escribir_comandoLCD:
   393  0073                     ??_Escribir_datosLCD:	
   394                           ; 1 bytes @ 0x3
   395                           
   396  0073                     Escribir_comandoLCD@Comando:	
   397                           ; 1 bytes @ 0x3
   398                           
   399  0073                     Escribir_datosLCD@LCDchar:	
   400                           ; 1 bytes @ 0x3
   401                           
   402                           
   403                           ; 1 bytes @ 0x3
   404  0073                     	ds	1
   405  0074                     ??_Iniciar_LCD:
   406  0074                     ??_Limpiar_pantallaLCD:	
   407                           ; 1 bytes @ 0x4
   408                           
   409  0074                     ?_set_cursor:	
   410                           ; 1 bytes @ 0x4
   411                           
   412  0074                     ??_Escribir_stringLCD:	
   413                           ; 1 bytes @ 0x4
   414                           
   415  0074                     set_cursor@b:	
   416                           ; 1 bytes @ 0x4
   417                           
   418                           
   419                           ; 1 bytes @ 0x4
   420  0074                     	ds	1
   421  0075                     ??_set_cursor:
   422  0075                     Escribir_stringLCD@d:	
   423                           ; 1 bytes @ 0x5
   424                           
   425  0075                     set_cursor@a:	
   426                           ; 1 bytes @ 0x5
   427                           
   428                           
   429                           ; 1 bytes @ 0x5
   430  0075                     	ds	1
   431  0076                     ??_main:
   432                           
   433                           ; 1 bytes @ 0x6
   434  0076                     	ds	1
   435                           
   436                           	psect	maintext
   437  0013                     __pmaintext:	
   438 ;;
   439 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   440 ;;
   441 ;; *************** function _main *****************
   442 ;; Defined at:
   443 ;;		line 61 in file "LAB2.c"
   444 ;; Parameters:    Size  Location     Type
   445 ;;		None
   446 ;; Auto vars:     Size  Location     Type
   447 ;;		None
   448 ;; Return value:  Size  Location     Type
   449 ;;                  1    wreg      void 
   450 ;; Registers used:
   451 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   452 ;; Tracked objects:
   453 ;;		On entry : B00/0
   454 ;;		On exit  : 0/0
   455 ;;		Unchanged: 0/0
   456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   457 ;;      Params:         0       0       0       0       0
   458 ;;      Locals:         0       0       0       0       0
   459 ;;      Temps:          1       0       0       0       0
   460 ;;      Totals:         1       0       0       0       0
   461 ;;Total ram usage:        1 bytes
   462 ;; Hardware stack levels required when called: 4
   463 ;; This function calls:
   464 ;;		_Escribir_stringLCD
   465 ;;		_Iniciar_LCD
   466 ;;		_Limpiar_pantallaLCD
   467 ;;		_set_cursor
   468 ;; This function is called by:
   469 ;;		Startup code after reset
   470 ;; This function uses a non-reentrant model
   471 ;;
   472                           
   473                           
   474                           ;psect for function _main
   475  0013                     _main:
   476  0013                     l897:	
   477                           ;incstack = 0
   478                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   479                           
   480                           
   481                           ;LAB2.c: 62:     Iniciar_LCD();
   482  0013  120A  118A  205B  120A  118A  	fcall	_Iniciar_LCD
   483                           
   484                           ;LAB2.c: 63:     Limpiar_pantallaLCD();
   485  0018  120A  118A  20CD  120A  118A  	fcall	_Limpiar_pantallaLCD
   486  001D                     l68:	
   487                           ;LAB2.c: 64:     while(1){
   488                           
   489                           
   490                           ;LAB2.c: 66:         set_cursor(1,2);
   491  001D  3002               	movlw	2
   492  001E  00F6               	movwf	??_main
   493  001F  0876               	movf	??_main,w
   494  0020  00F4               	movwf	set_cursor@b
   495  0021  3001               	movlw	1
   496  0022  120A  118A  209D  120A  118A  	fcall	_set_cursor
   497  0027                     l899:
   498                           
   499                           ;LAB2.c: 67:         Escribir_stringLCD("S1");
   500  0027  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   501  0028  120A  118A  207E  120A  118A  	fcall	_Escribir_stringLCD
   502  002D                     l901:
   503                           
   504                           ;LAB2.c: 68:         set_cursor(1,6);
   505  002D  3006               	movlw	6
   506  002E  00F6               	movwf	??_main
   507  002F  0876               	movf	??_main,w
   508  0030  00F4               	movwf	set_cursor@b
   509  0031  3001               	movlw	1
   510  0032  120A  118A  209D  120A  118A  	fcall	_set_cursor
   511                           
   512                           ;LAB2.c: 69:         Escribir_stringLCD("S2");
   513  0037  3004               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   514  0038  120A  118A  207E  120A  118A  	fcall	_Escribir_stringLCD
   515  003D                     l903:
   516                           
   517                           ;LAB2.c: 70:         set_cursor(1,11);
   518  003D  300B               	movlw	11
   519  003E  00F6               	movwf	??_main
   520  003F  0876               	movf	??_main,w
   521  0040  00F4               	movwf	set_cursor@b
   522  0041  3001               	movlw	1
   523  0042  120A  118A  209D  120A  118A  	fcall	_set_cursor
   524  0047                     l905:
   525                           
   526                           ;LAB2.c: 71:         Escribir_stringLCD("S3");
   527  0047  3007               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   528  0048  120A  118A  207E  120A  118A  	fcall	_Escribir_stringLCD
   529                           
   530                           ;LAB2.c: 72:         set_cursor(2,2);
   531  004D  3002               	movlw	2
   532  004E  00F6               	movwf	??_main
   533  004F  0876               	movf	??_main,w
   534  0050  00F4               	movwf	set_cursor@b
   535  0051  3002               	movlw	2
   536  0052  120A  118A  209D  120A  118A  	fcall	_set_cursor
   537  0057  281D               	goto	l68
   538  0058  120A  118A  280C   	ljmp	start
   539  005B                     __end_of_main:
   540                           
   541                           	psect	text1
   542  009D                     __ptext1:	
   543 ;; *************** function _set_cursor *****************
   544 ;; Defined at:
   545 ;;		line 57 in file "LCD.c"
   546 ;; Parameters:    Size  Location     Type
   547 ;;  a               1    wreg     unsigned char 
   548 ;;  b               1    4[COMMON] unsigned char 
   549 ;; Auto vars:     Size  Location     Type
   550 ;;  a               1    5[COMMON] unsigned char 
   551 ;; Return value:  Size  Location     Type
   552 ;;                  1    wreg      void 
   553 ;; Registers used:
   554 ;;		wreg, status,2, status,0, pclath, cstack
   555 ;; Tracked objects:
   556 ;;		On entry : 0/0
   557 ;;		On exit  : 0/0
   558 ;;		Unchanged: 0/0
   559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   560 ;;      Params:         1       0       0       0       0
   561 ;;      Locals:         1       0       0       0       0
   562 ;;      Temps:          0       0       0       0       0
   563 ;;      Totals:         2       0       0       0       0
   564 ;;Total ram usage:        2 bytes
   565 ;; Hardware stack levels used: 1
   566 ;; Hardware stack levels required when called: 3
   567 ;; This function calls:
   568 ;;		_Escribir_comandoLCD
   569 ;; This function is called by:
   570 ;;		_main
   571 ;; This function uses a non-reentrant model
   572 ;;
   573                           
   574                           
   575                           ;psect for function _set_cursor
   576  009D                     _set_cursor:
   577                           
   578                           ;incstack = 0
   579                           ; Regs used in _set_cursor: [wreg+status,2+status,0+pclath+cstack]
   580                           ;set_cursor@a stored from wreg
   581  009D  00F5               	movwf	set_cursor@a
   582  009E                     l881:
   583                           
   584                           ;LCD.c: 58:     if(a == 1){
   585  009E  0375               	decf	set_cursor@a,w
   586  009F  1D03               	btfss	3,2
   587  00A0  28A2               	goto	u81
   588  00A1  28A3               	goto	u80
   589  00A2                     u81:
   590  00A2  28AA               	goto	l885
   591  00A3                     u80:
   592  00A3                     l883:
   593                           
   594                           ;LCD.c: 59:         Escribir_comandoLCD(0x80 + (b-1));
   595  00A3  0874               	movf	set_cursor@b,w
   596  00A4  3E7F               	addlw	127
   597  00A5  120A  118A  20EC  120A  118A  	fcall	_Escribir_comandoLCD
   598  00AA                     l885:
   599                           
   600                           ;LCD.c: 61:     if(a == 2){
   601  00AA  3002               	movlw	2
   602  00AB  0675               	xorwf	set_cursor@a,w
   603  00AC  1D03               	btfss	3,2
   604  00AD  28AF               	goto	u91
   605  00AE  28B0               	goto	u90
   606  00AF                     u91:
   607  00AF  28B7               	goto	l129
   608  00B0                     u90:
   609  00B0                     l887:
   610                           
   611                           ;LCD.c: 62:         Escribir_comandoLCD(0xC0 + (b-1));
   612  00B0  0874               	movf	set_cursor@b,w
   613  00B1  3EBF               	addlw	191
   614  00B2  120A  118A  20EC  120A  118A  	fcall	_Escribir_comandoLCD
   615  00B7                     l129:
   616  00B7  0008               	return
   617  00B8                     __end_of_set_cursor:
   618                           
   619                           	psect	text2
   620  00CD                     __ptext2:	
   621 ;; *************** function _Limpiar_pantallaLCD *****************
   622 ;; Defined at:
   623 ;;		line 52 in file "LCD.c"
   624 ;; Parameters:    Size  Location     Type
   625 ;;		None
   626 ;; Auto vars:     Size  Location     Type
   627 ;;		None
   628 ;; Return value:  Size  Location     Type
   629 ;;                  1    wreg      void 
   630 ;; Registers used:
   631 ;;		wreg, status,2, status,0, pclath, cstack
   632 ;; Tracked objects:
   633 ;;		On entry : 0/0
   634 ;;		On exit  : 0/0
   635 ;;		Unchanged: 0/0
   636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   637 ;;      Params:         0       0       0       0       0
   638 ;;      Locals:         0       0       0       0       0
   639 ;;      Temps:          2       0       0       0       0
   640 ;;      Totals:         2       0       0       0       0
   641 ;;Total ram usage:        2 bytes
   642 ;; Hardware stack levels used: 1
   643 ;; Hardware stack levels required when called: 3
   644 ;; This function calls:
   645 ;;		_Escribir_comandoLCD
   646 ;; This function is called by:
   647 ;;		_main
   648 ;; This function uses a non-reentrant model
   649 ;;
   650                           
   651                           
   652                           ;psect for function _Limpiar_pantallaLCD
   653  00CD                     _Limpiar_pantallaLCD:
   654  00CD                     l755:	
   655                           ;incstack = 0
   656                           ; Regs used in _Limpiar_pantallaLCD: [wreg+status,2+status,0+pclath+cstack]
   657                           
   658                           
   659                           ;LCD.c: 53:     Escribir_comandoLCD(0x01);
   660  00CD  3001               	movlw	1
   661  00CE  120A  118A  20EC  120A  118A  	fcall	_Escribir_comandoLCD
   662  00D3                     l757:
   663                           
   664                           ;LCD.c: 54:     _delay((unsigned long)((4)*(8000000/4000.0)));
   665  00D3  300B               	movlw	11
   666  00D4  00F5               	movwf	??_Limpiar_pantallaLCD+1
   667  00D5  3062               	movlw	98
   668  00D6  00F4               	movwf	??_Limpiar_pantallaLCD
   669  00D7                     u117:
   670  00D7  0BF4               	decfsz	??_Limpiar_pantallaLCD,f
   671  00D8  28D7               	goto	u117
   672  00D9  0BF5               	decfsz	??_Limpiar_pantallaLCD+1,f
   673  00DA  28D7               	goto	u117
   674  00DB  0000               	nop
   675  00DC                     l124:
   676  00DC  0008               	return
   677  00DD                     __end_of_Limpiar_pantallaLCD:
   678                           
   679                           	psect	text3
   680  005B                     __ptext3:	
   681 ;; *************** function _Iniciar_LCD *****************
   682 ;; Defined at:
   683 ;;		line 32 in file "LCD.c"
   684 ;; Parameters:    Size  Location     Type
   685 ;;		None
   686 ;; Auto vars:     Size  Location     Type
   687 ;;		None
   688 ;; Return value:  Size  Location     Type
   689 ;;                  1    wreg      void 
   690 ;; Registers used:
   691 ;;		wreg, status,2, status,0, pclath, cstack
   692 ;; Tracked objects:
   693 ;;		On entry : 0/0
   694 ;;		On exit  : 0/0
   695 ;;		Unchanged: 0/0
   696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   697 ;;      Params:         0       0       0       0       0
   698 ;;      Locals:         0       0       0       0       0
   699 ;;      Temps:          0       0       0       0       0
   700 ;;      Totals:         0       0       0       0       0
   701 ;;Total ram usage:        0 bytes
   702 ;; Hardware stack levels used: 1
   703 ;; Hardware stack levels required when called: 3
   704 ;; This function calls:
   705 ;;		_Escribir_comandoLCD
   706 ;; This function is called by:
   707 ;;		_main
   708 ;; This function uses a non-reentrant model
   709 ;;
   710                           
   711                           
   712                           ;psect for function _Iniciar_LCD
   713  005B                     _Iniciar_LCD:
   714  005B                     l739:	
   715                           ;incstack = 0
   716                           ; Regs used in _Iniciar_LCD: [wreg+status,2+status,0+pclath+cstack]
   717                           
   718                           
   719                           ;LCD.c: 33:     RC1 = 0;
   720  005B  1283               	bcf	3,5	;RP0=0, select bank0
   721  005C  1303               	bcf	3,6	;RP1=0, select bank0
   722  005D  1087               	bcf	7,1	;volatile
   723                           
   724                           ;LCD.c: 34:     RC0 = 0;
   725  005E  1007               	bcf	7,0	;volatile
   726  005F                     l741:
   727                           
   728                           ;LCD.c: 35:     PORTD = 0;
   729  005F  0188               	clrf	8	;volatile
   730  0060                     l743:
   731                           
   732                           ;LCD.c: 36:     TRISC1 = 0;
   733  0060  1683               	bsf	3,5	;RP0=1, select bank1
   734  0061  1303               	bcf	3,6	;RP1=0, select bank1
   735  0062  1087               	bcf	7,1	;volatile
   736  0063                     l745:
   737                           
   738                           ;LCD.c: 37:     TRISC0 = 0;
   739  0063  1007               	bcf	7,0	;volatile
   740                           
   741                           ;LCD.c: 38:     TRISD = 0;
   742  0064  0188               	clrf	8	;volatile
   743  0065                     l747:
   744                           
   745                           ;LCD.c: 40:     Escribir_comandoLCD(0x38);
   746  0065  3038               	movlw	56
   747  0066  120A  118A  20EC  120A  118A  	fcall	_Escribir_comandoLCD
   748  006B                     l749:
   749                           
   750                           ;LCD.c: 41:     Escribir_comandoLCD(0x0C);
   751  006B  300C               	movlw	12
   752  006C  120A  118A  20EC  120A  118A  	fcall	_Escribir_comandoLCD
   753  0071                     l751:
   754                           
   755                           ;LCD.c: 42:     Escribir_comandoLCD(0x01);
   756  0071  3001               	movlw	1
   757  0072  120A  118A  20EC  120A  118A  	fcall	_Escribir_comandoLCD
   758  0077                     l753:
   759                           
   760                           ;LCD.c: 43:     Escribir_comandoLCD(0x06);
   761  0077  3006               	movlw	6
   762  0078  120A  118A  20EC  120A  118A  	fcall	_Escribir_comandoLCD
   763  007D                     l115:
   764  007D  0008               	return
   765  007E                     __end_of_Iniciar_LCD:
   766                           
   767                           	psect	text4
   768  00EC                     __ptext4:	
   769 ;; *************** function _Escribir_comandoLCD *****************
   770 ;; Defined at:
   771 ;;		line 18 in file "LCD.c"
   772 ;; Parameters:    Size  Location     Type
   773 ;;  Comando         1    wreg     unsigned char 
   774 ;; Auto vars:     Size  Location     Type
   775 ;;  Comando         1    3[COMMON] unsigned char 
   776 ;; Return value:  Size  Location     Type
   777 ;;                  1    wreg      void 
   778 ;; Registers used:
   779 ;;		wreg, status,2, status,0, pclath, cstack
   780 ;; Tracked objects:
   781 ;;		On entry : 0/0
   782 ;;		On exit  : 0/0
   783 ;;		Unchanged: 0/0
   784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   785 ;;      Params:         0       0       0       0       0
   786 ;;      Locals:         1       0       0       0       0
   787 ;;      Temps:          0       0       0       0       0
   788 ;;      Totals:         1       0       0       0       0
   789 ;;Total ram usage:        1 bytes
   790 ;; Hardware stack levels used: 1
   791 ;; Hardware stack levels required when called: 2
   792 ;; This function calls:
   793 ;;		_prender_ELCD
   794 ;; This function is called by:
   795 ;;		_Iniciar_LCD
   796 ;;		_Limpiar_pantallaLCD
   797 ;;		_set_cursor
   798 ;; This function uses a non-reentrant model
   799 ;;
   800                           
   801                           
   802                           ;psect for function _Escribir_comandoLCD
   803  00EC                     _Escribir_comandoLCD:
   804                           
   805                           ;incstack = 0
   806                           ; Regs used in _Escribir_comandoLCD: [wreg+status,2+status,0+pclath+cstack]
   807                           ;Escribir_comandoLCD@Comando stored from wreg
   808  00EC  00F3               	movwf	Escribir_comandoLCD@Comando
   809  00ED                     l727:
   810                           
   811                           ;LCD.c: 19:     RC0 = 0;
   812  00ED  1283               	bcf	3,5	;RP0=0, select bank0
   813  00EE  1303               	bcf	3,6	;RP1=0, select bank0
   814  00EF  1007               	bcf	7,0	;volatile
   815  00F0                     l729:
   816                           
   817                           ;LCD.c: 20:     PORTD = Comando;
   818  00F0  0873               	movf	Escribir_comandoLCD@Comando,w
   819  00F1  0088               	movwf	8	;volatile
   820  00F2                     l731:
   821                           
   822                           ;LCD.c: 22:     prender_ELCD();
   823  00F2  120A  118A  20B8  120A  118A  	fcall	_prender_ELCD
   824  00F7                     l109:
   825  00F7  0008               	return
   826  00F8                     __end_of_Escribir_comandoLCD:
   827                           
   828                           	psect	text5
   829  007E                     __ptext5:	
   830 ;; *************** function _Escribir_stringLCD *****************
   831 ;; Defined at:
   832 ;;		line 46 in file "LCD.c"
   833 ;; Parameters:    Size  Location     Type
   834 ;;  d               1    wreg     PTR const unsigned char 
   835 ;;		 -> STR_3(3), STR_2(3), STR_1(3), 
   836 ;; Auto vars:     Size  Location     Type
   837 ;;  d               1    5[COMMON] PTR const unsigned char 
   838 ;;		 -> STR_3(3), STR_2(3), STR_1(3), 
   839 ;; Return value:  Size  Location     Type
   840 ;;                  1    wreg      void 
   841 ;; Registers used:
   842 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   843 ;; Tracked objects:
   844 ;;		On entry : 0/0
   845 ;;		On exit  : 0/0
   846 ;;		Unchanged: 0/0
   847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   848 ;;      Params:         0       0       0       0       0
   849 ;;      Locals:         1       0       0       0       0
   850 ;;      Temps:          1       0       0       0       0
   851 ;;      Totals:         2       0       0       0       0
   852 ;;Total ram usage:        2 bytes
   853 ;; Hardware stack levels used: 1
   854 ;; Hardware stack levels required when called: 3
   855 ;; This function calls:
   856 ;;		_Escribir_datosLCD
   857 ;; This function is called by:
   858 ;;		_main
   859 ;; This function uses a non-reentrant model
   860 ;;
   861                           
   862                           
   863                           ;psect for function _Escribir_stringLCD
   864  007E                     _Escribir_stringLCD:
   865                           
   866                           ;incstack = 0
   867                           ; Regs used in _Escribir_stringLCD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   868                           ;Escribir_stringLCD@d stored from wreg
   869  007E  00F5               	movwf	Escribir_stringLCD@d
   870  007F                     l889:
   871                           
   872                           ;LCD.c: 47:     while(*d){
   873  007F  2890               	goto	l895
   874  0080                     l891:
   875                           
   876                           ;LCD.c: 48:         Escribir_datosLCD(*d++);
   877  0080  0875               	movf	Escribir_stringLCD@d,w
   878  0081  0084               	movwf	4
   879  0082  120A  118A  20DD  120A  118A  	fcall	stringdir
   880  0087  120A  118A  20F8  120A  118A  	fcall	_Escribir_datosLCD
   881  008C                     l893:
   882  008C  3001               	movlw	1
   883  008D  00F4               	movwf	??_Escribir_stringLCD
   884  008E  0874               	movf	??_Escribir_stringLCD,w
   885  008F  07F5               	addwf	Escribir_stringLCD@d,f
   886  0090                     l895:
   887                           
   888                           ;LCD.c: 47:     while(*d){
   889  0090  0875               	movf	Escribir_stringLCD@d,w
   890  0091  0084               	movwf	4
   891  0092  120A  118A  20DD  120A  118A  	fcall	stringdir
   892  0097  3A00               	xorlw	0
   893  0098  1D03               	skipz
   894  0099  289B               	goto	u101
   895  009A  289C               	goto	u100
   896  009B                     u101:
   897  009B  2880               	goto	l891
   898  009C                     u100:
   899  009C                     l121:
   900  009C  0008               	return
   901  009D                     __end_of_Escribir_stringLCD:
   902                           
   903                           	psect	text6
   904  00F8                     __ptext6:	
   905 ;; *************** function _Escribir_datosLCD *****************
   906 ;; Defined at:
   907 ;;		line 25 in file "LCD.c"
   908 ;; Parameters:    Size  Location     Type
   909 ;;  LCDchar         1    wreg     unsigned char 
   910 ;; Auto vars:     Size  Location     Type
   911 ;;  LCDchar         1    3[COMMON] unsigned char 
   912 ;; Return value:  Size  Location     Type
   913 ;;                  1    wreg      void 
   914 ;; Registers used:
   915 ;;		wreg, status,2, status,0, pclath, cstack
   916 ;; Tracked objects:
   917 ;;		On entry : 0/0
   918 ;;		On exit  : 0/0
   919 ;;		Unchanged: 0/0
   920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   921 ;;      Params:         0       0       0       0       0
   922 ;;      Locals:         1       0       0       0       0
   923 ;;      Temps:          0       0       0       0       0
   924 ;;      Totals:         1       0       0       0       0
   925 ;;Total ram usage:        1 bytes
   926 ;; Hardware stack levels used: 1
   927 ;; Hardware stack levels required when called: 2
   928 ;; This function calls:
   929 ;;		_prender_ELCD
   930 ;; This function is called by:
   931 ;;		_Escribir_stringLCD
   932 ;; This function uses a non-reentrant model
   933 ;;
   934                           
   935                           
   936                           ;psect for function _Escribir_datosLCD
   937  00F8                     _Escribir_datosLCD:
   938                           
   939                           ;incstack = 0
   940                           ; Regs used in _Escribir_datosLCD: [wreg+status,2+status,0+pclath+cstack]
   941                           ;Escribir_datosLCD@LCDchar stored from wreg
   942  00F8  00F3               	movwf	Escribir_datosLCD@LCDchar
   943  00F9                     l733:
   944                           
   945                           ;LCD.c: 26:     RC0 = 1;
   946  00F9  1283               	bcf	3,5	;RP0=0, select bank0
   947  00FA  1303               	bcf	3,6	;RP1=0, select bank0
   948  00FB  1407               	bsf	7,0	;volatile
   949  00FC                     l735:
   950                           
   951                           ;LCD.c: 27:     PORTD = LCDchar;
   952  00FC  0873               	movf	Escribir_datosLCD@LCDchar,w
   953  00FD  0088               	movwf	8	;volatile
   954  00FE                     l737:
   955                           
   956                           ;LCD.c: 29:     prender_ELCD();
   957  00FE  120A  118A  20B8  120A  118A  	fcall	_prender_ELCD
   958  0103                     l112:
   959  0103  0008               	return
   960  0104                     __end_of_Escribir_datosLCD:
   961                           
   962                           	psect	text7
   963  00B8                     __ptext7:	
   964 ;; *************** function _prender_ELCD *****************
   965 ;; Defined at:
   966 ;;		line 11 in file "LCD.c"
   967 ;; Parameters:    Size  Location     Type
   968 ;;		None
   969 ;; Auto vars:     Size  Location     Type
   970 ;;		None
   971 ;; Return value:  Size  Location     Type
   972 ;;                  1    wreg      void 
   973 ;; Registers used:
   974 ;;		wreg
   975 ;; Tracked objects:
   976 ;;		On entry : 0/0
   977 ;;		On exit  : 0/0
   978 ;;		Unchanged: 0/0
   979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   980 ;;      Params:         0       0       0       0       0
   981 ;;      Locals:         0       0       0       0       0
   982 ;;      Temps:          1       0       0       0       0
   983 ;;      Totals:         1       0       0       0       0
   984 ;;Total ram usage:        1 bytes
   985 ;; Hardware stack levels used: 1
   986 ;; Hardware stack levels required when called: 1
   987 ;; This function calls:
   988 ;;		Nothing
   989 ;; This function is called by:
   990 ;;		_Escribir_comandoLCD
   991 ;;		_Escribir_datosLCD
   992 ;; This function uses a non-reentrant model
   993 ;;
   994                           
   995                           
   996                           ;psect for function _prender_ELCD
   997  00B8                     _prender_ELCD:
   998  00B8                     l721:	
   999                           ;incstack = 0
  1000                           ; Regs used in _prender_ELCD: [wreg]
  1001                           
  1002                           
  1003                           ;LCD.c: 12:     RC1 = 1;
  1004  00B8  1283               	bcf	3,5	;RP0=0, select bank0
  1005  00B9  1303               	bcf	3,6	;RP1=0, select bank0
  1006  00BA  1487               	bsf	7,1	;volatile
  1007  00BB                     l723:
  1008                           
  1009                           ;LCD.c: 13:     _delay((unsigned long)((500)*(8000000/4000000.0)));
  1010  00BB  30C7               	movlw	199
  1011  00BC  00F2               	movwf	??_prender_ELCD
  1012  00BD                     u127:
  1013  00BD  28BE               	nop2
  1014  00BE  0BF2               	decfsz	??_prender_ELCD,f
  1015  00BF  28BD               	goto	u127
  1016  00C0  28C1               	nop2
  1017  00C1  28C2               	nop2
  1018  00C2                     l725:
  1019                           
  1020                           ;LCD.c: 14:     RC1 = 0;
  1021  00C2  1283               	bcf	3,5	;RP0=0, select bank0
  1022  00C3  1303               	bcf	3,6	;RP1=0, select bank0
  1023  00C4  1087               	bcf	7,1	;volatile
  1024                           
  1025                           ;LCD.c: 15:     _delay((unsigned long)((500)*(8000000/4000000.0)));
  1026  00C5  30C7               	movlw	199
  1027  00C6  00F2               	movwf	??_prender_ELCD
  1028  00C7                     u137:
  1029  00C7  28C8               	nop2
  1030  00C8  0BF2               	decfsz	??_prender_ELCD,f
  1031  00C9  28C7               	goto	u137
  1032  00CA  28CB               	nop2
  1033  00CB  28CC               	nop2
  1034  00CC                     l106:
  1035  00CC  0008               	return
  1036  00CD                     __end_of_prender_ELCD:
  1037                           
  1038                           	psect	text8
  1039  0104                     __ptext8:	
  1040 ;; *************** function _isr *****************
  1041 ;; Defined at:
  1042 ;;		line 56 in file "LAB2.c"
  1043 ;; Parameters:    Size  Location     Type
  1044 ;;		None
  1045 ;; Auto vars:     Size  Location     Type
  1046 ;;		None
  1047 ;; Return value:  Size  Location     Type
  1048 ;;                  1    wreg      void 
  1049 ;; Registers used:
  1050 ;;		None
  1051 ;; Tracked objects:
  1052 ;;		On entry : 0/0
  1053 ;;		On exit  : 0/0
  1054 ;;		Unchanged: 0/0
  1055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1056 ;;      Params:         0       0       0       0       0
  1057 ;;      Locals:         0       0       0       0       0
  1058 ;;      Temps:          2       0       0       0       0
  1059 ;;      Totals:         2       0       0       0       0
  1060 ;;Total ram usage:        2 bytes
  1061 ;; Hardware stack levels used: 1
  1062 ;; This function calls:
  1063 ;;		Nothing
  1064 ;; This function is called by:
  1065 ;;		Interrupt level 1
  1066 ;; This function uses a non-reentrant model
  1067 ;;
  1068                           
  1069                           
  1070                           ;psect for function _isr
  1071  0104                     _isr:
  1072  0104                     i1l63:
  1073  0104  0871               	movf	??_isr+1,w
  1074  0105  008A               	movwf	10
  1075  0106  0E70               	swapf	??_isr,w
  1076  0107  0083               	movwf	3
  1077  0108  0EFE               	swapf	btemp,f
  1078  0109  0E7E               	swapf	btemp,w
  1079  010A  0009               	retfie
  1080  010B                     __end_of_isr:
  1081  007E                     btemp	set	126	;btemp
  1082  007E                     wtemp0	set	126
  1083                           
  1084                           	psect	intentry
  1085  0004                     __pintentry:	
  1086                           ;incstack = 0
  1087                           ; Regs used in _isr: []
  1088                           
  1089  0004                     interrupt_function:
  1090  007E                     saved_w	set	btemp
  1091  0004  00FE               	movwf	btemp
  1092  0005  0E03               	swapf	3,w
  1093  0006  00F0               	movwf	??_isr
  1094  0007  080A               	movf	10,w
  1095  0008  00F1               	movwf	??_isr+1
  1096  0009  120A  118A  2904   	ljmp	_isr
  1097                           
  1098                           	psect	config
  1099                           
  1100                           ;Config register CONFIG1 @ 0x2007
  1101                           ;	Oscillator Selection bits
  1102                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  1103                           ;	Watchdog Timer Enable bit
  1104                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1105                           ;	Power-up Timer Enable bit
  1106                           ;	PWRTE = OFF, PWRT disabled
  1107                           ;	RE3/MCLR pin function select bit
  1108                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1109                           ;	Code Protection bit
  1110                           ;	CP = OFF, Program memory code protection is disabled
  1111                           ;	Data Code Protection bit
  1112                           ;	CPD = OFF, Data memory code protection is disabled
  1113                           ;	Brown Out Reset Selection bits
  1114                           ;	BOREN = OFF, BOR disabled
  1115                           ;	Internal External Switchover bit
  1116                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1117                           ;	Fail-Safe Clock Monitor Enabled bit
  1118                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1119                           ;	Low Voltage Programming Enable bit
  1120                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1121                           ;	In-Circuit Debugger Mode bit
  1122                           ;	DEBUG = 0x1, unprogrammed default
  1123  2007                     	org	8199
  1124  2007  20D4               	dw	8404
  1125                           
  1126                           ;Config register CONFIG2 @ 0x2008
  1127                           ;	Brown-out Reset Selection bit
  1128                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1129                           ;	Flash Program Memory Self Write Enable bits
  1130                           ;	WRT = OFF, Write protection off
  1131  2008                     	org	8200
  1132  2008  3FFF               	dw	16383

Data Sizes:
    Strings     9
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       7
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Escribir_stringLCD@d	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_3(CODE[3]), STR_2(CODE[3]), STR_1(CODE[3]), 


Critical Paths under _main in COMMON

    _main->_Escribir_stringLCD
    _main->_Limpiar_pantallaLCD
    _main->_set_cursor
    _set_cursor->_Escribir_comandoLCD
    _Limpiar_pantallaLCD->_Escribir_comandoLCD
    _Iniciar_LCD->_Escribir_comandoLCD
    _Escribir_comandoLCD->_prender_ELCD
    _Escribir_stringLCD->_Escribir_datosLCD
    _Escribir_datosLCD->_prender_ELCD

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     596
                                              6 COMMON     1     1      0
                 _Escribir_stringLCD
                        _Iniciar_LCD
                _Limpiar_pantallaLCD
                         _set_cursor
 ---------------------------------------------------------------------------------
 (1) _set_cursor                                           2     1      1     407
                                              4 COMMON     2     1      1
                _Escribir_comandoLCD
 ---------------------------------------------------------------------------------
 (1) _Limpiar_pantallaLCD                                  2     2      0      15
                                              4 COMMON     2     2      0
                _Escribir_comandoLCD
 ---------------------------------------------------------------------------------
 (1) _Iniciar_LCD                                          0     0      0      15
                _Escribir_comandoLCD
 ---------------------------------------------------------------------------------
 (2) _Escribir_comandoLCD                                  1     1      0      15
                                              3 COMMON     1     1      0
                       _prender_ELCD
 ---------------------------------------------------------------------------------
 (1) _Escribir_stringLCD                                   2     2      0     159
                                              4 COMMON     2     2      0
                  _Escribir_datosLCD
 ---------------------------------------------------------------------------------
 (2) _Escribir_datosLCD                                    1     1      0      15
                                              3 COMMON     1     1      0
                       _prender_ELCD
 ---------------------------------------------------------------------------------
 (3) _prender_ELCD                                         1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Escribir_stringLCD
     _Escribir_datosLCD
       _prender_ELCD
   _Iniciar_LCD
     _Escribir_comandoLCD
       _prender_ELCD
   _Limpiar_pantallaLCD
     _Escribir_comandoLCD
   _set_cursor
     _Escribir_comandoLCD

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       7       1       50.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Wed Feb 02 12:26:19 2022

                           pc 0002                            l68 001D                            u80 00A3  
                          u81 00A2                            u90 00B0                            u91 00AF  
                          fsr 0004                           l112 0103                           l121 009C  
                         l106 00CC                           l115 007D                           l124 00DC  
                         l109 00F7                           l129 00B7                           l721 00B8  
                         l723 00BB                           l731 00F2                           l725 00C2  
                         l733 00F9                           l741 005F                           l901 002D  
                         l735 00FC                           l727 00ED                           l751 0071  
                         l743 0060                           l903 003D                           l737 00FE  
                         l729 00F0                           l753 0077                           l745 0063  
                         l905 0047                           l747 0065                           l739 005B  
                         l755 00CD                           l749 006B                           l757 00D3  
                         l881 009E                           l891 0080                           l883 00A3  
                         l893 008C                           l885 00AA                           l895 0090  
                         l887 00B0                           l889 007F                           l897 0013  
                         l899 0027                           _RA0 0028                           _RA1 0029  
                         _RC0 0038                           _RC1 0039                           u100 009C  
                         u101 009B                           u117 00D7                           u127 00BD  
                         u137 00C7                           _isr 0104                           fsr0 0004  
                        ?_isr 0070                          STR_1 00E3                          STR_2 00E6  
                        STR_3 00E9                          i1l63 0104                          _TMR0 0001  
               ??_Iniciar_LCD 0074                          _main 0013                          btemp 007E  
                        start 000C                         ??_isr 0070    __end_of_Escribir_stringLCD 009D  
                       ?_main 0070                         _ANSEL 0188                         _PORTA 0005  
                       _PORTB 0006                         _PORTC 0007                         _PORTD 0008  
                       _PORTE 0009                         _TRISA 0085                         _TRISB 0086  
                       _TRISC 0087                         _TRISD 0088                         _TRISE 0089  
         _Limpiar_pantallaLCD 00CD                         pclath 000A                         status 0003  
                       wtemp0 007E               __initialization 000F           __end_of_Iniciar_LCD 007E  
                __end_of_main 005B             _Escribir_datosLCD 00F8          ?_Limpiar_pantallaLCD 0070  
          ?_Escribir_datosLCD 0070                        ??_main 0076           ??_Escribir_datosLCD 0073  
                      _ANSELH 0189                        _TRISC0 0438                        _TRISC1 0439  
   __end_of_Escribir_datosLCD 0104         ??_Limpiar_pantallaLCD 0074                        saved_w 007E  
     __end_of__initialization 000F                   _Iniciar_LCD 005B                __pcstackCOMMON 0070  
              _OPTION_REGbits 0081    __size_of_Escribir_datosLCD 000C                    __pmaintext 0013  
                  __pintentry 0004  __size_of_Escribir_comandoLCD 000C      Escribir_datosLCD@LCDchar 0073  
          _Escribir_stringLCD 007E                    __stringtab 00DD           ?_Escribir_stringLCD 0070  
                     __ptext1 009D                       __ptext2 00CD                       __ptext3 005B  
                     __ptext4 00EC                       __ptext5 007E                       __ptext6 00F8  
                     __ptext7 00B8                       __ptext8 0104          ??_Escribir_stringLCD 0074  
                __size_of_isr 0007                 ?_prender_ELCD 0070                   set_cursor@a 0075  
                 set_cursor@b 0074          end_of_initialization 000F                    _set_cursor 009D  
              ??_prender_ELCD 0072                  ?_Iniciar_LCD 0070   __end_of_Limpiar_pantallaLCD 00DD  
         start_initialization 000F                   __end_of_isr 010B           _Escribir_comandoLCD 00EC  
  Escribir_comandoLCD@Comando 0073                   ?_set_cursor 0074          ?_Escribir_comandoLCD 0070  
                   ___latbits 0002          __end_of_prender_ELCD 00CD         ??_Escribir_comandoLCD 0073  
                   __pstrings 00DD           __size_of_set_cursor 001B             interrupt_function 0004  
                    _IOCBbits 0096                      _PIE1bits 008C          __size_of_Iniciar_LCD 0023  
                    _PIR1bits 000C                    _ADCON0bits 001F                   __stringbase 00E2  
                  _ADCON1bits 009F   __size_of_Escribir_stringLCD 001F                      _WPUBbits 0095  
         Escribir_stringLCD@d 0075            __end_of__stringtab 00E3         __size_of_prender_ELCD 0015  
               __size_of_main 0048                  ??_set_cursor 0075  __size_of_Limpiar_pantallaLCD 0010  
                  _INTCONbits 000B                  _prender_ELCD 00B8            __end_of_set_cursor 00B8  
                    intlevel1 0000                     stringcode 00DD                    _OSCCONbits 008F  
                    stringdir 00DD                      stringtab 00DD   __end_of_Escribir_comandoLCD 00F8  
