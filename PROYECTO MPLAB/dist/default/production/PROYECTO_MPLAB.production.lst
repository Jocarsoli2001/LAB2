

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Fri Feb 04 12:50:44 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    35                           	dabs	1,0x7E,2
    36  0000                     
    37                           ; Version 2.20
    38                           ; Generated 12/02/2020 GMT
    39                           ; 
    40                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC16F887 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     	;# 
    72  0001                     	;# 
    73  0002                     	;# 
    74  0003                     	;# 
    75  0004                     	;# 
    76  0005                     	;# 
    77  0006                     	;# 
    78  0007                     	;# 
    79  0008                     	;# 
    80  0009                     	;# 
    81  000A                     	;# 
    82  000B                     	;# 
    83  000C                     	;# 
    84  000D                     	;# 
    85  000E                     	;# 
    86  000E                     	;# 
    87  000F                     	;# 
    88  0010                     	;# 
    89  0011                     	;# 
    90  0012                     	;# 
    91  0013                     	;# 
    92  0014                     	;# 
    93  0015                     	;# 
    94  0015                     	;# 
    95  0016                     	;# 
    96  0017                     	;# 
    97  0018                     	;# 
    98  0019                     	;# 
    99  001A                     	;# 
   100  001B                     	;# 
   101  001B                     	;# 
   102  001C                     	;# 
   103  001D                     	;# 
   104  001E                     	;# 
   105  001F                     	;# 
   106  0081                     	;# 
   107  0085                     	;# 
   108  0086                     	;# 
   109  0087                     	;# 
   110  0088                     	;# 
   111  0089                     	;# 
   112  008C                     	;# 
   113  008D                     	;# 
   114  008E                     	;# 
   115  008F                     	;# 
   116  0090                     	;# 
   117  0091                     	;# 
   118  0092                     	;# 
   119  0093                     	;# 
   120  0093                     	;# 
   121  0093                     	;# 
   122  0094                     	;# 
   123  0095                     	;# 
   124  0096                     	;# 
   125  0097                     	;# 
   126  0098                     	;# 
   127  0099                     	;# 
   128  009A                     	;# 
   129  009B                     	;# 
   130  009C                     	;# 
   131  009D                     	;# 
   132  009E                     	;# 
   133  009F                     	;# 
   134  0105                     	;# 
   135  0107                     	;# 
   136  0108                     	;# 
   137  0109                     	;# 
   138  010C                     	;# 
   139  010C                     	;# 
   140  010D                     	;# 
   141  010E                     	;# 
   142  010F                     	;# 
   143  0185                     	;# 
   144  0187                     	;# 
   145  0188                     	;# 
   146  0189                     	;# 
   147  018C                     	;# 
   148  018D                     	;# 
   149  0000                     	;# 
   150  0001                     	;# 
   151  0002                     	;# 
   152  0003                     	;# 
   153  0004                     	;# 
   154  0005                     	;# 
   155  0006                     	;# 
   156  0007                     	;# 
   157  0008                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000D                     	;# 
   163  000E                     	;# 
   164  000E                     	;# 
   165  000F                     	;# 
   166  0010                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0013                     	;# 
   170  0014                     	;# 
   171  0015                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  0081                     	;# 
   185  0085                     	;# 
   186  0086                     	;# 
   187  0087                     	;# 
   188  0088                     	;# 
   189  0089                     	;# 
   190  008C                     	;# 
   191  008D                     	;# 
   192  008E                     	;# 
   193  008F                     	;# 
   194  0090                     	;# 
   195  0091                     	;# 
   196  0092                     	;# 
   197  0093                     	;# 
   198  0093                     	;# 
   199  0093                     	;# 
   200  0094                     	;# 
   201  0095                     	;# 
   202  0096                     	;# 
   203  0097                     	;# 
   204  0098                     	;# 
   205  0099                     	;# 
   206  009A                     	;# 
   207  009B                     	;# 
   208  009C                     	;# 
   209  009D                     	;# 
   210  009E                     	;# 
   211  009F                     	;# 
   212  0105                     	;# 
   213  0107                     	;# 
   214  0108                     	;# 
   215  0109                     	;# 
   216  010C                     	;# 
   217  010C                     	;# 
   218  010D                     	;# 
   219  010E                     	;# 
   220  010F                     	;# 
   221  0185                     	;# 
   222  0187                     	;# 
   223  0188                     	;# 
   224  0189                     	;# 
   225  018C                     	;# 
   226  018D                     	;# 
   227  0000                     	;# 
   228  0001                     	;# 
   229  0002                     	;# 
   230  0003                     	;# 
   231  0004                     	;# 
   232  0005                     	;# 
   233  0006                     	;# 
   234  0007                     	;# 
   235  0008                     	;# 
   236  0009                     	;# 
   237  000A                     	;# 
   238  000B                     	;# 
   239  000C                     	;# 
   240  000D                     	;# 
   241  000E                     	;# 
   242  000E                     	;# 
   243  000F                     	;# 
   244  0010                     	;# 
   245  0011                     	;# 
   246  0012                     	;# 
   247  0013                     	;# 
   248  0014                     	;# 
   249  0015                     	;# 
   250  0015                     	;# 
   251  0016                     	;# 
   252  0017                     	;# 
   253  0018                     	;# 
   254  0019                     	;# 
   255  001A                     	;# 
   256  001B                     	;# 
   257  001B                     	;# 
   258  001C                     	;# 
   259  001D                     	;# 
   260  001E                     	;# 
   261  001F                     	;# 
   262  0081                     	;# 
   263  0085                     	;# 
   264  0086                     	;# 
   265  0087                     	;# 
   266  0088                     	;# 
   267  0089                     	;# 
   268  008C                     	;# 
   269  008D                     	;# 
   270  008E                     	;# 
   271  008F                     	;# 
   272  0090                     	;# 
   273  0091                     	;# 
   274  0092                     	;# 
   275  0093                     	;# 
   276  0093                     	;# 
   277  0093                     	;# 
   278  0094                     	;# 
   279  0095                     	;# 
   280  0096                     	;# 
   281  0097                     	;# 
   282  0098                     	;# 
   283  0099                     	;# 
   284  009A                     	;# 
   285  009B                     	;# 
   286  009C                     	;# 
   287  009D                     	;# 
   288  009E                     	;# 
   289  009F                     	;# 
   290  0105                     	;# 
   291  0107                     	;# 
   292  0108                     	;# 
   293  0109                     	;# 
   294  010C                     	;# 
   295  010C                     	;# 
   296  010D                     	;# 
   297  010E                     	;# 
   298  010F                     	;# 
   299  0185                     	;# 
   300  0187                     	;# 
   301  0188                     	;# 
   302  0189                     	;# 
   303  018C                     	;# 
   304  018D                     	;# 
   305  0000                     	;# 
   306  0001                     	;# 
   307  0002                     	;# 
   308  0003                     	;# 
   309  0004                     	;# 
   310  0005                     	;# 
   311  0006                     	;# 
   312  0007                     	;# 
   313  0008                     	;# 
   314  0009                     	;# 
   315  000A                     	;# 
   316  000B                     	;# 
   317  000C                     	;# 
   318  000D                     	;# 
   319  000E                     	;# 
   320  000E                     	;# 
   321  000F                     	;# 
   322  0010                     	;# 
   323  0011                     	;# 
   324  0012                     	;# 
   325  0013                     	;# 
   326  0014                     	;# 
   327  0015                     	;# 
   328  0015                     	;# 
   329  0016                     	;# 
   330  0017                     	;# 
   331  0018                     	;# 
   332  0019                     	;# 
   333  001A                     	;# 
   334  001B                     	;# 
   335  001B                     	;# 
   336  001C                     	;# 
   337  001D                     	;# 
   338  001E                     	;# 
   339  001F                     	;# 
   340  0081                     	;# 
   341  0085                     	;# 
   342  0086                     	;# 
   343  0087                     	;# 
   344  0088                     	;# 
   345  0089                     	;# 
   346  008C                     	;# 
   347  008D                     	;# 
   348  008E                     	;# 
   349  008F                     	;# 
   350  0090                     	;# 
   351  0091                     	;# 
   352  0092                     	;# 
   353  0093                     	;# 
   354  0093                     	;# 
   355  0093                     	;# 
   356  0094                     	;# 
   357  0095                     	;# 
   358  0096                     	;# 
   359  0097                     	;# 
   360  0098                     	;# 
   361  0099                     	;# 
   362  009A                     	;# 
   363  009B                     	;# 
   364  009C                     	;# 
   365  009D                     	;# 
   366  009E                     	;# 
   367  009F                     	;# 
   368  0105                     	;# 
   369  0107                     	;# 
   370  0108                     	;# 
   371  0109                     	;# 
   372  010C                     	;# 
   373  010C                     	;# 
   374  010D                     	;# 
   375  010E                     	;# 
   376  010F                     	;# 
   377  0185                     	;# 
   378  0187                     	;# 
   379  0188                     	;# 
   380  0189                     	;# 
   381  018C                     	;# 
   382  018D                     	;# 
   383  0000                     	;# 
   384  0001                     	;# 
   385  0002                     	;# 
   386  0003                     	;# 
   387  0004                     	;# 
   388  0005                     	;# 
   389  0006                     	;# 
   390  0007                     	;# 
   391  0008                     	;# 
   392  0009                     	;# 
   393  000A                     	;# 
   394  000B                     	;# 
   395  000C                     	;# 
   396  000D                     	;# 
   397  000E                     	;# 
   398  000E                     	;# 
   399  000F                     	;# 
   400  0010                     	;# 
   401  0011                     	;# 
   402  0012                     	;# 
   403  0013                     	;# 
   404  0014                     	;# 
   405  0015                     	;# 
   406  0015                     	;# 
   407  0016                     	;# 
   408  0017                     	;# 
   409  0018                     	;# 
   410  0019                     	;# 
   411  001A                     	;# 
   412  001B                     	;# 
   413  001B                     	;# 
   414  001C                     	;# 
   415  001D                     	;# 
   416  001E                     	;# 
   417  001F                     	;# 
   418  0081                     	;# 
   419  0085                     	;# 
   420  0086                     	;# 
   421  0087                     	;# 
   422  0088                     	;# 
   423  0089                     	;# 
   424  008C                     	;# 
   425  008D                     	;# 
   426  008E                     	;# 
   427  008F                     	;# 
   428  0090                     	;# 
   429  0091                     	;# 
   430  0092                     	;# 
   431  0093                     	;# 
   432  0093                     	;# 
   433  0093                     	;# 
   434  0094                     	;# 
   435  0095                     	;# 
   436  0096                     	;# 
   437  0097                     	;# 
   438  0098                     	;# 
   439  0099                     	;# 
   440  009A                     	;# 
   441  009B                     	;# 
   442  009C                     	;# 
   443  009D                     	;# 
   444  009E                     	;# 
   445  009F                     	;# 
   446  0105                     	;# 
   447  0107                     	;# 
   448  0108                     	;# 
   449  0109                     	;# 
   450  010C                     	;# 
   451  010C                     	;# 
   452  010D                     	;# 
   453  010E                     	;# 
   454  010F                     	;# 
   455  0185                     	;# 
   456  0187                     	;# 
   457  0188                     	;# 
   458  0189                     	;# 
   459  018C                     	;# 
   460  018D                     	;# 
   461                           
   462                           	psect	strings
   463  0400                     __pstrings:
   464  0400                     stringtab:
   465  0400                     __stringtab:
   466                           
   467                           ;	String table - string pointers are 1 byte each
   468  0400  1BFF               	btfsc	btemp+1,7
   469  0401  2C0A               	ljmp	stringcode
   470  0402  1383               	bcf	3,7
   471  0403  187F               	btfsc	btemp+1,0
   472  0404  1783               	bsf	3,7
   473  0405  0800               	movf	0,w
   474  0406  0A84               	incf	4,f
   475  0407  1903               	skipnz
   476  0408  0AFF               	incf	btemp+1,f
   477  0409  0008               	return
   478  040A                     stringcode:
   479  040A                     stringdir:
   480  040A  3004               	movlw	high stringdir
   481  040B  008A               	movwf	10
   482  040C  0804               	movf	4,w
   483  040D  0A84               	incf	4,f
   484  040E  0782               	addwf	2,f
   485  040F                     __stringbase:
   486  040F  3400               	retlw	0
   487  0410                     __end_of__stringtab:
   488  0410                     _dpowers:
   489  0410  3401               	retlw	1
   490  0411  3400               	retlw	0
   491  0412  340A               	retlw	10
   492  0413  3400               	retlw	0
   493  0414  3464               	retlw	100
   494  0415  3400               	retlw	0
   495  0416  34E8               	retlw	232
   496  0417  3403               	retlw	3
   497  0418  3410               	retlw	16
   498  0419  3427               	retlw	39
   499  041A                     __end_of_dpowers:
   500  001A                     _RCREG	set	26
   501  0018                     _RCSTAbits	set	24
   502  001E                     _ADRESH	set	30
   503  0008                     _PORTD	set	8
   504  000B                     _INTCONbits	set	11
   505  0006                     _PORTB	set	6
   506  0009                     _PORTE	set	9
   507  0005                     _PORTA	set	5
   508  001F                     _ADCON0bits	set	31
   509  000C                     _PIR1bits	set	12
   510  0038                     _RC0	set	56
   511  0039                     _RC1	set	57
   512  0098                     _TXSTAbits	set	152
   513  009A                     _SPBRGH	set	154
   514  0099                     _SPBRG	set	153
   515  0088                     _TRISD	set	136
   516  008C                     _PIE1bits	set	140
   517  009F                     _ADCON1bits	set	159
   518  008F                     _OSCCONbits	set	143
   519  0089                     _TRISE	set	137
   520  0086                     _TRISB	set	134
   521  0085                     _TRISA	set	133
   522  0438                     _TRISC0	set	1080
   523  0439                     _TRISC1	set	1081
   524  0187                     _BAUDCTLbits	set	391
   525  0189                     _ANSELH	set	393
   526  0188                     _ANSEL	set	392
   527  041A                     STR_1:
   528  041A  3453               	retlw	83	;'S'
   529  041B  3431               	retlw	49	;'1'
   530  041C  343A               	retlw	58	;':'
   531  041D  3420               	retlw	32	;' '
   532  041E  3420               	retlw	32	;' '
   533  041F  3420               	retlw	32	;' '
   534  0420  3420               	retlw	32	;' '
   535  0421  3453               	retlw	83	;'S'
   536  0422  3432               	retlw	50	;'2'
   537  0423  343A               	retlw	58	;':'
   538  0424  3420               	retlw	32	;' '
   539  0425  3420               	retlw	32	;' '
   540  0426  3420               	retlw	32	;' '
   541  0427  3453               	retlw	83	;'S'
   542  0428  3433               	retlw	51	;'3'
   543  0429  343A               	retlw	58	;':'
   544  042A  3400               	retlw	0
   545  042B                     STR_2:
   546  042B  3425               	retlw	37	;'%'
   547  042C  3464               	retlw	100	;'d'
   548  042D  342E               	retlw	46	;'.'
   549  042E  3425               	retlw	37	;'%'
   550  042F  3464               	retlw	100	;'d'
   551  0430  3425               	retlw	37	;'%'
   552  0431  3464               	retlw	100	;'d'
   553  0432  3400               	retlw	0
   554  042B                     
   555                           	psect	cinit
   556  000F                     start_initialization:	
   557                           ; #config settings
   558                           
   559  000F                     __initialization:
   560                           
   561                           ; Clear objects allocated to COMMON
   562  000F  01F7               	clrf	__pbssCOMMON& (0+127)
   563  0010  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   564  0011  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   565                           
   566                           ; Clear objects allocated to BANK0
   567  0012  1383               	bcf	3,7	;select IRP bank0
   568  0013  3020               	movlw	low __pbssBANK0
   569  0014  0084               	movwf	4
   570  0015  3046               	movlw	low (__pbssBANK0+38)
   571  0016  120A  118A  2561  120A  118A  	fcall	clear_ram0
   572  001B                     end_of_initialization:	
   573                           ;End of C runtime variable initialization code
   574                           
   575  001B                     __end_of__initialization:
   576  001B  0183               	clrf	3
   577  001C  120A  118A  2909   	ljmp	_main	;jump to C main() function
   578                           
   579                           	psect	bssCOMMON
   580  0077                     __pbssCOMMON:
   581  0077                     _cen:
   582  0077                     	ds	1
   583  0078                     _dec:
   584  0078                     	ds	1
   585  0079                     _uni:
   586  0079                     	ds	1
   587                           
   588                           	psect	bssBANK0
   589  0020                     __pbssBANK0:
   590  0020                     _dato:
   591  0020                     	ds	2
   592  0022                     _cont_U:
   593  0022                     	ds	1
   594  0023                     _cont2:
   595  0023                     	ds	1
   596  0024                     _cont1:
   597  0024                     	ds	1
   598  0025                     _buffer3:
   599  0025                     	ds	10
   600  002F                     _buffer2:
   601  002F                     	ds	10
   602  0039                     _buffer1:
   603  0039                     	ds	10
   604  0043                     _vol3:
   605  0043                     	ds	1
   606  0044                     _vol2:
   607  0044                     	ds	1
   608  0045                     _vol1:
   609  0045                     	ds	1
   610                           
   611                           	psect	clrtext
   612  0561                     clear_ram0:	
   613                           ;	Called with FSR containing the base address, and
   614                           ;	W with the last address+1
   615                           
   616  0561  0064               	clrwdt	;clear the watchdog before getting into this loop
   617  0562                     clrloop0:
   618  0562  0180               	clrf	0	;clear RAM location pointed to by FSR
   619  0563  0A84               	incf	4,f	;increment pointer
   620  0564  0604               	xorwf	4,w	;XOR with final address
   621  0565  1903               	btfsc	3,2	;have we reached the end yet?
   622  0566  3400               	retlw	0	;all done for this memory range, return
   623  0567  0604               	xorwf	4,w	;XOR again to restore value
   624  0568  2D62               	goto	clrloop0	;do the next byte
   625                           
   626                           	psect	cstackCOMMON
   627  0070                     __pcstackCOMMON:
   628  0070                     ?_ADC:
   629  0070                     ??_ADC:	
   630                           ; 1 bytes @ 0x0
   631                           
   632  0070                     ?_obtener_dato:	
   633                           ; 1 bytes @ 0x0
   634                           
   635  0070                     ??_obtener_dato:	
   636                           ; 1 bytes @ 0x0
   637                           
   638  0070                     ?_setup:	
   639                           ; 1 bytes @ 0x0
   640                           
   641  0070                     ?_conversion:	
   642                           ; 1 bytes @ 0x0
   643                           
   644  0070                     ?_conversion_char:	
   645                           ; 1 bytes @ 0x0
   646                           
   647  0070                     ?_chequeo:	
   648                           ; 1 bytes @ 0x0
   649                           
   650  0070                     ?_config_USART:	
   651                           ; 1 bytes @ 0x0
   652                           
   653  0070                     ?_Iniciar_LCD:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0070                     ?_Limpiar_pantallaLCD:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  0070                     ?_isr:	
   660                           ; 1 bytes @ 0x0
   661                           
   662  0070                     ?_main:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0070                     ?_prender_ELCD:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0070                     ?_Escribir_comandoLCD:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  0070                     ?_Escribir_datosLCD:	
   672                           ; 1 bytes @ 0x0
   673                           
   674                           
   675                           ; 1 bytes @ 0x0
   676  0070                     	ds	2
   677  0072                     ??_isr:
   678                           
   679                           ; 1 bytes @ 0x2
   680  0072                     	ds	2
   681  0074                     ??_conversion:
   682  0074                     ??_config_USART:	
   683                           ; 1 bytes @ 0x4
   684                           
   685  0074                     ??_prender_ELCD:	
   686                           ; 1 bytes @ 0x4
   687                           
   688  0074                     ??___awdiv:	
   689                           ; 1 bytes @ 0x4
   690                           
   691  0074                     ??___awmod:	
   692                           ; 1 bytes @ 0x4
   693                           
   694  0074                     ??___lwdiv:	
   695                           ; 1 bytes @ 0x4
   696                           
   697                           
   698                           ; 1 bytes @ 0x4
   699  0074                     	ds	1
   700  0075                     ??_Escribir_comandoLCD:
   701  0075                     ??_Escribir_datosLCD:	
   702                           ; 1 bytes @ 0x5
   703                           
   704  0075                     ??___lwmod:	
   705                           ; 1 bytes @ 0x5
   706                           
   707  0075                     Escribir_comandoLCD@Comando:	
   708                           ; 1 bytes @ 0x5
   709                           
   710  0075                     Escribir_datosLCD@LCDchar:	
   711                           ; 1 bytes @ 0x5
   712                           
   713  0075                     ___awmod@counter:	
   714                           ; 1 bytes @ 0x5
   715                           
   716                           
   717                           ; 1 bytes @ 0x5
   718  0075                     	ds	1
   719  0076                     ??_setup:
   720  0076                     ?_set_cursor:	
   721                           ; 1 bytes @ 0x6
   722                           
   723  0076                     ??_Escribir_stringLCD:	
   724                           ; 1 bytes @ 0x6
   725                           
   726  0076                     ??_Iniciar_LCD:	
   727                           ; 1 bytes @ 0x6
   728                           
   729  0076                     set_cursor@b:	
   730                           ; 1 bytes @ 0x6
   731                           
   732  0076                     ___awmod@sign:	
   733                           ; 1 bytes @ 0x6
   734                           
   735  0076                     ___lwmod@counter:	
   736                           ; 1 bytes @ 0x6
   737                           
   738                           
   739                           ; 1 bytes @ 0x6
   740  0076                     	ds	1
   741  0077                     ??_set_cursor:
   742                           
   743                           	psect	cstackBANK0
   744  0046                     __pcstackBANK0:	
   745                           ; 1 bytes @ 0x7
   746                           
   747  0046                     ?_Escribir_stringLCD:
   748  0046                     ??_Limpiar_pantallaLCD:	
   749                           ; 1 bytes @ 0x0
   750                           
   751  0046                     ?___awdiv:	
   752                           ; 1 bytes @ 0x0
   753                           
   754  0046                     ?___awmod:	
   755                           ; 2 bytes @ 0x0
   756                           
   757  0046                     ?___lwdiv:	
   758                           ; 2 bytes @ 0x0
   759                           
   760  0046                     set_cursor@a:	
   761                           ; 2 bytes @ 0x0
   762                           
   763  0046                     Escribir_stringLCD@d:	
   764                           ; 1 bytes @ 0x0
   765                           
   766  0046                     ___awdiv@divisor:	
   767                           ; 2 bytes @ 0x0
   768                           
   769  0046                     ___awmod@divisor:	
   770                           ; 2 bytes @ 0x0
   771                           
   772  0046                     ___lwdiv@divisor:	
   773                           ; 2 bytes @ 0x0
   774                           
   775                           
   776                           ; 2 bytes @ 0x0
   777  0046                     	ds	2
   778  0048                     ___awdiv@dividend:
   779  0048                     ___awmod@dividend:	
   780                           ; 2 bytes @ 0x2
   781                           
   782  0048                     ___lwdiv@dividend:	
   783                           ; 2 bytes @ 0x2
   784                           
   785                           
   786                           ; 2 bytes @ 0x2
   787  0048                     	ds	2
   788  004A                     ___awdiv@counter:
   789  004A                     ___lwdiv@counter:	
   790                           ; 1 bytes @ 0x4
   791                           
   792                           
   793                           ; 1 bytes @ 0x4
   794  004A                     	ds	1
   795  004B                     ___awdiv@sign:
   796  004B                     ___lwdiv@quotient:	
   797                           ; 1 bytes @ 0x5
   798                           
   799                           
   800                           ; 2 bytes @ 0x5
   801  004B                     	ds	1
   802  004C                     ___awdiv@quotient:
   803                           
   804                           ; 2 bytes @ 0x6
   805  004C                     	ds	1
   806  004D                     ?___lwmod:
   807  004D                     ___lwmod@divisor:	
   808                           ; 2 bytes @ 0x7
   809                           
   810                           
   811                           ; 2 bytes @ 0x7
   812  004D                     	ds	1
   813  004E                     ?_divisor:
   814  004E                     divisor@dig:	
   815                           ; 1 bytes @ 0x8
   816                           
   817                           
   818                           ; 1 bytes @ 0x8
   819  004E                     	ds	1
   820  004F                     ??_divisor:
   821  004F                     ___lwmod@dividend:	
   822                           ; 1 bytes @ 0x9
   823                           
   824                           
   825                           ; 2 bytes @ 0x9
   826  004F                     	ds	2
   827  0051                     ?_sprintf:
   828  0051                     divisor@a:	
   829                           ; 2 bytes @ 0xB
   830                           
   831  0051                     sprintf@f:	
   832                           ; 1 bytes @ 0xB
   833                           
   834                           
   835                           ; 1 bytes @ 0xB
   836  0051                     	ds	1
   837  0052                     divisor@b:
   838                           
   839                           ; 2 bytes @ 0xC
   840  0052                     	ds	2
   841  0054                     divisor@i:
   842                           
   843                           ; 2 bytes @ 0xE
   844  0054                     	ds	4
   845  0058                     ??_sprintf:
   846                           
   847                           ; 1 bytes @ 0x12
   848  0058                     	ds	3
   849  005B                     sprintf@ap:
   850                           
   851                           ; 1 bytes @ 0x15
   852  005B                     	ds	1
   853  005C                     sprintf@flag:
   854                           
   855                           ; 1 bytes @ 0x16
   856  005C                     	ds	1
   857  005D                     sprintf@prec:
   858                           
   859                           ; 1 bytes @ 0x17
   860  005D                     	ds	1
   861  005E                     sprintf@val:
   862                           
   863                           ; 2 bytes @ 0x18
   864  005E                     	ds	2
   865  0060                     sprintf@sp:
   866                           
   867                           ; 1 bytes @ 0x1A
   868  0060                     	ds	1
   869  0061                     sprintf@c:
   870                           
   871                           ; 1 bytes @ 0x1B
   872  0061                     	ds	1
   873  0062                     ??_conversion_char:
   874  0062                     ??_chequeo:	
   875                           ; 1 bytes @ 0x1C
   876                           
   877                           
   878                           ; 1 bytes @ 0x1C
   879  0062                     	ds	7
   880  0069                     ??_main:
   881                           
   882                           ; 1 bytes @ 0x23
   883  0069                     	ds	1
   884                           
   885                           	psect	maintext
   886  0109                     __pmaintext:	
   887 ;;
   888 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   889 ;;
   890 ;; *************** function _main *****************
   891 ;; Defined at:
   892 ;;		line 79 in file "LAB2.c"
   893 ;; Parameters:    Size  Location     Type
   894 ;;		None
   895 ;; Auto vars:     Size  Location     Type
   896 ;;		None
   897 ;; Return value:  Size  Location     Type
   898 ;;                  1    wreg      void 
   899 ;; Registers used:
   900 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   901 ;; Tracked objects:
   902 ;;		On entry : B00/0
   903 ;;		On exit  : 0/0
   904 ;;		Unchanged: 0/0
   905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   906 ;;      Params:         0       0       0       0       0
   907 ;;      Locals:         0       0       0       0       0
   908 ;;      Temps:          0       1       0       0       0
   909 ;;      Totals:         0       1       0       0       0
   910 ;;Total ram usage:        1 bytes
   911 ;; Hardware stack levels required when called: 6
   912 ;; This function calls:
   913 ;;		_Escribir_stringLCD
   914 ;;		_chequeo
   915 ;;		_conversion
   916 ;;		_conversion_char
   917 ;;		_set_cursor
   918 ;;		_setup
   919 ;; This function is called by:
   920 ;;		Startup code after reset
   921 ;; This function uses a non-reentrant model
   922 ;;
   923                           
   924                           
   925                           ;psect for function _main
   926  0109                     _main:
   927  0109                     l1972:	
   928                           ;incstack = 0
   929                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   930                           
   931                           
   932                           ;LAB2.c: 80:     setup();
   933  0109  120A  118A  22EE  120A  118A  	fcall	_setup
   934  010E                     l1974:
   935                           
   936                           ;LAB2.c: 81:     ADCON0bits.GO = 1;
   937  010E  1283               	bcf	3,5	;RP0=0, select bank0
   938  010F  1303               	bcf	3,6	;RP1=0, select bank0
   939  0110  149F               	bsf	31,1	;volatile
   940  0111                     l94:	
   941                           ;LAB2.c: 82:     while(1){
   942                           
   943                           
   944                           ;LAB2.c: 84:         conversion();
   945  0111  120A  118A  2433  120A  118A  	fcall	_conversion
   946                           
   947                           ;LAB2.c: 87:         set_cursor(1,1);
   948  0116  01F6               	clrf	set_cursor@b
   949  0117  0AF6               	incf	set_cursor@b,f
   950  0118  3001               	movlw	1
   951  0119  120A  118A  24AA  120A  118A  	fcall	_set_cursor
   952  011E                     l1976:
   953                           
   954                           ;LAB2.c: 88:         Escribir_stringLCD("S1:    S2:   S3:");
   955  011E  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   956  011F  1283               	bcf	3,5	;RP0=0, select bank0
   957  0120  1303               	bcf	3,6	;RP1=0, select bank0
   958  0121  00C6               	movwf	Escribir_stringLCD@d
   959  0122  3080               	movlw	128
   960  0123  00C7               	movwf	Escribir_stringLCD@d+1
   961  0124  120A  118A  245F  120A  118A  	fcall	_Escribir_stringLCD
   962  0129                     l1978:
   963                           
   964                           ;LAB2.c: 90:         conversion_char();
   965  0129  120A  118A  21E1  120A  118A  	fcall	_conversion_char
   966                           
   967                           ;LAB2.c: 92:         set_cursor(2,1);
   968  012E  01F6               	clrf	set_cursor@b
   969  012F  0AF6               	incf	set_cursor@b,f
   970  0130  3002               	movlw	2
   971  0131  120A  118A  24AA  120A  118A  	fcall	_set_cursor
   972  0136                     l1980:
   973                           
   974                           ;LAB2.c: 93:         Escribir_stringLCD(buffer1);
   975  0136  3039               	movlw	(low (_buffer1| 0))& (0+255)
   976  0137  1283               	bcf	3,5	;RP0=0, select bank0
   977  0138  1303               	bcf	3,6	;RP1=0, select bank0
   978  0139  00C6               	movwf	Escribir_stringLCD@d
   979  013A  3000               	movlw	0
   980  013B  00C7               	movwf	Escribir_stringLCD@d+1
   981  013C  120A  118A  245F  120A  118A  	fcall	_Escribir_stringLCD
   982  0141                     l1982:
   983                           
   984                           ;LAB2.c: 94:         set_cursor(2,7);
   985  0141  3007               	movlw	7
   986  0142  1283               	bcf	3,5	;RP0=0, select bank0
   987  0143  1303               	bcf	3,6	;RP1=0, select bank0
   988  0144  00E9               	movwf	??_main
   989  0145  0869               	movf	??_main,w
   990  0146  00F6               	movwf	set_cursor@b
   991  0147  3002               	movlw	2
   992  0148  120A  118A  24AA  120A  118A  	fcall	_set_cursor
   993                           
   994                           ;LAB2.c: 95:         Escribir_stringLCD(buffer2);
   995  014D  302F               	movlw	(low (_buffer2| 0))& (0+255)
   996  014E  1283               	bcf	3,5	;RP0=0, select bank0
   997  014F  1303               	bcf	3,6	;RP1=0, select bank0
   998  0150  00C6               	movwf	Escribir_stringLCD@d
   999  0151  3000               	movlw	0
  1000  0152  00C7               	movwf	Escribir_stringLCD@d+1
  1001  0153  120A  118A  245F  120A  118A  	fcall	_Escribir_stringLCD
  1002                           
  1003                           ;LAB2.c: 99:         chequeo();
  1004  0158  120A  118A  237C  120A  118A  	fcall	_chequeo
  1005  015D                     l1984:
  1006                           
  1007                           ;LAB2.c: 100:         set_cursor(2,12);
  1008  015D  300C               	movlw	12
  1009  015E  1283               	bcf	3,5	;RP0=0, select bank0
  1010  015F  1303               	bcf	3,6	;RP1=0, select bank0
  1011  0160  00E9               	movwf	??_main
  1012  0161  0869               	movf	??_main,w
  1013  0162  00F6               	movwf	set_cursor@b
  1014  0163  3002               	movlw	2
  1015  0164  120A  118A  24AA  120A  118A  	fcall	_set_cursor
  1016  0169                     l1986:
  1017                           
  1018                           ;LAB2.c: 101:         Escribir_stringLCD(buffer3);
  1019  0169  3025               	movlw	(low (_buffer3| 0))& (0+255)
  1020  016A  1283               	bcf	3,5	;RP0=0, select bank0
  1021  016B  1303               	bcf	3,6	;RP1=0, select bank0
  1022  016C  00C6               	movwf	Escribir_stringLCD@d
  1023  016D  3000               	movlw	0
  1024  016E  00C7               	movwf	Escribir_stringLCD@d+1
  1025  016F  120A  118A  245F  120A  118A  	fcall	_Escribir_stringLCD
  1026  0174  2911               	goto	l94
  1027  0175  120A  118A  280C   	ljmp	start
  1028  0178                     __end_of_main:
  1029                           
  1030                           	psect	text1
  1031  02EE                     __ptext1:	
  1032 ;; *************** function _setup *****************
  1033 ;; Defined at:
  1034 ;;		line 107 in file "LAB2.c"
  1035 ;; Parameters:    Size  Location     Type
  1036 ;;		None
  1037 ;; Auto vars:     Size  Location     Type
  1038 ;;		None
  1039 ;; Return value:  Size  Location     Type
  1040 ;;                  1    wreg      void 
  1041 ;; Registers used:
  1042 ;;		wreg, status,2, status,0, pclath, cstack
  1043 ;; Tracked objects:
  1044 ;;		On entry : 0/0
  1045 ;;		On exit  : 0/0
  1046 ;;		Unchanged: 0/0
  1047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1048 ;;      Params:         0       0       0       0       0
  1049 ;;      Locals:         0       0       0       0       0
  1050 ;;      Temps:          1       0       0       0       0
  1051 ;;      Totals:         1       0       0       0       0
  1052 ;;Total ram usage:        1 bytes
  1053 ;; Hardware stack levels used: 1
  1054 ;; Hardware stack levels required when called: 5
  1055 ;; This function calls:
  1056 ;;		_Iniciar_LCD
  1057 ;;		_Limpiar_pantallaLCD
  1058 ;;		_config_USART
  1059 ;; This function is called by:
  1060 ;;		_main
  1061 ;; This function uses a non-reentrant model
  1062 ;;
  1063                           
  1064                           
  1065                           ;psect for function _setup
  1066  02EE                     _setup:
  1067  02EE                     l1900:	
  1068                           ;incstack = 0
  1069                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
  1070                           
  1071                           
  1072                           ;LAB2.c: 110:     ANSEL = 0b0011;
  1073  02EE  3003               	movlw	3
  1074  02EF  1683               	bsf	3,5	;RP0=1, select bank3
  1075  02F0  1703               	bsf	3,6	;RP1=1, select bank3
  1076  02F1  0088               	movwf	8	;volatile
  1077  02F2                     l1902:
  1078                           
  1079                           ;LAB2.c: 111:     ANSELH = 0;
  1080  02F2  0189               	clrf	9	;volatile
  1081  02F3                     l1904:
  1082                           
  1083                           ;LAB2.c: 113:     TRISA = 0b0011;
  1084  02F3  3003               	movlw	3
  1085  02F4  1683               	bsf	3,5	;RP0=1, select bank1
  1086  02F5  1303               	bcf	3,6	;RP1=0, select bank1
  1087  02F6  0085               	movwf	5	;volatile
  1088                           
  1089                           ;LAB2.c: 114:     TRISB = 0;
  1090  02F7  0186               	clrf	6	;volatile
  1091                           
  1092                           ;LAB2.c: 115:     TRISE = 0;
  1093  02F8  0189               	clrf	9	;volatile
  1094                           
  1095                           ;LAB2.c: 117:     PORTA = 0;
  1096  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  1097  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  1098  02FB  0185               	clrf	5	;volatile
  1099                           
  1100                           ;LAB2.c: 118:     PORTE = 0;
  1101  02FC  0189               	clrf	9	;volatile
  1102                           
  1103                           ;LAB2.c: 119:     PORTB = 0;
  1104  02FD  0186               	clrf	6	;volatile
  1105  02FE                     l1906:
  1106                           
  1107                           ;LAB2.c: 122:     OSCCONbits.IRCF = 0b0110;
  1108  02FE  1683               	bsf	3,5	;RP0=1, select bank1
  1109  02FF  1303               	bcf	3,6	;RP1=0, select bank1
  1110  0300  080F               	movf	15,w	;volatile
  1111  0301  398F               	andlw	-113
  1112  0302  3860               	iorlw	96
  1113  0303  008F               	movwf	15	;volatile
  1114  0304                     l1908:
  1115                           
  1116                           ;LAB2.c: 123:     OSCCONbits.SCS = 1;
  1117  0304  140F               	bsf	15,0	;volatile
  1118  0305                     l1910:
  1119                           
  1120                           ;LAB2.c: 126:     config_USART();
  1121  0305  120A  118A  251A  120A  118A  	fcall	_config_USART
  1122  030A                     l1912:
  1123                           
  1124                           ;LAB2.c: 129:     ADCON1bits.ADFM = 0;
  1125  030A  1683               	bsf	3,5	;RP0=1, select bank1
  1126  030B  1303               	bcf	3,6	;RP1=0, select bank1
  1127  030C  139F               	bcf	31,7	;volatile
  1128  030D                     l1914:
  1129                           
  1130                           ;LAB2.c: 130:     ADCON1bits.VCFG0 = 0;
  1131  030D  121F               	bcf	31,4	;volatile
  1132  030E                     l1916:
  1133                           
  1134                           ;LAB2.c: 131:     ADCON1bits.VCFG1 = 0;
  1135  030E  129F               	bcf	31,5	;volatile
  1136  030F                     l1918:
  1137                           
  1138                           ;LAB2.c: 133:     ADCON0bits.ADCS = 0b01;
  1139  030F  1283               	bcf	3,5	;RP0=0, select bank0
  1140  0310  1303               	bcf	3,6	;RP1=0, select bank0
  1141  0311  081F               	movf	31,w	;volatile
  1142  0312  393F               	andlw	-193
  1143  0313  3840               	iorlw	64
  1144  0314  009F               	movwf	31	;volatile
  1145  0315                     l1920:
  1146                           
  1147                           ;LAB2.c: 134:     ADCON0bits.CHS = 0;
  1148  0315  30C3               	movlw	-61
  1149  0316  059F               	andwf	31,f	;volatile
  1150  0317                     l1922:
  1151                           
  1152                           ;LAB2.c: 135:     ADCON0bits.ADON = 1;
  1153  0317  141F               	bsf	31,0	;volatile
  1154  0318                     l1924:
  1155                           
  1156                           ;LAB2.c: 136:     _delay((unsigned long)((50)*(4000000/4000000.0)));
  1157  0318  3010               	movlw	16
  1158  0319  00F6               	movwf	??_setup
  1159  031A                     u1507:
  1160  031A  0BF6               	decfsz	??_setup,f
  1161  031B  2B1A               	goto	u1507
  1162  031C  0000               	nop
  1163  031D                     l1926:
  1164                           
  1165                           ;LAB2.c: 139:     PIR1bits.ADIF = 0;
  1166  031D  1283               	bcf	3,5	;RP0=0, select bank0
  1167  031E  1303               	bcf	3,6	;RP1=0, select bank0
  1168  031F  130C               	bcf	12,6	;volatile
  1169  0320                     l1928:
  1170                           
  1171                           ;LAB2.c: 140:     PIE1bits.ADIE = 1;
  1172  0320  1683               	bsf	3,5	;RP0=1, select bank1
  1173  0321  1303               	bcf	3,6	;RP1=0, select bank1
  1174  0322  170C               	bsf	12,6	;volatile
  1175  0323                     l1930:
  1176                           
  1177                           ;LAB2.c: 141:     PIR1bits.RCIF = 0;
  1178  0323  1283               	bcf	3,5	;RP0=0, select bank0
  1179  0324  1303               	bcf	3,6	;RP1=0, select bank0
  1180  0325  128C               	bcf	12,5	;volatile
  1181  0326                     l1932:
  1182                           
  1183                           ;LAB2.c: 142:     PIE1bits.RCIE = 1;
  1184  0326  1683               	bsf	3,5	;RP0=1, select bank1
  1185  0327  1303               	bcf	3,6	;RP1=0, select bank1
  1186  0328  168C               	bsf	12,5	;volatile
  1187  0329                     l1934:
  1188                           
  1189                           ;LAB2.c: 143:     INTCONbits.PEIE = 1;
  1190  0329  170B               	bsf	11,6	;volatile
  1191  032A                     l1936:
  1192                           
  1193                           ;LAB2.c: 144:     INTCONbits.GIE = 1;
  1194  032A  178B               	bsf	11,7	;volatile
  1195  032B                     l1938:
  1196                           
  1197                           ;LAB2.c: 147:     Iniciar_LCD();
  1198  032B  120A  118A  2487  120A  118A  	fcall	_Iniciar_LCD
  1199  0330                     l1940:
  1200                           
  1201                           ;LAB2.c: 148:     Limpiar_pantallaLCD();
  1202  0330  120A  118A  252D  120A  118A  	fcall	_Limpiar_pantallaLCD
  1203  0335                     l100:
  1204  0335  0008               	return
  1205  0336                     __end_of_setup:
  1206                           
  1207                           	psect	text2
  1208  051A                     __ptext2:	
  1209 ;; *************** function _config_USART *****************
  1210 ;; Defined at:
  1211 ;;		line 12 in file "USART.c"
  1212 ;; Parameters:    Size  Location     Type
  1213 ;;		None
  1214 ;; Auto vars:     Size  Location     Type
  1215 ;;		None
  1216 ;; Return value:  Size  Location     Type
  1217 ;;                  1    wreg      void 
  1218 ;; Registers used:
  1219 ;;		wreg, status,2
  1220 ;; Tracked objects:
  1221 ;;		On entry : 0/0
  1222 ;;		On exit  : 0/0
  1223 ;;		Unchanged: 0/0
  1224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1225 ;;      Params:         0       0       0       0       0
  1226 ;;      Locals:         0       0       0       0       0
  1227 ;;      Temps:          0       0       0       0       0
  1228 ;;      Totals:         0       0       0       0       0
  1229 ;;Total ram usage:        0 bytes
  1230 ;; Hardware stack levels used: 1
  1231 ;; Hardware stack levels required when called: 2
  1232 ;; This function calls:
  1233 ;;		Nothing
  1234 ;; This function is called by:
  1235 ;;		_setup
  1236 ;; This function uses a non-reentrant model
  1237 ;;
  1238                           
  1239                           
  1240                           ;psect for function _config_USART
  1241  051A                     _config_USART:
  1242  051A                     l1386:	
  1243                           ;incstack = 0
  1244                           ; Regs used in _config_USART: [wreg+status,2]
  1245                           
  1246                           
  1247                           ;USART.c: 14:     SPBRG = 5;
  1248  051A  3005               	movlw	5
  1249  051B  1683               	bsf	3,5	;RP0=1, select bank1
  1250  051C  1303               	bcf	3,6	;RP1=0, select bank1
  1251  051D  0099               	movwf	25	;volatile
  1252  051E                     l1388:
  1253                           
  1254                           ;USART.c: 15:     SPBRGH = 0;
  1255  051E  019A               	clrf	26	;volatile
  1256  051F                     l1390:
  1257                           
  1258                           ;USART.c: 17:     TXSTAbits.SYNC = 0;
  1259  051F  1218               	bcf	24,4	;volatile
  1260  0520                     l1392:
  1261                           
  1262                           ;USART.c: 18:     TXSTAbits.BRGH = 0;
  1263  0520  1118               	bcf	24,2	;volatile
  1264  0521                     l1394:
  1265                           
  1266                           ;USART.c: 20:     BAUDCTLbits.BRG16 = 0;
  1267  0521  1683               	bsf	3,5	;RP0=1, select bank3
  1268  0522  1703               	bsf	3,6	;RP1=1, select bank3
  1269  0523  1187               	bcf	7,3	;volatile
  1270  0524                     l1396:
  1271                           
  1272                           ;USART.c: 22:     RCSTAbits.SPEN = 1;
  1273  0524  1283               	bcf	3,5	;RP0=0, select bank0
  1274  0525  1303               	bcf	3,6	;RP1=0, select bank0
  1275  0526  1798               	bsf	24,7	;volatile
  1276  0527                     l1398:
  1277                           
  1278                           ;USART.c: 23:     RCSTAbits.RX9 = 0;
  1279  0527  1318               	bcf	24,6	;volatile
  1280  0528                     l1400:
  1281                           
  1282                           ;USART.c: 24:     RCSTAbits.CREN = 1;
  1283  0528  1618               	bsf	24,4	;volatile
  1284  0529                     l1402:
  1285                           
  1286                           ;USART.c: 26:     TXSTAbits.TXEN = 1;
  1287  0529  1683               	bsf	3,5	;RP0=1, select bank1
  1288  052A  1303               	bcf	3,6	;RP1=0, select bank1
  1289  052B  1698               	bsf	24,5	;volatile
  1290  052C                     l206:
  1291  052C  0008               	return
  1292  052D                     __end_of_config_USART:
  1293                           
  1294                           	psect	text3
  1295  052D                     __ptext3:	
  1296 ;; *************** function _Limpiar_pantallaLCD *****************
  1297 ;; Defined at:
  1298 ;;		line 52 in file "LCD.c"
  1299 ;; Parameters:    Size  Location     Type
  1300 ;;		None
  1301 ;; Auto vars:     Size  Location     Type
  1302 ;;		None
  1303 ;; Return value:  Size  Location     Type
  1304 ;;                  1    wreg      void 
  1305 ;; Registers used:
  1306 ;;		wreg, status,2, status,0, pclath, cstack
  1307 ;; Tracked objects:
  1308 ;;		On entry : 0/0
  1309 ;;		On exit  : 0/0
  1310 ;;		Unchanged: 0/0
  1311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1312 ;;      Params:         0       0       0       0       0
  1313 ;;      Locals:         0       0       0       0       0
  1314 ;;      Temps:          0       2       0       0       0
  1315 ;;      Totals:         0       2       0       0       0
  1316 ;;Total ram usage:        2 bytes
  1317 ;; Hardware stack levels used: 1
  1318 ;; Hardware stack levels required when called: 4
  1319 ;; This function calls:
  1320 ;;		_Escribir_comandoLCD
  1321 ;; This function is called by:
  1322 ;;		_setup
  1323 ;; This function uses a non-reentrant model
  1324 ;;
  1325                           
  1326                           
  1327                           ;psect for function _Limpiar_pantallaLCD
  1328  052D                     _Limpiar_pantallaLCD:
  1329  052D                     l1814:	
  1330                           ;incstack = 0
  1331                           ; Regs used in _Limpiar_pantallaLCD: [wreg+status,2+status,0+pclath+cstack]
  1332                           
  1333                           
  1334                           ;LCD.c: 53:     Escribir_comandoLCD(0x01);
  1335  052D  3001               	movlw	1
  1336  052E  120A  118A  253F  120A  118A  	fcall	_Escribir_comandoLCD
  1337  0533                     l1816:
  1338                           
  1339                           ;LCD.c: 54:     _delay((unsigned long)((4)*(8000000/4000.0)));
  1340  0533  300B               	movlw	11
  1341  0534  1283               	bcf	3,5	;RP0=0, select bank0
  1342  0535  1303               	bcf	3,6	;RP1=0, select bank0
  1343  0536  00C7               	movwf	??_Limpiar_pantallaLCD+1
  1344  0537  3061               	movlw	97
  1345  0538  00C6               	movwf	??_Limpiar_pantallaLCD
  1346  0539                     u1517:
  1347  0539  0BC6               	decfsz	??_Limpiar_pantallaLCD,f
  1348  053A  2D39               	goto	u1517
  1349  053B  0BC7               	decfsz	??_Limpiar_pantallaLCD+1,f
  1350  053C  2D39               	goto	u1517
  1351  053D  2D3E               	nop2
  1352  053E                     l149:
  1353  053E  0008               	return
  1354  053F                     __end_of_Limpiar_pantallaLCD:
  1355                           
  1356                           	psect	text4
  1357  0487                     __ptext4:	
  1358 ;; *************** function _Iniciar_LCD *****************
  1359 ;; Defined at:
  1360 ;;		line 32 in file "LCD.c"
  1361 ;; Parameters:    Size  Location     Type
  1362 ;;		None
  1363 ;; Auto vars:     Size  Location     Type
  1364 ;;		None
  1365 ;; Return value:  Size  Location     Type
  1366 ;;                  1    wreg      void 
  1367 ;; Registers used:
  1368 ;;		wreg, status,2, status,0, pclath, cstack
  1369 ;; Tracked objects:
  1370 ;;		On entry : 0/0
  1371 ;;		On exit  : 0/0
  1372 ;;		Unchanged: 0/0
  1373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1374 ;;      Params:         0       0       0       0       0
  1375 ;;      Locals:         0       0       0       0       0
  1376 ;;      Temps:          0       0       0       0       0
  1377 ;;      Totals:         0       0       0       0       0
  1378 ;;Total ram usage:        0 bytes
  1379 ;; Hardware stack levels used: 1
  1380 ;; Hardware stack levels required when called: 4
  1381 ;; This function calls:
  1382 ;;		_Escribir_comandoLCD
  1383 ;; This function is called by:
  1384 ;;		_setup
  1385 ;; This function uses a non-reentrant model
  1386 ;;
  1387                           
  1388                           
  1389                           ;psect for function _Iniciar_LCD
  1390  0487                     _Iniciar_LCD:
  1391  0487                     l1798:	
  1392                           ;incstack = 0
  1393                           ; Regs used in _Iniciar_LCD: [wreg+status,2+status,0+pclath+cstack]
  1394                           
  1395                           
  1396                           ;LCD.c: 33:     RC1 = 0;
  1397  0487  1283               	bcf	3,5	;RP0=0, select bank0
  1398  0488  1303               	bcf	3,6	;RP1=0, select bank0
  1399  0489  1087               	bcf	7,1	;volatile
  1400                           
  1401                           ;LCD.c: 34:     RC0 = 0;
  1402  048A  1007               	bcf	7,0	;volatile
  1403  048B                     l1800:
  1404                           
  1405                           ;LCD.c: 35:     PORTD = 0;
  1406  048B  0188               	clrf	8	;volatile
  1407  048C                     l1802:
  1408                           
  1409                           ;LCD.c: 36:     TRISC1 = 0;
  1410  048C  1683               	bsf	3,5	;RP0=1, select bank1
  1411  048D  1303               	bcf	3,6	;RP1=0, select bank1
  1412  048E  1087               	bcf	7,1	;volatile
  1413  048F                     l1804:
  1414                           
  1415                           ;LCD.c: 37:     TRISC0 = 0;
  1416  048F  1007               	bcf	7,0	;volatile
  1417                           
  1418                           ;LCD.c: 38:     TRISD = 0;
  1419  0490  0188               	clrf	8	;volatile
  1420  0491                     l1806:
  1421                           
  1422                           ;LCD.c: 40:     Escribir_comandoLCD(0x38);
  1423  0491  3038               	movlw	56
  1424  0492  120A  118A  253F  120A  118A  	fcall	_Escribir_comandoLCD
  1425  0497                     l1808:
  1426                           
  1427                           ;LCD.c: 41:     Escribir_comandoLCD(0x0C);
  1428  0497  300C               	movlw	12
  1429  0498  120A  118A  253F  120A  118A  	fcall	_Escribir_comandoLCD
  1430  049D                     l1810:
  1431                           
  1432                           ;LCD.c: 42:     Escribir_comandoLCD(0x01);
  1433  049D  3001               	movlw	1
  1434  049E  120A  118A  253F  120A  118A  	fcall	_Escribir_comandoLCD
  1435  04A3                     l1812:
  1436                           
  1437                           ;LCD.c: 43:     Escribir_comandoLCD(0x06);
  1438  04A3  3006               	movlw	6
  1439  04A4  120A  118A  253F  120A  118A  	fcall	_Escribir_comandoLCD
  1440  04A9                     l140:
  1441  04A9  0008               	return
  1442  04AA                     __end_of_Iniciar_LCD:
  1443                           
  1444                           	psect	text5
  1445  04AA                     __ptext5:	
  1446 ;; *************** function _set_cursor *****************
  1447 ;; Defined at:
  1448 ;;		line 57 in file "LCD.c"
  1449 ;; Parameters:    Size  Location     Type
  1450 ;;  a               1    wreg     unsigned char 
  1451 ;;  b               1    6[COMMON] unsigned char 
  1452 ;; Auto vars:     Size  Location     Type
  1453 ;;  a               1    0[BANK0 ] unsigned char 
  1454 ;; Return value:  Size  Location     Type
  1455 ;;                  1    wreg      void 
  1456 ;; Registers used:
  1457 ;;		wreg, status,2, status,0, pclath, cstack
  1458 ;; Tracked objects:
  1459 ;;		On entry : 0/0
  1460 ;;		On exit  : 0/0
  1461 ;;		Unchanged: 0/0
  1462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1463 ;;      Params:         1       0       0       0       0
  1464 ;;      Locals:         0       1       0       0       0
  1465 ;;      Temps:          0       0       0       0       0
  1466 ;;      Totals:         1       1       0       0       0
  1467 ;;Total ram usage:        2 bytes
  1468 ;; Hardware stack levels used: 1
  1469 ;; Hardware stack levels required when called: 4
  1470 ;; This function calls:
  1471 ;;		_Escribir_comandoLCD
  1472 ;; This function is called by:
  1473 ;;		_main
  1474 ;; This function uses a non-reentrant model
  1475 ;;
  1476                           
  1477                           
  1478                           ;psect for function _set_cursor
  1479  04AA                     _set_cursor:
  1480                           
  1481                           ;incstack = 0
  1482                           ; Regs used in _set_cursor: [wreg+status,2+status,0+pclath+cstack]
  1483                           ;set_cursor@a stored from wreg
  1484  04AA  1283               	bcf	3,5	;RP0=0, select bank0
  1485  04AB  1303               	bcf	3,6	;RP1=0, select bank0
  1486  04AC  00C6               	movwf	set_cursor@a
  1487  04AD                     l1942:
  1488                           
  1489                           ;LCD.c: 58:     if(a == 1){
  1490  04AD  0346               	decf	set_cursor@a,w
  1491  04AE  1D03               	btfss	3,2
  1492  04AF  2CB1               	goto	u1451
  1493  04B0  2CB2               	goto	u1450
  1494  04B1                     u1451:
  1495  04B1  2CB9               	goto	l1946
  1496  04B2                     u1450:
  1497  04B2                     l1944:
  1498                           
  1499                           ;LCD.c: 59:         Escribir_comandoLCD(0x80 + (b-1));
  1500  04B2  0876               	movf	set_cursor@b,w
  1501  04B3  3E7F               	addlw	127
  1502  04B4  120A  118A  253F  120A  118A  	fcall	_Escribir_comandoLCD
  1503  04B9                     l1946:
  1504                           
  1505                           ;LCD.c: 61:     if(a == 2){
  1506  04B9  3002               	movlw	2
  1507  04BA  1283               	bcf	3,5	;RP0=0, select bank0
  1508  04BB  1303               	bcf	3,6	;RP1=0, select bank0
  1509  04BC  0646               	xorwf	set_cursor@a,w
  1510  04BD  1D03               	btfss	3,2
  1511  04BE  2CC0               	goto	u1461
  1512  04BF  2CC1               	goto	u1460
  1513  04C0                     u1461:
  1514  04C0  2CC8               	goto	l154
  1515  04C1                     u1460:
  1516  04C1                     l1948:
  1517                           
  1518                           ;LCD.c: 62:         Escribir_comandoLCD(0xC0 + (b-1));
  1519  04C1  0876               	movf	set_cursor@b,w
  1520  04C2  3EBF               	addlw	191
  1521  04C3  120A  118A  253F  120A  118A  	fcall	_Escribir_comandoLCD
  1522  04C8                     l154:
  1523  04C8  0008               	return
  1524  04C9                     __end_of_set_cursor:
  1525                           
  1526                           	psect	text6
  1527  053F                     __ptext6:	
  1528 ;; *************** function _Escribir_comandoLCD *****************
  1529 ;; Defined at:
  1530 ;;		line 18 in file "LCD.c"
  1531 ;; Parameters:    Size  Location     Type
  1532 ;;  Comando         1    wreg     unsigned char 
  1533 ;; Auto vars:     Size  Location     Type
  1534 ;;  Comando         1    5[COMMON] unsigned char 
  1535 ;; Return value:  Size  Location     Type
  1536 ;;                  1    wreg      void 
  1537 ;; Registers used:
  1538 ;;		wreg, status,2, status,0, pclath, cstack
  1539 ;; Tracked objects:
  1540 ;;		On entry : 0/0
  1541 ;;		On exit  : 0/0
  1542 ;;		Unchanged: 0/0
  1543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1544 ;;      Params:         0       0       0       0       0
  1545 ;;      Locals:         1       0       0       0       0
  1546 ;;      Temps:          0       0       0       0       0
  1547 ;;      Totals:         1       0       0       0       0
  1548 ;;Total ram usage:        1 bytes
  1549 ;; Hardware stack levels used: 1
  1550 ;; Hardware stack levels required when called: 3
  1551 ;; This function calls:
  1552 ;;		_prender_ELCD
  1553 ;; This function is called by:
  1554 ;;		_Iniciar_LCD
  1555 ;;		_Limpiar_pantallaLCD
  1556 ;;		_set_cursor
  1557 ;;		_shift_right
  1558 ;;		_shift_left
  1559 ;; This function uses a non-reentrant model
  1560 ;;
  1561                           
  1562                           
  1563                           ;psect for function _Escribir_comandoLCD
  1564  053F                     _Escribir_comandoLCD:
  1565                           
  1566                           ;incstack = 0
  1567                           ; Regs used in _Escribir_comandoLCD: [wreg+status,2+status,0+pclath+cstack]
  1568                           ;Escribir_comandoLCD@Comando stored from wreg
  1569  053F  00F5               	movwf	Escribir_comandoLCD@Comando
  1570  0540                     l1662:
  1571                           
  1572                           ;LCD.c: 19:     RC0 = 0;
  1573  0540  1283               	bcf	3,5	;RP0=0, select bank0
  1574  0541  1303               	bcf	3,6	;RP1=0, select bank0
  1575  0542  1007               	bcf	7,0	;volatile
  1576  0543                     l1664:
  1577                           
  1578                           ;LCD.c: 20:     PORTD = Comando;
  1579  0543  0875               	movf	Escribir_comandoLCD@Comando,w
  1580  0544  0088               	movwf	8	;volatile
  1581  0545                     l1666:
  1582                           
  1583                           ;LCD.c: 22:     prender_ELCD();
  1584  0545  120A  118A  2505  120A  118A  	fcall	_prender_ELCD
  1585  054A                     l134:
  1586  054A  0008               	return
  1587  054B                     __end_of_Escribir_comandoLCD:
  1588                           
  1589                           	psect	text7
  1590  01E1                     __ptext7:	
  1591 ;; *************** function _conversion_char *****************
  1592 ;; Defined at:
  1593 ;;		line 151 in file "LAB2.c"
  1594 ;; Parameters:    Size  Location     Type
  1595 ;;		None
  1596 ;; Auto vars:     Size  Location     Type
  1597 ;;		None
  1598 ;; Return value:  Size  Location     Type
  1599 ;;                  1    wreg      void 
  1600 ;; Registers used:
  1601 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1602 ;; Tracked objects:
  1603 ;;		On entry : 0/0
  1604 ;;		On exit  : 0/0
  1605 ;;		Unchanged: 0/0
  1606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1607 ;;      Params:         0       0       0       0       0
  1608 ;;      Locals:         0       0       0       0       0
  1609 ;;      Temps:          0       7       0       0       0
  1610 ;;      Totals:         0       7       0       0       0
  1611 ;;Total ram usage:        7 bytes
  1612 ;; Hardware stack levels used: 1
  1613 ;; Hardware stack levels required when called: 4
  1614 ;; This function calls:
  1615 ;;		_divisor
  1616 ;;		_sprintf
  1617 ;; This function is called by:
  1618 ;;		_main
  1619 ;; This function uses a non-reentrant model
  1620 ;;
  1621                           
  1622                           
  1623                           ;psect for function _conversion_char
  1624  01E1                     _conversion_char:
  1625  01E1                     l1958:	
  1626                           ;incstack = 0
  1627                           ; Regs used in _conversion_char: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1628                           
  1629                           
  1630                           ;LAB2.c: 152:     divisor(cont1, vol1);
  1631  01E1  3045               	movlw	(low (_vol1| 0))& (0+255)
  1632  01E2  1283               	bcf	3,5	;RP0=0, select bank0
  1633  01E3  1303               	bcf	3,6	;RP1=0, select bank0
  1634  01E4  00E2               	movwf	??_conversion_char
  1635  01E5  0862               	movf	??_conversion_char,w
  1636  01E6  00CE               	movwf	divisor@dig
  1637  01E7  0824               	movf	_cont1,w
  1638  01E8  120A  118A  2297  120A  118A  	fcall	_divisor
  1639                           
  1640                           ;LAB2.c: 153:     sprintf(buffer1, "%d.%d%d", vol1[2], vol1[1], vol1[0]);
  1641  01ED  301C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1642  01EE  1283               	bcf	3,5	;RP0=0, select bank0
  1643  01EF  1303               	bcf	3,6	;RP1=0, select bank0
  1644  01F0  00E2               	movwf	??_conversion_char
  1645  01F1  0862               	movf	??_conversion_char,w
  1646  01F2  00D1               	movwf	sprintf@f
  1647  01F3  0847               	movf	_vol1+2,w
  1648  01F4  00E3               	movwf	??_conversion_char+1
  1649  01F5  01E4               	clrf	??_conversion_char+2
  1650  01F6  0863               	movf	??_conversion_char+1,w
  1651  01F7  00D2               	movwf	?_sprintf+1
  1652  01F8  0864               	movf	??_conversion_char+2,w
  1653  01F9  00D3               	movwf	?_sprintf+2
  1654  01FA  0846               	movf	_vol1+1,w
  1655  01FB  00E5               	movwf	??_conversion_char+3
  1656  01FC  01E6               	clrf	??_conversion_char+4
  1657  01FD  0865               	movf	??_conversion_char+3,w
  1658  01FE  00D4               	movwf	?_sprintf+3
  1659  01FF  0866               	movf	??_conversion_char+4,w
  1660  0200  00D5               	movwf	?_sprintf+4
  1661  0201  0845               	movf	_vol1,w
  1662  0202  00E7               	movwf	??_conversion_char+5
  1663  0203  01E8               	clrf	??_conversion_char+6
  1664  0204  0867               	movf	??_conversion_char+5,w
  1665  0205  00D6               	movwf	?_sprintf+5
  1666  0206  0868               	movf	??_conversion_char+6,w
  1667  0207  00D7               	movwf	?_sprintf+6
  1668  0208  3039               	movlw	(low (_buffer1| 0))& (0+255)
  1669  0209  120A  118A  201F  120A  118A  	fcall	_sprintf
  1670                           
  1671                           ;LAB2.c: 155:     divisor(cont2, vol2);
  1672  020E  3044               	movlw	(low (_vol2| 0))& (0+255)
  1673  020F  1283               	bcf	3,5	;RP0=0, select bank0
  1674  0210  1303               	bcf	3,6	;RP1=0, select bank0
  1675  0211  00E2               	movwf	??_conversion_char
  1676  0212  0862               	movf	??_conversion_char,w
  1677  0213  00CE               	movwf	divisor@dig
  1678  0214  0823               	movf	_cont2,w
  1679  0215  120A  118A  2297  120A  118A  	fcall	_divisor
  1680                           
  1681                           ;LAB2.c: 156:     sprintf(buffer2, "%d.%d%d", vol2[2], vol2[1], vol2[0]);
  1682  021A  301C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1683  021B  1283               	bcf	3,5	;RP0=0, select bank0
  1684  021C  1303               	bcf	3,6	;RP1=0, select bank0
  1685  021D  00E2               	movwf	??_conversion_char
  1686  021E  0862               	movf	??_conversion_char,w
  1687  021F  00D1               	movwf	sprintf@f
  1688  0220  0846               	movf	_vol2+2,w
  1689  0221  00E3               	movwf	??_conversion_char+1
  1690  0222  01E4               	clrf	??_conversion_char+2
  1691  0223  0863               	movf	??_conversion_char+1,w
  1692  0224  00D2               	movwf	?_sprintf+1
  1693  0225  0864               	movf	??_conversion_char+2,w
  1694  0226  00D3               	movwf	?_sprintf+2
  1695  0227  0845               	movf	_vol2+1,w
  1696  0228  00E5               	movwf	??_conversion_char+3
  1697  0229  01E6               	clrf	??_conversion_char+4
  1698  022A  0865               	movf	??_conversion_char+3,w
  1699  022B  00D4               	movwf	?_sprintf+3
  1700  022C  0866               	movf	??_conversion_char+4,w
  1701  022D  00D5               	movwf	?_sprintf+4
  1702  022E  0844               	movf	_vol2,w
  1703  022F  00E7               	movwf	??_conversion_char+5
  1704  0230  01E8               	clrf	??_conversion_char+6
  1705  0231  0867               	movf	??_conversion_char+5,w
  1706  0232  00D6               	movwf	?_sprintf+5
  1707  0233  0868               	movf	??_conversion_char+6,w
  1708  0234  00D7               	movwf	?_sprintf+6
  1709  0235  302F               	movlw	(low (_buffer2| 0))& (0+255)
  1710  0236  120A  118A  201F  120A  118A  	fcall	_sprintf
  1711  023B                     l103:
  1712  023B  0008               	return
  1713  023C                     __end_of_conversion_char:
  1714                           
  1715                           	psect	text8
  1716  0433                     __ptext8:	
  1717 ;; *************** function _conversion *****************
  1718 ;; Defined at:
  1719 ;;		line 21 in file "ADC.c"
  1720 ;; Parameters:    Size  Location     Type
  1721 ;;		None
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;		None
  1724 ;; Return value:  Size  Location     Type
  1725 ;;                  1    wreg      void 
  1726 ;; Registers used:
  1727 ;;		wreg, status,2, status,0
  1728 ;; Tracked objects:
  1729 ;;		On entry : 0/0
  1730 ;;		On exit  : 0/0
  1731 ;;		Unchanged: 0/0
  1732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1733 ;;      Params:         0       0       0       0       0
  1734 ;;      Locals:         0       0       0       0       0
  1735 ;;      Temps:          1       0       0       0       0
  1736 ;;      Totals:         1       0       0       0       0
  1737 ;;Total ram usage:        1 bytes
  1738 ;; Hardware stack levels used: 1
  1739 ;; Hardware stack levels required when called: 2
  1740 ;; This function calls:
  1741 ;;		Nothing
  1742 ;; This function is called by:
  1743 ;;		_main
  1744 ;; This function uses a non-reentrant model
  1745 ;;
  1746                           
  1747                           
  1748                           ;psect for function _conversion
  1749  0433                     _conversion:
  1750  0433                     l1558:	
  1751                           ;incstack = 0
  1752                           ; Regs used in _conversion: [wreg+status,2+status,0]
  1753                           
  1754                           
  1755                           ;ADC.c: 22:     if(ADCON0bits.GO == 0){
  1756  0433  1283               	bcf	3,5	;RP0=0, select bank0
  1757  0434  1303               	bcf	3,6	;RP1=0, select bank0
  1758  0435  189F               	btfsc	31,1	;volatile
  1759  0436  2C38               	goto	u951
  1760  0437  2C39               	goto	u950
  1761  0438                     u951:
  1762  0438  2C5E               	goto	l189
  1763  0439                     u950:
  1764  0439                     l1560:
  1765                           
  1766                           ;ADC.c: 23:         if(ADCON0bits.CHS == 1){
  1767  0439  0C1F               	rrf	31,w	;volatile
  1768  043A  00F4               	movwf	??_conversion
  1769  043B  0C74               	rrf	??_conversion,w
  1770  043C  390F               	andlw	15
  1771  043D  3A01               	xorlw	1
  1772  043E  1D03               	skipz
  1773  043F  2C41               	goto	u961
  1774  0440  2C42               	goto	u960
  1775  0441                     u961:
  1776  0441  2C49               	goto	l1566
  1777  0442                     u960:
  1778  0442                     l1562:
  1779                           
  1780                           ;ADC.c: 24:             ADCON0bits.CHS = 0;
  1781  0442  30C3               	movlw	-61
  1782  0443  059F               	andwf	31,f	;volatile
  1783  0444                     l1564:
  1784                           
  1785                           ;ADC.c: 25:             _delay((unsigned long)((50)*(8000000/4000000.0)));
  1786  0444  3021               	movlw	33
  1787  0445  00F4               	movwf	??_conversion
  1788  0446                     u1527:
  1789  0446  0BF4               	decfsz	??_conversion,f
  1790  0447  2C46               	goto	u1527
  1791                           
  1792                           ;ADC.c: 26:         }
  1793  0448  2C57               	goto	l1572
  1794  0449                     l1566:
  1795  0449  0C1F               	rrf	31,w	;volatile
  1796  044A  00F4               	movwf	??_conversion
  1797  044B  0C74               	rrf	??_conversion,w
  1798  044C  390F               	andlw	15
  1799  044D  3A00               	xorlw	0
  1800  044E  1D03               	skipz
  1801  044F  2C51               	goto	u971
  1802  0450  2C52               	goto	u970
  1803  0451                     u971:
  1804  0451  2C57               	goto	l1572
  1805  0452                     u970:
  1806  0452                     l1568:
  1807                           
  1808                           ;ADC.c: 28:             ADCON0bits.CHS = 1;
  1809  0452  081F               	movf	31,w	;volatile
  1810  0453  39C3               	andlw	-61
  1811  0454  3804               	iorlw	4
  1812  0455  009F               	movwf	31	;volatile
  1813  0456  2C44               	goto	l1564
  1814  0457                     l1572:
  1815                           
  1816                           ;ADC.c: 31:         _delay((unsigned long)((50)*(8000000/4000000.0)));
  1817  0457  3021               	movlw	33
  1818  0458  00F4               	movwf	??_conversion
  1819  0459                     u1537:
  1820  0459  0BF4               	decfsz	??_conversion,f
  1821  045A  2C59               	goto	u1537
  1822  045B                     l1574:
  1823                           
  1824                           ;ADC.c: 32:         ADCON0bits.GO = 1;
  1825  045B  1283               	bcf	3,5	;RP0=0, select bank0
  1826  045C  1303               	bcf	3,6	;RP1=0, select bank0
  1827  045D  149F               	bsf	31,1	;volatile
  1828  045E                     l189:
  1829  045E  0008               	return
  1830  045F                     __end_of_conversion:
  1831                           
  1832                           	psect	text9
  1833  037C                     __ptext9:	
  1834 ;; *************** function _chequeo *****************
  1835 ;; Defined at:
  1836 ;;		line 168 in file "LAB2.c"
  1837 ;; Parameters:    Size  Location     Type
  1838 ;;		None
  1839 ;; Auto vars:     Size  Location     Type
  1840 ;;		None
  1841 ;; Return value:  Size  Location     Type
  1842 ;;                  1    wreg      void 
  1843 ;; Registers used:
  1844 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1845 ;; Tracked objects:
  1846 ;;		On entry : 0/0
  1847 ;;		On exit  : 0/0
  1848 ;;		Unchanged: 0/0
  1849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1850 ;;      Params:         0       0       0       0       0
  1851 ;;      Locals:         0       0       0       0       0
  1852 ;;      Temps:          0       7       0       0       0
  1853 ;;      Totals:         0       7       0       0       0
  1854 ;;Total ram usage:        7 bytes
  1855 ;; Hardware stack levels used: 1
  1856 ;; Hardware stack levels required when called: 4
  1857 ;; This function calls:
  1858 ;;		_divisor
  1859 ;;		_sprintf
  1860 ;; This function is called by:
  1861 ;;		_main
  1862 ;; This function uses a non-reentrant model
  1863 ;;
  1864                           
  1865                           
  1866                           ;psect for function _chequeo
  1867  037C                     _chequeo:
  1868  037C                     l1960:	
  1869                           ;incstack = 0
  1870                           ; Regs used in _chequeo: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1871                           
  1872                           
  1873                           ;LAB2.c: 169:     if(dato == 43){
  1874  037C  302B               	movlw	43
  1875  037D  1283               	bcf	3,5	;RP0=0, select bank0
  1876  037E  1303               	bcf	3,6	;RP1=0, select bank0
  1877  037F  0620               	xorwf	_dato,w
  1878  0380  0421               	iorwf	_dato+1,w
  1879  0381  1D03               	btfss	3,2
  1880  0382  2B84               	goto	u1481
  1881  0383  2B85               	goto	u1480
  1882  0384                     u1481:
  1883  0384  2B8A               	goto	l1964
  1884  0385                     u1480:
  1885  0385                     l1962:
  1886                           
  1887                           ;LAB2.c: 170:         cont_U++;
  1888  0385  3001               	movlw	1
  1889  0386  00E2               	movwf	??_chequeo
  1890  0387  0862               	movf	??_chequeo,w
  1891  0388  07A2               	addwf	_cont_U,f
  1892                           
  1893                           ;LAB2.c: 171:     }
  1894  0389  2B93               	goto	l1968
  1895  038A                     l1964:
  1896  038A  302D               	movlw	45
  1897  038B  0620               	xorwf	_dato,w
  1898  038C  0421               	iorwf	_dato+1,w
  1899  038D  1D03               	btfss	3,2
  1900  038E  2B90               	goto	u1491
  1901  038F  2B91               	goto	u1490
  1902  0390                     u1491:
  1903  0390  2B93               	goto	l1968
  1904  0391                     u1490:
  1905  0391                     l1966:
  1906                           
  1907                           ;LAB2.c: 173:         cont_U--;
  1908  0391  3001               	movlw	1
  1909  0392  02A2               	subwf	_cont_U,f
  1910  0393                     l1968:
  1911                           
  1912                           ;LAB2.c: 177:     divisor(cont_U, vol3);
  1913  0393  3043               	movlw	(low (_vol3| 0))& (0+255)
  1914  0394  00E2               	movwf	??_chequeo
  1915  0395  0862               	movf	??_chequeo,w
  1916  0396  00CE               	movwf	divisor@dig
  1917  0397  0822               	movf	_cont_U,w
  1918  0398  120A  118A  2297  120A  118A  	fcall	_divisor
  1919  039D                     l1970:
  1920                           
  1921                           ;LAB2.c: 178:     sprintf(buffer3, "%d.%d%d", vol3[2], vol3[1], vol3[0]);
  1922  039D  301C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1923  039E  1283               	bcf	3,5	;RP0=0, select bank0
  1924  039F  1303               	bcf	3,6	;RP1=0, select bank0
  1925  03A0  00E2               	movwf	??_chequeo
  1926  03A1  0862               	movf	??_chequeo,w
  1927  03A2  00D1               	movwf	sprintf@f
  1928  03A3  0845               	movf	_vol3+2,w
  1929  03A4  00E3               	movwf	??_chequeo+1
  1930  03A5  01E4               	clrf	??_chequeo+2
  1931  03A6  0863               	movf	??_chequeo+1,w
  1932  03A7  00D2               	movwf	?_sprintf+1
  1933  03A8  0864               	movf	??_chequeo+2,w
  1934  03A9  00D3               	movwf	?_sprintf+2
  1935  03AA  0844               	movf	_vol3+1,w
  1936  03AB  00E5               	movwf	??_chequeo+3
  1937  03AC  01E6               	clrf	??_chequeo+4
  1938  03AD  0865               	movf	??_chequeo+3,w
  1939  03AE  00D4               	movwf	?_sprintf+3
  1940  03AF  0866               	movf	??_chequeo+4,w
  1941  03B0  00D5               	movwf	?_sprintf+4
  1942  03B1  0843               	movf	_vol3,w
  1943  03B2  00E7               	movwf	??_chequeo+5
  1944  03B3  01E8               	clrf	??_chequeo+6
  1945  03B4  0867               	movf	??_chequeo+5,w
  1946  03B5  00D6               	movwf	?_sprintf+5
  1947  03B6  0868               	movf	??_chequeo+6,w
  1948  03B7  00D7               	movwf	?_sprintf+6
  1949  03B8  3025               	movlw	(low (_buffer3| 0))& (0+255)
  1950  03B9  120A  118A  201F  120A  118A  	fcall	_sprintf
  1951  03BE                     l114:
  1952  03BE  0008               	return
  1953  03BF                     __end_of_chequeo:
  1954                           
  1955                           	psect	text10
  1956  001F                     __ptext10:	
  1957 ;; *************** function _sprintf *****************
  1958 ;; Defined at:
  1959 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c"
  1960 ;; Parameters:    Size  Location     Type
  1961 ;;  sp              1    wreg     PTR unsigned char 
  1962 ;;		 -> buffer3(10), buffer2(10), buffer1(10), 
  1963 ;;  f               1   11[BANK0 ] PTR const unsigned char 
  1964 ;;		 -> STR_4(8), STR_3(8), STR_2(8), 
  1965 ;; Auto vars:     Size  Location     Type
  1966 ;;  sp              1   26[BANK0 ] PTR unsigned char 
  1967 ;;		 -> buffer3(10), buffer2(10), buffer1(10), 
  1968 ;;  tmpval          4    0        struct .
  1969 ;;  val             2   24[BANK0 ] unsigned int 
  1970 ;;  cp              2    0        PTR const unsigned char 
  1971 ;;  len             2    0        unsigned int 
  1972 ;;  c               1   27[BANK0 ] unsigned char 
  1973 ;;  prec            1   23[BANK0 ] char 
  1974 ;;  flag            1   22[BANK0 ] unsigned char 
  1975 ;;  ap              1   21[BANK0 ] PTR void [1]
  1976 ;;		 -> ?_sprintf(2), 
  1977 ;; Return value:  Size  Location     Type
  1978 ;;                  2   11[BANK0 ] int 
  1979 ;; Registers used:
  1980 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1981 ;; Tracked objects:
  1982 ;;		On entry : 0/0
  1983 ;;		On exit  : 0/0
  1984 ;;		Unchanged: 0/0
  1985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1986 ;;      Params:         0       7       0       0       0
  1987 ;;      Locals:         0       7       0       0       0
  1988 ;;      Temps:          0       3       0       0       0
  1989 ;;      Totals:         0      17       0       0       0
  1990 ;;Total ram usage:       17 bytes
  1991 ;; Hardware stack levels used: 1
  1992 ;; Hardware stack levels required when called: 3
  1993 ;; This function calls:
  1994 ;;		___lwdiv
  1995 ;;		___lwmod
  1996 ;; This function is called by:
  1997 ;;		_conversion_char
  1998 ;;		_chequeo
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001                           
  2002                           
  2003                           ;psect for function _sprintf
  2004  001F                     _sprintf:
  2005                           
  2006                           ;incstack = 0
  2007                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2008                           ;sprintf@sp stored from wreg
  2009  001F  1283               	bcf	3,5	;RP0=0, select bank0
  2010  0020  1303               	bcf	3,6	;RP1=0, select bank0
  2011  0021  00E0               	movwf	sprintf@sp
  2012  0022                     l1832:
  2013                           
  2014                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  2015  0022  3052               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  2016  0023  00D8               	movwf	??_sprintf
  2017  0024  0858               	movf	??_sprintf,w
  2018  0025  00DB               	movwf	sprintf@ap
  2019                           
  2020                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2021  0026  28F2               	goto	l1884
  2022  0027                     l1834:
  2023                           
  2024                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  2025  0027  3025               	movlw	37
  2026  0028  0661               	xorwf	sprintf@c,w
  2027  0029  1903               	btfsc	3,2
  2028  002A  282C               	goto	u1381
  2029  002B  282D               	goto	u1380
  2030  002C                     u1381:
  2031  002C  2839               	goto	l1840
  2032  002D                     u1380:
  2033  002D                     l1836:
  2034                           
  2035                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  2036  002D  0861               	movf	sprintf@c,w
  2037  002E  00D8               	movwf	??_sprintf
  2038  002F  0860               	movf	sprintf@sp,w
  2039  0030  0084               	movwf	4
  2040  0031  0858               	movf	??_sprintf,w
  2041  0032  1383               	bcf	3,7	;select IRP bank0
  2042  0033  0080               	movwf	0
  2043  0034                     l1838:
  2044  0034  3001               	movlw	1
  2045  0035  00D8               	movwf	??_sprintf
  2046  0036  0858               	movf	??_sprintf,w
  2047  0037  07E0               	addwf	sprintf@sp,f
  2048                           
  2049                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 559:    continue;
  2050  0038  28F2               	goto	l1884
  2051  0039                     l1840:
  2052                           
  2053                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  2054  0039  01DC               	clrf	sprintf@flag
  2055  003A                     l1844:	
  2056                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  2057                           
  2058  003A  3001               	movlw	1
  2059  003B  07D1               	addwf	sprintf@f,f
  2060  003C  30FF               	movlw	-1
  2061  003D  0751               	addwf	sprintf@f,w
  2062  003E  0084               	movwf	4
  2063  003F  120A  118A  240A  120A  118A  	fcall	stringdir
  2064  0044  00E1               	movwf	sprintf@c
  2065  0045  00D8               	movwf	??_sprintf
  2066  0046  01D9               	clrf	??_sprintf+1
  2067                           
  2068                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2069                           ; Switch size 1, requested type "simple"
  2070                           ; Number of cases is 1, Range of values is 0 to 0
  2071                           ; switch strategies available:
  2072                           ; Name         Instructions Cycles
  2073                           ; simple_byte            4     3 (average)
  2074                           ; direct_byte           11     8 (fixed)
  2075                           ; jumptable            260     6 (fixed)
  2076                           ;	Chosen strategy is simple_byte
  2077  0047  0859               	movf	??_sprintf+1,w
  2078  0048  3A00               	xorlw	0	; case 0
  2079  0049  1903               	skipnz
  2080  004A  284C               	goto	l2012
  2081  004B  28F2               	goto	l1884
  2082  004C                     l2012:
  2083                           
  2084                           ; Switch size 1, requested type "simple"
  2085                           ; Number of cases is 3, Range of values is 0 to 105
  2086                           ; switch strategies available:
  2087                           ; Name         Instructions Cycles
  2088                           ; simple_byte           10     6 (average)
  2089                           ; jumptable            260     6 (fixed)
  2090                           ;	Chosen strategy is simple_byte
  2091  004C  0858               	movf	??_sprintf,w
  2092  004D  3A00               	xorlw	0	; case 0
  2093  004E  1903               	skipnz
  2094  004F  2904               	goto	l1886
  2095  0050  3A64               	xorlw	100	; case 100
  2096  0051  1903               	skipnz
  2097  0052  2857               	goto	l1846
  2098  0053  3A0D               	xorlw	13	; case 105
  2099  0054  1903               	skipnz
  2100  0055  2857               	goto	l1846
  2101  0056  28F2               	goto	l1884
  2102  0057                     l1846:
  2103                           
  2104                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2105  0057  085B               	movf	sprintf@ap,w
  2106  0058  0084               	movwf	4
  2107  0059  1383               	bcf	3,7	;select IRP bank0
  2108  005A  0800               	movf	0,w
  2109  005B  00DE               	movwf	sprintf@val
  2110  005C  0A84               	incf	4,f
  2111  005D  0800               	movf	0,w
  2112  005E  00DF               	movwf	sprintf@val+1
  2113  005F                     l1848:
  2114  005F  3002               	movlw	2
  2115  0060  00D8               	movwf	??_sprintf
  2116  0061  0858               	movf	??_sprintf,w
  2117  0062  07DB               	addwf	sprintf@ap,f
  2118  0063                     l1850:
  2119                           
  2120                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  2121  0063  1FDF               	btfss	sprintf@val+1,7
  2122  0064  2866               	goto	u1391
  2123  0065  2867               	goto	u1390
  2124  0066                     u1391:
  2125  0066  2870               	goto	l1856
  2126  0067                     u1390:
  2127  0067                     l1852:
  2128                           
  2129                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  2130  0067  3003               	movlw	3
  2131  0068  00D8               	movwf	??_sprintf
  2132  0069  0858               	movf	??_sprintf,w
  2133  006A  04DC               	iorwf	sprintf@flag,f
  2134  006B                     l1854:
  2135                           
  2136                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  2137  006B  09DE               	comf	sprintf@val,f
  2138  006C  09DF               	comf	sprintf@val+1,f
  2139  006D  0ADE               	incf	sprintf@val,f
  2140  006E  1903               	skipnz
  2141  006F  0ADF               	incf	sprintf@val+1,f
  2142  0070                     l1856:
  2143                           
  2144                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  2145  0070  01E1               	clrf	sprintf@c
  2146  0071  0AE1               	incf	sprintf@c,f
  2147  0072                     l1862:
  2148                           
  2149                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  2150  0072  0861               	movf	sprintf@c,w
  2151  0073  00D8               	movwf	??_sprintf
  2152  0074  0758               	addwf	??_sprintf,w
  2153  0075  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2154  0076  0084               	movwf	4
  2155  0077  120A  118A  240A  120A  118A  	fcall	stringdir
  2156  007C  00D9               	movwf	??_sprintf+1
  2157  007D  120A  118A  240A  120A  118A  	fcall	stringdir
  2158  0082  00DA               	movwf	??_sprintf+2
  2159  0083  085A               	movf	??_sprintf+2,w
  2160  0084  025F               	subwf	sprintf@val+1,w
  2161  0085  1D03               	skipz
  2162  0086  2889               	goto	u1405
  2163  0087  0859               	movf	??_sprintf+1,w
  2164  0088  025E               	subwf	sprintf@val,w
  2165  0089                     u1405:
  2166  0089  1803               	skipnc
  2167  008A  288C               	goto	u1401
  2168  008B  288D               	goto	u1400
  2169  008C                     u1401:
  2170  008C  288E               	goto	l1866
  2171  008D                     u1400:
  2172  008D  2898               	goto	l1868
  2173  008E                     l1866:
  2174  008E  3001               	movlw	1
  2175  008F  00D8               	movwf	??_sprintf
  2176  0090  0858               	movf	??_sprintf,w
  2177  0091  07E1               	addwf	sprintf@c,f
  2178  0092  3005               	movlw	5
  2179  0093  0661               	xorwf	sprintf@c,w
  2180  0094  1D03               	btfss	3,2
  2181  0095  2897               	goto	u1411
  2182  0096  2898               	goto	u1410
  2183  0097                     u1411:
  2184  0097  2872               	goto	l1862
  2185  0098                     u1410:
  2186  0098                     l1868:
  2187                           
  2188                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  2189  0098  085C               	movf	sprintf@flag,w
  2190  0099  3903               	andlw	3
  2191  009A  1903               	btfsc	3,2
  2192  009B  289D               	goto	u1421
  2193  009C  289E               	goto	u1420
  2194  009D                     u1421:
  2195  009D  28A9               	goto	l1874
  2196  009E                     u1420:
  2197  009E                     l1870:
  2198                           
  2199                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  2200  009E  302D               	movlw	45
  2201  009F  00D8               	movwf	??_sprintf
  2202  00A0  0860               	movf	sprintf@sp,w
  2203  00A1  0084               	movwf	4
  2204  00A2  0858               	movf	??_sprintf,w
  2205  00A3  1383               	bcf	3,7	;select IRP bank0
  2206  00A4  0080               	movwf	0
  2207  00A5                     l1872:
  2208  00A5  3001               	movlw	1
  2209  00A6  00D8               	movwf	??_sprintf
  2210  00A7  0858               	movf	??_sprintf,w
  2211  00A8  07E0               	addwf	sprintf@sp,f
  2212  00A9                     l1874:
  2213                           
  2214                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  2215  00A9  0861               	movf	sprintf@c,w
  2216  00AA  00D8               	movwf	??_sprintf
  2217  00AB  0858               	movf	??_sprintf,w
  2218  00AC  00DD               	movwf	sprintf@prec
  2219                           
  2220                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  2221  00AD  28E9               	goto	l1882
  2222  00AE                     l1876:
  2223                           
  2224                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  2225  00AE  300A               	movlw	10
  2226  00AF  00CD               	movwf	___lwmod@divisor
  2227  00B0  3000               	movlw	0
  2228  00B1  00CE               	movwf	___lwmod@divisor+1
  2229  00B2  085D               	movf	sprintf@prec,w
  2230  00B3  00D8               	movwf	??_sprintf
  2231  00B4  0758               	addwf	??_sprintf,w
  2232  00B5  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2233  00B6  0084               	movwf	4
  2234  00B7  120A  118A  240A  120A  118A  	fcall	stringdir
  2235  00BC  00C6               	movwf	___lwdiv@divisor
  2236  00BD  120A  118A  240A  120A  118A  	fcall	stringdir
  2237  00C2  00C7               	movwf	___lwdiv@divisor+1
  2238  00C3  085F               	movf	sprintf@val+1,w
  2239  00C4  00C9               	movwf	___lwdiv@dividend+1
  2240  00C5  085E               	movf	sprintf@val,w
  2241  00C6  00C8               	movwf	___lwdiv@dividend
  2242  00C7  120A  118A  2336  120A  118A  	fcall	___lwdiv
  2243  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  2244  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  2245  00CE  0847               	movf	?___lwdiv+1,w
  2246  00CF  00D0               	movwf	___lwmod@dividend+1
  2247  00D0  0846               	movf	?___lwdiv,w
  2248  00D1  00CF               	movwf	___lwmod@dividend
  2249  00D2  120A  118A  23BF  120A  118A  	fcall	___lwmod
  2250  00D7  1283               	bcf	3,5	;RP0=0, select bank0
  2251  00D8  1303               	bcf	3,6	;RP1=0, select bank0
  2252  00D9  084D               	movf	?___lwmod,w
  2253  00DA  3E30               	addlw	48
  2254  00DB  00D9               	movwf	??_sprintf+1
  2255  00DC  0859               	movf	??_sprintf+1,w
  2256  00DD  00E1               	movwf	sprintf@c
  2257  00DE                     l1878:
  2258                           
  2259                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  2260  00DE  0861               	movf	sprintf@c,w
  2261  00DF  00D8               	movwf	??_sprintf
  2262  00E0  0860               	movf	sprintf@sp,w
  2263  00E1  0084               	movwf	4
  2264  00E2  0858               	movf	??_sprintf,w
  2265  00E3  1383               	bcf	3,7	;select IRP bank0
  2266  00E4  0080               	movwf	0
  2267  00E5                     l1880:
  2268  00E5  3001               	movlw	1
  2269  00E6  00D8               	movwf	??_sprintf
  2270  00E7  0858               	movf	??_sprintf,w
  2271  00E8  07E0               	addwf	sprintf@sp,f
  2272  00E9                     l1882:
  2273                           
  2274                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  2275  00E9  30FF               	movlw	255
  2276  00EA  00D8               	movwf	??_sprintf
  2277  00EB  0858               	movf	??_sprintf,w
  2278  00EC  07DD               	addwf	sprintf@prec,f
  2279  00ED  0A5D               	incf	sprintf@prec,w
  2280  00EE  1D03               	btfss	3,2
  2281  00EF  28F1               	goto	u1431
  2282  00F0  28F2               	goto	u1430
  2283  00F1                     u1431:
  2284  00F1  28AE               	goto	l1876
  2285  00F2                     u1430:
  2286  00F2                     l1884:
  2287                           
  2288                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2289  00F2  3001               	movlw	1
  2290  00F3  07D1               	addwf	sprintf@f,f
  2291  00F4  30FF               	movlw	-1
  2292  00F5  0751               	addwf	sprintf@f,w
  2293  00F6  0084               	movwf	4
  2294  00F7  120A  118A  240A  120A  118A  	fcall	stringdir
  2295  00FC  00D8               	movwf	??_sprintf
  2296  00FD  0858               	movf	??_sprintf,w
  2297  00FE  00E1               	movwf	sprintf@c
  2298  00FF  0861               	movf	sprintf@c,w
  2299  0100  1D03               	btfss	3,2
  2300  0101  2903               	goto	u1441
  2301  0102  2904               	goto	u1440
  2302  0103                     u1441:
  2303  0103  2827               	goto	l1834
  2304  0104                     u1440:
  2305  0104                     l1886:
  2306                           
  2307                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  2308  0104  0860               	movf	sprintf@sp,w
  2309  0105  0084               	movwf	4
  2310  0106  1383               	bcf	3,7	;select IRP bank0
  2311  0107  0180               	clrf	0
  2312  0108                     l322:
  2313  0108  0008               	return
  2314  0109                     __end_of_sprintf:
  2315                           
  2316                           	psect	text11
  2317  03BF                     __ptext11:	
  2318 ;; *************** function ___lwmod *****************
  2319 ;; Defined at:
  2320 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  2321 ;; Parameters:    Size  Location     Type
  2322 ;;  divisor         2    7[BANK0 ] unsigned int 
  2323 ;;  dividend        2    9[BANK0 ] unsigned int 
  2324 ;; Auto vars:     Size  Location     Type
  2325 ;;  counter         1    6[COMMON] unsigned char 
  2326 ;; Return value:  Size  Location     Type
  2327 ;;                  2    7[BANK0 ] unsigned int 
  2328 ;; Registers used:
  2329 ;;		wreg, status,2, status,0
  2330 ;; Tracked objects:
  2331 ;;		On entry : 0/0
  2332 ;;		On exit  : 0/0
  2333 ;;		Unchanged: 0/0
  2334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2335 ;;      Params:         0       4       0       0       0
  2336 ;;      Locals:         1       0       0       0       0
  2337 ;;      Temps:          1       0       0       0       0
  2338 ;;      Totals:         2       4       0       0       0
  2339 ;;Total ram usage:        6 bytes
  2340 ;; Hardware stack levels used: 1
  2341 ;; Hardware stack levels required when called: 2
  2342 ;; This function calls:
  2343 ;;		Nothing
  2344 ;; This function is called by:
  2345 ;;		_sprintf
  2346 ;; This function uses a non-reentrant model
  2347 ;;
  2348                           
  2349                           
  2350                           ;psect for function ___lwmod
  2351  03BF                     ___lwmod:
  2352  03BF                     l1776:	
  2353                           ;incstack = 0
  2354                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2355                           
  2356  03BF  1283               	bcf	3,5	;RP0=0, select bank0
  2357  03C0  1303               	bcf	3,6	;RP1=0, select bank0
  2358  03C1  084D               	movf	___lwmod@divisor,w
  2359  03C2  044E               	iorwf	___lwmod@divisor+1,w
  2360  03C3  1903               	btfsc	3,2
  2361  03C4  2BC6               	goto	u1311
  2362  03C5  2BC7               	goto	u1310
  2363  03C6                     u1311:
  2364  03C6  2BF6               	goto	l1794
  2365  03C7                     u1310:
  2366  03C7                     l1778:
  2367  03C7  01F6               	clrf	___lwmod@counter
  2368  03C8  0AF6               	incf	___lwmod@counter,f
  2369  03C9  2BD5               	goto	l1784
  2370  03CA                     l1780:
  2371  03CA  3001               	movlw	1
  2372  03CB                     u1325:
  2373  03CB  1003               	clrc
  2374  03CC  0DCD               	rlf	___lwmod@divisor,f
  2375  03CD  0DCE               	rlf	___lwmod@divisor+1,f
  2376  03CE  3EFF               	addlw	-1
  2377  03CF  1D03               	skipz
  2378  03D0  2BCB               	goto	u1325
  2379  03D1                     l1782:
  2380  03D1  3001               	movlw	1
  2381  03D2  00F5               	movwf	??___lwmod
  2382  03D3  0875               	movf	??___lwmod,w
  2383  03D4  07F6               	addwf	___lwmod@counter,f
  2384  03D5                     l1784:
  2385  03D5  1FCE               	btfss	___lwmod@divisor+1,7
  2386  03D6  2BD8               	goto	u1331
  2387  03D7  2BD9               	goto	u1330
  2388  03D8                     u1331:
  2389  03D8  2BCA               	goto	l1780
  2390  03D9                     u1330:
  2391  03D9                     l1786:
  2392  03D9  084E               	movf	___lwmod@divisor+1,w
  2393  03DA  0250               	subwf	___lwmod@dividend+1,w
  2394  03DB  1D03               	skipz
  2395  03DC  2BDF               	goto	u1345
  2396  03DD  084D               	movf	___lwmod@divisor,w
  2397  03DE  024F               	subwf	___lwmod@dividend,w
  2398  03DF                     u1345:
  2399  03DF  1C03               	skipc
  2400  03E0  2BE2               	goto	u1341
  2401  03E1  2BE3               	goto	u1340
  2402  03E2                     u1341:
  2403  03E2  2BE9               	goto	l1790
  2404  03E3                     u1340:
  2405  03E3                     l1788:
  2406  03E3  084D               	movf	___lwmod@divisor,w
  2407  03E4  02CF               	subwf	___lwmod@dividend,f
  2408  03E5  084E               	movf	___lwmod@divisor+1,w
  2409  03E6  1C03               	skipc
  2410  03E7  03D0               	decf	___lwmod@dividend+1,f
  2411  03E8  02D0               	subwf	___lwmod@dividend+1,f
  2412  03E9                     l1790:
  2413  03E9  3001               	movlw	1
  2414  03EA                     u1355:
  2415  03EA  1003               	clrc
  2416  03EB  0CCE               	rrf	___lwmod@divisor+1,f
  2417  03EC  0CCD               	rrf	___lwmod@divisor,f
  2418  03ED  3EFF               	addlw	-1
  2419  03EE  1D03               	skipz
  2420  03EF  2BEA               	goto	u1355
  2421  03F0                     l1792:
  2422  03F0  3001               	movlw	1
  2423  03F1  02F6               	subwf	___lwmod@counter,f
  2424  03F2  1D03               	btfss	3,2
  2425  03F3  2BF5               	goto	u1361
  2426  03F4  2BF6               	goto	u1360
  2427  03F5                     u1361:
  2428  03F5  2BD9               	goto	l1786
  2429  03F6                     u1360:
  2430  03F6                     l1794:
  2431  03F6  0850               	movf	___lwmod@dividend+1,w
  2432  03F7  00CE               	movwf	?___lwmod+1
  2433  03F8  084F               	movf	___lwmod@dividend,w
  2434  03F9  00CD               	movwf	?___lwmod
  2435  03FA                     l608:
  2436  03FA  0008               	return
  2437  03FB                     __end_of___lwmod:
  2438                           
  2439                           	psect	text12
  2440  0336                     __ptext12:	
  2441 ;; *************** function ___lwdiv *****************
  2442 ;; Defined at:
  2443 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  2444 ;; Parameters:    Size  Location     Type
  2445 ;;  divisor         2    0[BANK0 ] unsigned int 
  2446 ;;  dividend        2    2[BANK0 ] unsigned int 
  2447 ;; Auto vars:     Size  Location     Type
  2448 ;;  quotient        2    5[BANK0 ] unsigned int 
  2449 ;;  counter         1    4[BANK0 ] unsigned char 
  2450 ;; Return value:  Size  Location     Type
  2451 ;;                  2    0[BANK0 ] unsigned int 
  2452 ;; Registers used:
  2453 ;;		wreg, status,2, status,0
  2454 ;; Tracked objects:
  2455 ;;		On entry : 0/0
  2456 ;;		On exit  : 0/0
  2457 ;;		Unchanged: 0/0
  2458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2459 ;;      Params:         0       4       0       0       0
  2460 ;;      Locals:         0       3       0       0       0
  2461 ;;      Temps:          1       0       0       0       0
  2462 ;;      Totals:         1       7       0       0       0
  2463 ;;Total ram usage:        8 bytes
  2464 ;; Hardware stack levels used: 1
  2465 ;; Hardware stack levels required when called: 2
  2466 ;; This function calls:
  2467 ;;		Nothing
  2468 ;; This function is called by:
  2469 ;;		_sprintf
  2470 ;; This function uses a non-reentrant model
  2471 ;;
  2472                           
  2473                           
  2474                           ;psect for function ___lwdiv
  2475  0336                     ___lwdiv:
  2476  0336                     l1750:	
  2477                           ;incstack = 0
  2478                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2479                           
  2480  0336  1283               	bcf	3,5	;RP0=0, select bank0
  2481  0337  1303               	bcf	3,6	;RP1=0, select bank0
  2482  0338  01CB               	clrf	___lwdiv@quotient
  2483  0339  01CC               	clrf	___lwdiv@quotient+1
  2484  033A                     l1752:
  2485  033A  0846               	movf	___lwdiv@divisor,w
  2486  033B  0447               	iorwf	___lwdiv@divisor+1,w
  2487  033C  1903               	btfsc	3,2
  2488  033D  2B3F               	goto	u1241
  2489  033E  2B40               	goto	u1240
  2490  033F                     u1241:
  2491  033F  2B77               	goto	l1772
  2492  0340                     u1240:
  2493  0340                     l1754:
  2494  0340  01CA               	clrf	___lwdiv@counter
  2495  0341  0ACA               	incf	___lwdiv@counter,f
  2496  0342  2B4E               	goto	l1760
  2497  0343                     l1756:
  2498  0343  3001               	movlw	1
  2499  0344                     u1255:
  2500  0344  1003               	clrc
  2501  0345  0DC6               	rlf	___lwdiv@divisor,f
  2502  0346  0DC7               	rlf	___lwdiv@divisor+1,f
  2503  0347  3EFF               	addlw	-1
  2504  0348  1D03               	skipz
  2505  0349  2B44               	goto	u1255
  2506  034A                     l1758:
  2507  034A  3001               	movlw	1
  2508  034B  00F4               	movwf	??___lwdiv
  2509  034C  0874               	movf	??___lwdiv,w
  2510  034D  07CA               	addwf	___lwdiv@counter,f
  2511  034E                     l1760:
  2512  034E  1FC7               	btfss	___lwdiv@divisor+1,7
  2513  034F  2B51               	goto	u1261
  2514  0350  2B52               	goto	u1260
  2515  0351                     u1261:
  2516  0351  2B43               	goto	l1756
  2517  0352                     u1260:
  2518  0352                     l1762:
  2519  0352  3001               	movlw	1
  2520  0353                     u1275:
  2521  0353  1003               	clrc
  2522  0354  0DCB               	rlf	___lwdiv@quotient,f
  2523  0355  0DCC               	rlf	___lwdiv@quotient+1,f
  2524  0356  3EFF               	addlw	-1
  2525  0357  1D03               	skipz
  2526  0358  2B53               	goto	u1275
  2527  0359  0847               	movf	___lwdiv@divisor+1,w
  2528  035A  0249               	subwf	___lwdiv@dividend+1,w
  2529  035B  1D03               	skipz
  2530  035C  2B5F               	goto	u1285
  2531  035D  0846               	movf	___lwdiv@divisor,w
  2532  035E  0248               	subwf	___lwdiv@dividend,w
  2533  035F                     u1285:
  2534  035F  1C03               	skipc
  2535  0360  2B62               	goto	u1281
  2536  0361  2B63               	goto	u1280
  2537  0362                     u1281:
  2538  0362  2B6A               	goto	l1768
  2539  0363                     u1280:
  2540  0363                     l1764:
  2541  0363  0846               	movf	___lwdiv@divisor,w
  2542  0364  02C8               	subwf	___lwdiv@dividend,f
  2543  0365  0847               	movf	___lwdiv@divisor+1,w
  2544  0366  1C03               	skipc
  2545  0367  03C9               	decf	___lwdiv@dividend+1,f
  2546  0368  02C9               	subwf	___lwdiv@dividend+1,f
  2547  0369                     l1766:
  2548  0369  144B               	bsf	___lwdiv@quotient,0
  2549  036A                     l1768:
  2550  036A  3001               	movlw	1
  2551  036B                     u1295:
  2552  036B  1003               	clrc
  2553  036C  0CC7               	rrf	___lwdiv@divisor+1,f
  2554  036D  0CC6               	rrf	___lwdiv@divisor,f
  2555  036E  3EFF               	addlw	-1
  2556  036F  1D03               	skipz
  2557  0370  2B6B               	goto	u1295
  2558  0371                     l1770:
  2559  0371  3001               	movlw	1
  2560  0372  02CA               	subwf	___lwdiv@counter,f
  2561  0373  1D03               	btfss	3,2
  2562  0374  2B76               	goto	u1301
  2563  0375  2B77               	goto	u1300
  2564  0376                     u1301:
  2565  0376  2B52               	goto	l1762
  2566  0377                     u1300:
  2567  0377                     l1772:
  2568  0377  084C               	movf	___lwdiv@quotient+1,w
  2569  0378  00C7               	movwf	?___lwdiv+1
  2570  0379  084B               	movf	___lwdiv@quotient,w
  2571  037A  00C6               	movwf	?___lwdiv
  2572  037B                     l598:
  2573  037B  0008               	return
  2574  037C                     __end_of___lwdiv:
  2575                           
  2576                           	psect	text13
  2577  0297                     __ptext13:	
  2578 ;; *************** function _divisor *****************
  2579 ;; Defined at:
  2580 ;;		line 160 in file "LAB2.c"
  2581 ;; Parameters:    Size  Location     Type
  2582 ;;  a               1    wreg     unsigned char 
  2583 ;;  dig             1    8[BANK0 ] PTR unsigned char 
  2584 ;;		 -> vol3(1), vol2(1), vol1(1), 
  2585 ;; Auto vars:     Size  Location     Type
  2586 ;;  a               1   11[BANK0 ] unsigned char 
  2587 ;;  i               2   14[BANK0 ] int 
  2588 ;;  b               2   12[BANK0 ] int 
  2589 ;; Return value:  Size  Location     Type
  2590 ;;                  1    wreg      void 
  2591 ;; Registers used:
  2592 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2593 ;; Tracked objects:
  2594 ;;		On entry : 0/0
  2595 ;;		On exit  : 0/0
  2596 ;;		Unchanged: 0/0
  2597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2598 ;;      Params:         0       1       0       0       0
  2599 ;;      Locals:         0       5       0       0       0
  2600 ;;      Temps:          0       2       0       0       0
  2601 ;;      Totals:         0       8       0       0       0
  2602 ;;Total ram usage:        8 bytes
  2603 ;; Hardware stack levels used: 1
  2604 ;; Hardware stack levels required when called: 3
  2605 ;; This function calls:
  2606 ;;		___awdiv
  2607 ;;		___awmod
  2608 ;; This function is called by:
  2609 ;;		_conversion_char
  2610 ;;		_chequeo
  2611 ;; This function uses a non-reentrant model
  2612 ;;
  2613                           
  2614                           
  2615                           ;psect for function _divisor
  2616  0297                     _divisor:
  2617                           
  2618                           ;incstack = 0
  2619                           ; Regs used in _divisor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2620                           ;divisor@a stored from wreg
  2621  0297  1283               	bcf	3,5	;RP0=0, select bank0
  2622  0298  1303               	bcf	3,6	;RP1=0, select bank0
  2623  0299  00D1               	movwf	divisor@a
  2624  029A                     l1818:
  2625                           
  2626                           ;LAB2.c: 161:     int b = 2*a;
  2627  029A  0851               	movf	divisor@a,w
  2628  029B  00CF               	movwf	??_divisor
  2629  029C  01D0               	clrf	??_divisor+1
  2630  029D  1003               	clrc
  2631  029E  0D4F               	rlf	??_divisor,w
  2632  029F  00D2               	movwf	divisor@b
  2633  02A0  0D50               	rlf	??_divisor+1,w
  2634  02A1  00D3               	movwf	divisor@b+1
  2635  02A2                     l1820:
  2636                           
  2637                           ;LAB2.c: 162:     for(int i = 0; i<3 ; i++){
  2638  02A2  01D4               	clrf	divisor@i
  2639  02A3  01D5               	clrf	divisor@i+1
  2640  02A4                     l1826:
  2641                           
  2642                           ;LAB2.c: 163:         dig[i] = b % 10;
  2643  02A4  300A               	movlw	10
  2644  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  2645  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  2646  02A7  00C6               	movwf	___awmod@divisor
  2647  02A8  3000               	movlw	0
  2648  02A9  00C7               	movwf	___awmod@divisor+1
  2649  02AA  0853               	movf	divisor@b+1,w
  2650  02AB  00C9               	movwf	___awmod@dividend+1
  2651  02AC  0852               	movf	divisor@b,w
  2652  02AD  00C8               	movwf	___awmod@dividend
  2653  02AE  120A  118A  223C  120A  118A  	fcall	___awmod
  2654  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  2655  02B4  1303               	bcf	3,6	;RP1=0, select bank0
  2656  02B5  0846               	movf	?___awmod,w
  2657  02B6  00CF               	movwf	??_divisor
  2658  02B7  0854               	movf	divisor@i,w
  2659  02B8  074E               	addwf	divisor@dig,w
  2660  02B9  00D0               	movwf	??_divisor+1
  2661  02BA  0850               	movf	??_divisor+1,w
  2662  02BB  0084               	movwf	4
  2663  02BC  084F               	movf	??_divisor,w
  2664  02BD  1383               	bcf	3,7	;select IRP bank0
  2665  02BE  0080               	movwf	0
  2666                           
  2667                           ;LAB2.c: 164:         b = (b - dig[i])/10;
  2668  02BF  300A               	movlw	10
  2669  02C0  00C6               	movwf	___awdiv@divisor
  2670  02C1  3000               	movlw	0
  2671  02C2  00C7               	movwf	___awdiv@divisor+1
  2672  02C3  0854               	movf	divisor@i,w
  2673  02C4  074E               	addwf	divisor@dig,w
  2674  02C5  00CF               	movwf	??_divisor
  2675  02C6  084F               	movf	??_divisor,w
  2676  02C7  0084               	movwf	4
  2677  02C8  0800               	movf	0,w
  2678  02C9  0252               	subwf	divisor@b,w
  2679  02CA  00C8               	movwf	___awdiv@dividend
  2680  02CB  0853               	movf	divisor@b+1,w
  2681  02CC  1C03               	skipc
  2682  02CD  0353               	decf	divisor@b+1,w
  2683  02CE  00C9               	movwf	___awdiv@dividend+1
  2684  02CF  120A  118A  2178  120A  118A  	fcall	___awdiv
  2685  02D4  1283               	bcf	3,5	;RP0=0, select bank0
  2686  02D5  1303               	bcf	3,6	;RP1=0, select bank0
  2687  02D6  0847               	movf	?___awdiv+1,w
  2688  02D7  00D3               	movwf	divisor@b+1
  2689  02D8  0846               	movf	?___awdiv,w
  2690  02D9  00D2               	movwf	divisor@b
  2691  02DA                     l1828:
  2692                           
  2693                           ;LAB2.c: 165:     }
  2694  02DA  3001               	movlw	1
  2695  02DB  07D4               	addwf	divisor@i,f
  2696  02DC  1803               	skipnc
  2697  02DD  0AD5               	incf	divisor@i+1,f
  2698  02DE  3000               	movlw	0
  2699  02DF  07D5               	addwf	divisor@i+1,f
  2700  02E0                     l1830:
  2701  02E0  0855               	movf	divisor@i+1,w
  2702  02E1  3A80               	xorlw	128
  2703  02E2  00FF               	movwf	btemp+1
  2704  02E3  3080               	movlw	128
  2705  02E4  027F               	subwf	btemp+1,w
  2706  02E5  1D03               	skipz
  2707  02E6  2AE9               	goto	u1375
  2708  02E7  3003               	movlw	3
  2709  02E8  0254               	subwf	divisor@i,w
  2710  02E9                     u1375:
  2711  02E9  1C03               	skipc
  2712  02EA  2AEC               	goto	u1371
  2713  02EB  2AED               	goto	u1370
  2714  02EC                     u1371:
  2715  02EC  2AA4               	goto	l1826
  2716  02ED                     u1370:
  2717  02ED                     l108:
  2718  02ED  0008               	return
  2719  02EE                     __end_of_divisor:
  2720                           
  2721                           	psect	text14
  2722  023C                     __ptext14:	
  2723 ;; *************** function ___awmod *****************
  2724 ;; Defined at:
  2725 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awmod.c"
  2726 ;; Parameters:    Size  Location     Type
  2727 ;;  divisor         2    0[BANK0 ] int 
  2728 ;;  dividend        2    2[BANK0 ] int 
  2729 ;; Auto vars:     Size  Location     Type
  2730 ;;  sign            1    6[COMMON] unsigned char 
  2731 ;;  counter         1    5[COMMON] unsigned char 
  2732 ;; Return value:  Size  Location     Type
  2733 ;;                  2    0[BANK0 ] int 
  2734 ;; Registers used:
  2735 ;;		wreg, status,2, status,0
  2736 ;; Tracked objects:
  2737 ;;		On entry : 0/0
  2738 ;;		On exit  : 0/0
  2739 ;;		Unchanged: 0/0
  2740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2741 ;;      Params:         0       4       0       0       0
  2742 ;;      Locals:         2       0       0       0       0
  2743 ;;      Temps:          1       0       0       0       0
  2744 ;;      Totals:         3       4       0       0       0
  2745 ;;Total ram usage:        7 bytes
  2746 ;; Hardware stack levels used: 1
  2747 ;; Hardware stack levels required when called: 2
  2748 ;; This function calls:
  2749 ;;		Nothing
  2750 ;; This function is called by:
  2751 ;;		_divisor
  2752 ;; This function uses a non-reentrant model
  2753 ;;
  2754                           
  2755                           
  2756                           ;psect for function ___awmod
  2757  023C                     ___awmod:
  2758  023C                     l1712:	
  2759                           ;incstack = 0
  2760                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2761                           
  2762  023C  01F6               	clrf	___awmod@sign
  2763  023D                     l1714:
  2764  023D  1283               	bcf	3,5	;RP0=0, select bank0
  2765  023E  1303               	bcf	3,6	;RP1=0, select bank0
  2766  023F  1FC9               	btfss	___awmod@dividend+1,7
  2767  0240  2A42               	goto	u1151
  2768  0241  2A43               	goto	u1150
  2769  0242                     u1151:
  2770  0242  2A4A               	goto	l1720
  2771  0243                     u1150:
  2772  0243                     l1716:
  2773  0243  09C8               	comf	___awmod@dividend,f
  2774  0244  09C9               	comf	___awmod@dividend+1,f
  2775  0245  0AC8               	incf	___awmod@dividend,f
  2776  0246  1903               	skipnz
  2777  0247  0AC9               	incf	___awmod@dividend+1,f
  2778  0248                     l1718:
  2779  0248  01F6               	clrf	___awmod@sign
  2780  0249  0AF6               	incf	___awmod@sign,f
  2781  024A                     l1720:
  2782  024A  1FC7               	btfss	___awmod@divisor+1,7
  2783  024B  2A4D               	goto	u1161
  2784  024C  2A4E               	goto	u1160
  2785  024D                     u1161:
  2786  024D  2A53               	goto	l1724
  2787  024E                     u1160:
  2788  024E                     l1722:
  2789  024E  09C6               	comf	___awmod@divisor,f
  2790  024F  09C7               	comf	___awmod@divisor+1,f
  2791  0250  0AC6               	incf	___awmod@divisor,f
  2792  0251  1903               	skipnz
  2793  0252  0AC7               	incf	___awmod@divisor+1,f
  2794  0253                     l1724:
  2795  0253  0846               	movf	___awmod@divisor,w
  2796  0254  0447               	iorwf	___awmod@divisor+1,w
  2797  0255  1903               	btfsc	3,2
  2798  0256  2A58               	goto	u1171
  2799  0257  2A59               	goto	u1170
  2800  0258                     u1171:
  2801  0258  2A88               	goto	l1742
  2802  0259                     u1170:
  2803  0259                     l1726:
  2804  0259  01F5               	clrf	___awmod@counter
  2805  025A  0AF5               	incf	___awmod@counter,f
  2806  025B  2A67               	goto	l1732
  2807  025C                     l1728:
  2808  025C  3001               	movlw	1
  2809  025D                     u1185:
  2810  025D  1003               	clrc
  2811  025E  0DC6               	rlf	___awmod@divisor,f
  2812  025F  0DC7               	rlf	___awmod@divisor+1,f
  2813  0260  3EFF               	addlw	-1
  2814  0261  1D03               	skipz
  2815  0262  2A5D               	goto	u1185
  2816  0263                     l1730:
  2817  0263  3001               	movlw	1
  2818  0264  00F4               	movwf	??___awmod
  2819  0265  0874               	movf	??___awmod,w
  2820  0266  07F5               	addwf	___awmod@counter,f
  2821  0267                     l1732:
  2822  0267  1FC7               	btfss	___awmod@divisor+1,7
  2823  0268  2A6A               	goto	u1191
  2824  0269  2A6B               	goto	u1190
  2825  026A                     u1191:
  2826  026A  2A5C               	goto	l1728
  2827  026B                     u1190:
  2828  026B                     l1734:
  2829  026B  0847               	movf	___awmod@divisor+1,w
  2830  026C  0249               	subwf	___awmod@dividend+1,w
  2831  026D  1D03               	skipz
  2832  026E  2A71               	goto	u1205
  2833  026F  0846               	movf	___awmod@divisor,w
  2834  0270  0248               	subwf	___awmod@dividend,w
  2835  0271                     u1205:
  2836  0271  1C03               	skipc
  2837  0272  2A74               	goto	u1201
  2838  0273  2A75               	goto	u1200
  2839  0274                     u1201:
  2840  0274  2A7B               	goto	l1738
  2841  0275                     u1200:
  2842  0275                     l1736:
  2843  0275  0846               	movf	___awmod@divisor,w
  2844  0276  02C8               	subwf	___awmod@dividend,f
  2845  0277  0847               	movf	___awmod@divisor+1,w
  2846  0278  1C03               	skipc
  2847  0279  03C9               	decf	___awmod@dividend+1,f
  2848  027A  02C9               	subwf	___awmod@dividend+1,f
  2849  027B                     l1738:
  2850  027B  3001               	movlw	1
  2851  027C                     u1215:
  2852  027C  1003               	clrc
  2853  027D  0CC7               	rrf	___awmod@divisor+1,f
  2854  027E  0CC6               	rrf	___awmod@divisor,f
  2855  027F  3EFF               	addlw	-1
  2856  0280  1D03               	skipz
  2857  0281  2A7C               	goto	u1215
  2858  0282                     l1740:
  2859  0282  3001               	movlw	1
  2860  0283  02F5               	subwf	___awmod@counter,f
  2861  0284  1D03               	btfss	3,2
  2862  0285  2A87               	goto	u1221
  2863  0286  2A88               	goto	u1220
  2864  0287                     u1221:
  2865  0287  2A6B               	goto	l1734
  2866  0288                     u1220:
  2867  0288                     l1742:
  2868  0288  0876               	movf	___awmod@sign,w
  2869  0289  1903               	btfsc	3,2
  2870  028A  2A8C               	goto	u1231
  2871  028B  2A8D               	goto	u1230
  2872  028C                     u1231:
  2873  028C  2A92               	goto	l1746
  2874  028D                     u1230:
  2875  028D                     l1744:
  2876  028D  09C8               	comf	___awmod@dividend,f
  2877  028E  09C9               	comf	___awmod@dividend+1,f
  2878  028F  0AC8               	incf	___awmod@dividend,f
  2879  0290  1903               	skipnz
  2880  0291  0AC9               	incf	___awmod@dividend+1,f
  2881  0292                     l1746:
  2882  0292  0849               	movf	___awmod@dividend+1,w
  2883  0293  00C7               	movwf	?___awmod+1
  2884  0294  0848               	movf	___awmod@dividend,w
  2885  0295  00C6               	movwf	?___awmod
  2886  0296                     l492:
  2887  0296  0008               	return
  2888  0297                     __end_of___awmod:
  2889                           
  2890                           	psect	text15
  2891  0178                     __ptext15:	
  2892 ;; *************** function ___awdiv *****************
  2893 ;; Defined at:
  2894 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awdiv.c"
  2895 ;; Parameters:    Size  Location     Type
  2896 ;;  divisor         2    0[BANK0 ] int 
  2897 ;;  dividend        2    2[BANK0 ] int 
  2898 ;; Auto vars:     Size  Location     Type
  2899 ;;  quotient        2    6[BANK0 ] int 
  2900 ;;  sign            1    5[BANK0 ] unsigned char 
  2901 ;;  counter         1    4[BANK0 ] unsigned char 
  2902 ;; Return value:  Size  Location     Type
  2903 ;;                  2    0[BANK0 ] int 
  2904 ;; Registers used:
  2905 ;;		wreg, status,2, status,0
  2906 ;; Tracked objects:
  2907 ;;		On entry : 0/0
  2908 ;;		On exit  : 0/0
  2909 ;;		Unchanged: 0/0
  2910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2911 ;;      Params:         0       4       0       0       0
  2912 ;;      Locals:         0       4       0       0       0
  2913 ;;      Temps:          1       0       0       0       0
  2914 ;;      Totals:         1       8       0       0       0
  2915 ;;Total ram usage:        9 bytes
  2916 ;; Hardware stack levels used: 1
  2917 ;; Hardware stack levels required when called: 2
  2918 ;; This function calls:
  2919 ;;		Nothing
  2920 ;; This function is called by:
  2921 ;;		_divisor
  2922 ;; This function uses a non-reentrant model
  2923 ;;
  2924                           
  2925                           
  2926                           ;psect for function ___awdiv
  2927  0178                     ___awdiv:
  2928  0178                     l1668:	
  2929                           ;incstack = 0
  2930                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2931                           
  2932  0178  1283               	bcf	3,5	;RP0=0, select bank0
  2933  0179  1303               	bcf	3,6	;RP1=0, select bank0
  2934  017A  01CB               	clrf	___awdiv@sign
  2935  017B                     l1670:
  2936  017B  1FC7               	btfss	___awdiv@divisor+1,7
  2937  017C  297E               	goto	u1051
  2938  017D  297F               	goto	u1050
  2939  017E                     u1051:
  2940  017E  2986               	goto	l1676
  2941  017F                     u1050:
  2942  017F                     l1672:
  2943  017F  09C6               	comf	___awdiv@divisor,f
  2944  0180  09C7               	comf	___awdiv@divisor+1,f
  2945  0181  0AC6               	incf	___awdiv@divisor,f
  2946  0182  1903               	skipnz
  2947  0183  0AC7               	incf	___awdiv@divisor+1,f
  2948  0184                     l1674:
  2949  0184  01CB               	clrf	___awdiv@sign
  2950  0185  0ACB               	incf	___awdiv@sign,f
  2951  0186                     l1676:
  2952  0186  1FC9               	btfss	___awdiv@dividend+1,7
  2953  0187  2989               	goto	u1061
  2954  0188  298A               	goto	u1060
  2955  0189                     u1061:
  2956  0189  2993               	goto	l1682
  2957  018A                     u1060:
  2958  018A                     l1678:
  2959  018A  09C8               	comf	___awdiv@dividend,f
  2960  018B  09C9               	comf	___awdiv@dividend+1,f
  2961  018C  0AC8               	incf	___awdiv@dividend,f
  2962  018D  1903               	skipnz
  2963  018E  0AC9               	incf	___awdiv@dividend+1,f
  2964  018F                     l1680:
  2965  018F  3001               	movlw	1
  2966  0190  00F4               	movwf	??___awdiv
  2967  0191  0874               	movf	??___awdiv,w
  2968  0192  06CB               	xorwf	___awdiv@sign,f
  2969  0193                     l1682:
  2970  0193  01CC               	clrf	___awdiv@quotient
  2971  0194  01CD               	clrf	___awdiv@quotient+1
  2972  0195                     l1684:
  2973  0195  0846               	movf	___awdiv@divisor,w
  2974  0196  0447               	iorwf	___awdiv@divisor+1,w
  2975  0197  1903               	btfsc	3,2
  2976  0198  299A               	goto	u1071
  2977  0199  299B               	goto	u1070
  2978  019A                     u1071:
  2979  019A  29D2               	goto	l1704
  2980  019B                     u1070:
  2981  019B                     l1686:
  2982  019B  01CA               	clrf	___awdiv@counter
  2983  019C  0ACA               	incf	___awdiv@counter,f
  2984  019D  29A9               	goto	l1692
  2985  019E                     l1688:
  2986  019E  3001               	movlw	1
  2987  019F                     u1085:
  2988  019F  1003               	clrc
  2989  01A0  0DC6               	rlf	___awdiv@divisor,f
  2990  01A1  0DC7               	rlf	___awdiv@divisor+1,f
  2991  01A2  3EFF               	addlw	-1
  2992  01A3  1D03               	skipz
  2993  01A4  299F               	goto	u1085
  2994  01A5                     l1690:
  2995  01A5  3001               	movlw	1
  2996  01A6  00F4               	movwf	??___awdiv
  2997  01A7  0874               	movf	??___awdiv,w
  2998  01A8  07CA               	addwf	___awdiv@counter,f
  2999  01A9                     l1692:
  3000  01A9  1FC7               	btfss	___awdiv@divisor+1,7
  3001  01AA  29AC               	goto	u1091
  3002  01AB  29AD               	goto	u1090
  3003  01AC                     u1091:
  3004  01AC  299E               	goto	l1688
  3005  01AD                     u1090:
  3006  01AD                     l1694:
  3007  01AD  3001               	movlw	1
  3008  01AE                     u1105:
  3009  01AE  1003               	clrc
  3010  01AF  0DCC               	rlf	___awdiv@quotient,f
  3011  01B0  0DCD               	rlf	___awdiv@quotient+1,f
  3012  01B1  3EFF               	addlw	-1
  3013  01B2  1D03               	skipz
  3014  01B3  29AE               	goto	u1105
  3015  01B4  0847               	movf	___awdiv@divisor+1,w
  3016  01B5  0249               	subwf	___awdiv@dividend+1,w
  3017  01B6  1D03               	skipz
  3018  01B7  29BA               	goto	u1115
  3019  01B8  0846               	movf	___awdiv@divisor,w
  3020  01B9  0248               	subwf	___awdiv@dividend,w
  3021  01BA                     u1115:
  3022  01BA  1C03               	skipc
  3023  01BB  29BD               	goto	u1111
  3024  01BC  29BE               	goto	u1110
  3025  01BD                     u1111:
  3026  01BD  29C5               	goto	l1700
  3027  01BE                     u1110:
  3028  01BE                     l1696:
  3029  01BE  0846               	movf	___awdiv@divisor,w
  3030  01BF  02C8               	subwf	___awdiv@dividend,f
  3031  01C0  0847               	movf	___awdiv@divisor+1,w
  3032  01C1  1C03               	skipc
  3033  01C2  03C9               	decf	___awdiv@dividend+1,f
  3034  01C3  02C9               	subwf	___awdiv@dividend+1,f
  3035  01C4                     l1698:
  3036  01C4  144C               	bsf	___awdiv@quotient,0
  3037  01C5                     l1700:
  3038  01C5  3001               	movlw	1
  3039  01C6                     u1125:
  3040  01C6  1003               	clrc
  3041  01C7  0CC7               	rrf	___awdiv@divisor+1,f
  3042  01C8  0CC6               	rrf	___awdiv@divisor,f
  3043  01C9  3EFF               	addlw	-1
  3044  01CA  1D03               	skipz
  3045  01CB  29C6               	goto	u1125
  3046  01CC                     l1702:
  3047  01CC  3001               	movlw	1
  3048  01CD  02CA               	subwf	___awdiv@counter,f
  3049  01CE  1D03               	btfss	3,2
  3050  01CF  29D1               	goto	u1131
  3051  01D0  29D2               	goto	u1130
  3052  01D1                     u1131:
  3053  01D1  29AD               	goto	l1694
  3054  01D2                     u1130:
  3055  01D2                     l1704:
  3056  01D2  084B               	movf	___awdiv@sign,w
  3057  01D3  1903               	btfsc	3,2
  3058  01D4  29D6               	goto	u1141
  3059  01D5  29D7               	goto	u1140
  3060  01D6                     u1141:
  3061  01D6  29DC               	goto	l1708
  3062  01D7                     u1140:
  3063  01D7                     l1706:
  3064  01D7  09CC               	comf	___awdiv@quotient,f
  3065  01D8  09CD               	comf	___awdiv@quotient+1,f
  3066  01D9  0ACC               	incf	___awdiv@quotient,f
  3067  01DA  1903               	skipnz
  3068  01DB  0ACD               	incf	___awdiv@quotient+1,f
  3069  01DC                     l1708:
  3070  01DC  084D               	movf	___awdiv@quotient+1,w
  3071  01DD  00C7               	movwf	?___awdiv+1
  3072  01DE  084C               	movf	___awdiv@quotient,w
  3073  01DF  00C6               	movwf	?___awdiv
  3074  01E0                     l479:
  3075  01E0  0008               	return
  3076  01E1                     __end_of___awdiv:
  3077                           
  3078                           	psect	text16
  3079  045F                     __ptext16:	
  3080 ;; *************** function _Escribir_stringLCD *****************
  3081 ;; Defined at:
  3082 ;;		line 46 in file "LCD.c"
  3083 ;; Parameters:    Size  Location     Type
  3084 ;;  d               2    0[BANK0 ] PTR const unsigned char 
  3085 ;;		 -> buffer3(10), buffer2(10), buffer1(10), STR_1(17), 
  3086 ;; Auto vars:     Size  Location     Type
  3087 ;;		None
  3088 ;; Return value:  Size  Location     Type
  3089 ;;                  1    wreg      void 
  3090 ;; Registers used:
  3091 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3092 ;; Tracked objects:
  3093 ;;		On entry : 0/0
  3094 ;;		On exit  : 0/0
  3095 ;;		Unchanged: 0/0
  3096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3097 ;;      Params:         0       2       0       0       0
  3098 ;;      Locals:         0       0       0       0       0
  3099 ;;      Temps:          0       0       0       0       0
  3100 ;;      Totals:         0       2       0       0       0
  3101 ;;Total ram usage:        2 bytes
  3102 ;; Hardware stack levels used: 1
  3103 ;; Hardware stack levels required when called: 4
  3104 ;; This function calls:
  3105 ;;		_Escribir_datosLCD
  3106 ;; This function is called by:
  3107 ;;		_main
  3108 ;; This function uses a non-reentrant model
  3109 ;;
  3110                           
  3111                           
  3112                           ;psect for function _Escribir_stringLCD
  3113  045F                     _Escribir_stringLCD:
  3114  045F                     l1950:	
  3115                           ;incstack = 0
  3116                           ; Regs used in _Escribir_stringLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3117                           
  3118                           
  3119                           ;LCD.c: 47:     while(*d){
  3120  045F  2C76               	goto	l1956
  3121  0460                     l1952:
  3122                           
  3123                           ;LCD.c: 48:         Escribir_datosLCD(*d++);
  3124  0460  0847               	movf	Escribir_stringLCD@d+1,w
  3125  0461  00FF               	movwf	btemp+1
  3126  0462  0846               	movf	Escribir_stringLCD@d,w
  3127  0463  0084               	movwf	4
  3128  0464  120A  118A  2400  120A  118A  	fcall	stringtab
  3129  0469  120A  118A  254B  120A  118A  	fcall	_Escribir_datosLCD
  3130  046E                     l1954:
  3131  046E  3001               	movlw	1
  3132  046F  1283               	bcf	3,5	;RP0=0, select bank0
  3133  0470  1303               	bcf	3,6	;RP1=0, select bank0
  3134  0471  07C6               	addwf	Escribir_stringLCD@d,f
  3135  0472  1803               	skipnc
  3136  0473  0AC7               	incf	Escribir_stringLCD@d+1,f
  3137  0474  3000               	movlw	0
  3138  0475  07C7               	addwf	Escribir_stringLCD@d+1,f
  3139  0476                     l1956:
  3140                           
  3141                           ;LCD.c: 47:     while(*d){
  3142  0476  1283               	bcf	3,5	;RP0=0, select bank0
  3143  0477  1303               	bcf	3,6	;RP1=0, select bank0
  3144  0478  0847               	movf	Escribir_stringLCD@d+1,w
  3145  0479  00FF               	movwf	btemp+1
  3146  047A  0846               	movf	Escribir_stringLCD@d,w
  3147  047B  0084               	movwf	4
  3148  047C  120A  118A  2400  120A  118A  	fcall	stringtab
  3149  0481  3A00               	xorlw	0
  3150  0482  1D03               	skipz
  3151  0483  2C85               	goto	u1471
  3152  0484  2C86               	goto	u1470
  3153  0485                     u1471:
  3154  0485  2C60               	goto	l1952
  3155  0486                     u1470:
  3156  0486                     l146:
  3157  0486  0008               	return
  3158  0487                     __end_of_Escribir_stringLCD:
  3159                           
  3160                           	psect	text17
  3161  054B                     __ptext17:	
  3162 ;; *************** function _Escribir_datosLCD *****************
  3163 ;; Defined at:
  3164 ;;		line 25 in file "LCD.c"
  3165 ;; Parameters:    Size  Location     Type
  3166 ;;  LCDchar         1    wreg     unsigned char 
  3167 ;; Auto vars:     Size  Location     Type
  3168 ;;  LCDchar         1    5[COMMON] unsigned char 
  3169 ;; Return value:  Size  Location     Type
  3170 ;;                  1    wreg      void 
  3171 ;; Registers used:
  3172 ;;		wreg, status,2, status,0, pclath, cstack
  3173 ;; Tracked objects:
  3174 ;;		On entry : 0/0
  3175 ;;		On exit  : 0/0
  3176 ;;		Unchanged: 0/0
  3177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3178 ;;      Params:         0       0       0       0       0
  3179 ;;      Locals:         1       0       0       0       0
  3180 ;;      Temps:          0       0       0       0       0
  3181 ;;      Totals:         1       0       0       0       0
  3182 ;;Total ram usage:        1 bytes
  3183 ;; Hardware stack levels used: 1
  3184 ;; Hardware stack levels required when called: 3
  3185 ;; This function calls:
  3186 ;;		_prender_ELCD
  3187 ;; This function is called by:
  3188 ;;		_Escribir_stringLCD
  3189 ;; This function uses a non-reentrant model
  3190 ;;
  3191                           
  3192                           
  3193                           ;psect for function _Escribir_datosLCD
  3194  054B                     _Escribir_datosLCD:
  3195                           
  3196                           ;incstack = 0
  3197                           ; Regs used in _Escribir_datosLCD: [wreg+status,2+status,0+pclath+cstack]
  3198                           ;Escribir_datosLCD@LCDchar stored from wreg
  3199  054B  00F5               	movwf	Escribir_datosLCD@LCDchar
  3200  054C                     l1894:
  3201                           
  3202                           ;LCD.c: 26:     RC0 = 1;
  3203  054C  1283               	bcf	3,5	;RP0=0, select bank0
  3204  054D  1303               	bcf	3,6	;RP1=0, select bank0
  3205  054E  1407               	bsf	7,0	;volatile
  3206  054F                     l1896:
  3207                           
  3208                           ;LCD.c: 27:     PORTD = LCDchar;
  3209  054F  0875               	movf	Escribir_datosLCD@LCDchar,w
  3210  0550  0088               	movwf	8	;volatile
  3211  0551                     l1898:
  3212                           
  3213                           ;LCD.c: 29:     prender_ELCD();
  3214  0551  120A  118A  2505  120A  118A  	fcall	_prender_ELCD
  3215  0556                     l137:
  3216  0556  0008               	return
  3217  0557                     __end_of_Escribir_datosLCD:
  3218                           
  3219                           	psect	text18
  3220  0505                     __ptext18:	
  3221 ;; *************** function _prender_ELCD *****************
  3222 ;; Defined at:
  3223 ;;		line 11 in file "LCD.c"
  3224 ;; Parameters:    Size  Location     Type
  3225 ;;		None
  3226 ;; Auto vars:     Size  Location     Type
  3227 ;;		None
  3228 ;; Return value:  Size  Location     Type
  3229 ;;                  1    wreg      void 
  3230 ;; Registers used:
  3231 ;;		wreg
  3232 ;; Tracked objects:
  3233 ;;		On entry : 0/0
  3234 ;;		On exit  : 0/0
  3235 ;;		Unchanged: 0/0
  3236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3237 ;;      Params:         0       0       0       0       0
  3238 ;;      Locals:         0       0       0       0       0
  3239 ;;      Temps:          1       0       0       0       0
  3240 ;;      Totals:         1       0       0       0       0
  3241 ;;Total ram usage:        1 bytes
  3242 ;; Hardware stack levels used: 1
  3243 ;; Hardware stack levels required when called: 2
  3244 ;; This function calls:
  3245 ;;		Nothing
  3246 ;; This function is called by:
  3247 ;;		_Escribir_comandoLCD
  3248 ;;		_Escribir_datosLCD
  3249 ;; This function uses a non-reentrant model
  3250 ;;
  3251                           
  3252                           
  3253                           ;psect for function _prender_ELCD
  3254  0505                     _prender_ELCD:
  3255  0505                     l1656:	
  3256                           ;incstack = 0
  3257                           ; Regs used in _prender_ELCD: [wreg]
  3258                           
  3259                           
  3260                           ;LCD.c: 12:     RC1 = 1;
  3261  0505  1283               	bcf	3,5	;RP0=0, select bank0
  3262  0506  1303               	bcf	3,6	;RP1=0, select bank0
  3263  0507  1487               	bsf	7,1	;volatile
  3264  0508                     l1658:
  3265                           
  3266                           ;LCD.c: 13:     _delay((unsigned long)((500)*(8000000/4000000.0)));
  3267  0508  30C7               	movlw	199
  3268  0509  00F4               	movwf	??_prender_ELCD
  3269  050A                     u1547:
  3270  050A  2D0B               	nop2
  3271  050B  0BF4               	decfsz	??_prender_ELCD,f
  3272  050C  2D0A               	goto	u1547
  3273  050D  2D0E               	nop2
  3274  050E  2D0F               	nop2
  3275  050F                     l1660:
  3276                           
  3277                           ;LCD.c: 14:     RC1 = 0;
  3278  050F  1283               	bcf	3,5	;RP0=0, select bank0
  3279  0510  1303               	bcf	3,6	;RP1=0, select bank0
  3280  0511  1087               	bcf	7,1	;volatile
  3281                           
  3282                           ;LCD.c: 15:     _delay((unsigned long)((500)*(8000000/4000000.0)));
  3283  0512  30C7               	movlw	199
  3284  0513  00F4               	movwf	??_prender_ELCD
  3285  0514                     u1557:
  3286  0514  2D15               	nop2
  3287  0515  0BF4               	decfsz	??_prender_ELCD,f
  3288  0516  2D14               	goto	u1557
  3289  0517  2D18               	nop2
  3290  0518  2D19               	nop2
  3291  0519                     l131:
  3292  0519  0008               	return
  3293  051A                     __end_of_prender_ELCD:
  3294                           
  3295                           	psect	text19
  3296  04C9                     __ptext19:	
  3297 ;; *************** function _isr *****************
  3298 ;; Defined at:
  3299 ;;		line 66 in file "LAB2.c"
  3300 ;; Parameters:    Size  Location     Type
  3301 ;;		None
  3302 ;; Auto vars:     Size  Location     Type
  3303 ;;		None
  3304 ;; Return value:  Size  Location     Type
  3305 ;;                  1    wreg      void 
  3306 ;; Registers used:
  3307 ;;		wreg, status,2, status,0, pclath, cstack
  3308 ;; Tracked objects:
  3309 ;;		On entry : 0/0
  3310 ;;		On exit  : 0/0
  3311 ;;		Unchanged: 0/0
  3312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3313 ;;      Params:         0       0       0       0       0
  3314 ;;      Locals:         0       0       0       0       0
  3315 ;;      Temps:          2       0       0       0       0
  3316 ;;      Totals:         2       0       0       0       0
  3317 ;;Total ram usage:        2 bytes
  3318 ;; Hardware stack levels used: 1
  3319 ;; Hardware stack levels required when called: 1
  3320 ;; This function calls:
  3321 ;;		_ADC
  3322 ;;		_obtener_dato
  3323 ;; This function is called by:
  3324 ;;		Interrupt level 1
  3325 ;; This function uses a non-reentrant model
  3326 ;;
  3327                           
  3328                           
  3329                           ;psect for function _isr
  3330  04C9                     _isr:
  3331  04C9                     i1l1606:
  3332                           
  3333                           ;LAB2.c: 67:     if(PIR1bits.ADIF){
  3334  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  3335  04CA  1303               	bcf	3,6	;RP1=0, select bank0
  3336  04CB  1F0C               	btfss	12,6	;volatile
  3337  04CC  2CCE               	goto	u103_21
  3338  04CD  2CCF               	goto	u103_20
  3339  04CE                     u103_21:
  3340  04CE  2CD7               	goto	i1l1612
  3341  04CF                     u103_20:
  3342  04CF                     i1l1608:
  3343                           
  3344                           ;LAB2.c: 68:         ADC();
  3345  04CF  120A  118A  24E7  120A  118A  	fcall	_ADC
  3346  04D4                     i1l1610:
  3347                           
  3348                           ;LAB2.c: 69:         PIR1bits.ADIF = 0;
  3349  04D4  1283               	bcf	3,5	;RP0=0, select bank0
  3350  04D5  1303               	bcf	3,6	;RP1=0, select bank0
  3351  04D6  130C               	bcf	12,6	;volatile
  3352  04D7                     i1l1612:
  3353                           
  3354                           ;LAB2.c: 72:     if(PIR1bits.RCIF){
  3355  04D7  1E8C               	btfss	12,5	;volatile
  3356  04D8  2CDA               	goto	u104_21
  3357  04D9  2CDB               	goto	u104_20
  3358  04DA                     u104_21:
  3359  04DA  2CE0               	goto	i1l89
  3360  04DB                     u104_20:
  3361  04DB                     i1l1614:
  3362                           
  3363                           ;LAB2.c: 73:         obtener_dato();
  3364  04DB  120A  118A  2557  120A  118A  	fcall	_obtener_dato
  3365  04E0                     i1l89:
  3366  04E0  0873               	movf	??_isr+1,w
  3367  04E1  008A               	movwf	10
  3368  04E2  0E72               	swapf	??_isr,w
  3369  04E3  0083               	movwf	3
  3370  04E4  0EFE               	swapf	btemp,f
  3371  04E5  0E7E               	swapf	btemp,w
  3372  04E6  0009               	retfie
  3373  04E7                     __end_of_isr:
  3374                           
  3375                           	psect	intentry
  3376  0004                     __pintentry:	
  3377                           ;incstack = 0
  3378                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  3379                           
  3380  0004                     interrupt_function:
  3381  007E                     saved_w	set	btemp
  3382  0004  00FE               	movwf	btemp
  3383  0005  0E03               	swapf	3,w
  3384  0006  00F2               	movwf	??_isr
  3385  0007  080A               	movf	10,w
  3386  0008  00F3               	movwf	??_isr+1
  3387  0009  120A  118A  2CC9   	ljmp	_isr
  3388                           
  3389                           	psect	text20
  3390  0557                     __ptext20:	
  3391 ;; *************** function _obtener_dato *****************
  3392 ;; Defined at:
  3393 ;;		line 29 in file "USART.c"
  3394 ;; Parameters:    Size  Location     Type
  3395 ;;		None
  3396 ;; Auto vars:     Size  Location     Type
  3397 ;;		None
  3398 ;; Return value:  Size  Location     Type
  3399 ;;                  1    wreg      void 
  3400 ;; Registers used:
  3401 ;;		wreg
  3402 ;; Tracked objects:
  3403 ;;		On entry : 0/0
  3404 ;;		On exit  : 0/0
  3405 ;;		Unchanged: 0/0
  3406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3407 ;;      Params:         0       0       0       0       0
  3408 ;;      Locals:         0       0       0       0       0
  3409 ;;      Temps:          2       0       0       0       0
  3410 ;;      Totals:         2       0       0       0       0
  3411 ;;Total ram usage:        2 bytes
  3412 ;; Hardware stack levels used: 1
  3413 ;; This function calls:
  3414 ;;		Nothing
  3415 ;; This function is called by:
  3416 ;;		_isr
  3417 ;; This function uses a non-reentrant model
  3418 ;;
  3419                           
  3420                           
  3421                           ;psect for function _obtener_dato
  3422  0557                     _obtener_dato:
  3423  0557                     i1l1514:	
  3424                           ;incstack = 0
  3425                           ; Regs used in _obtener_dato: [wreg]
  3426                           
  3427                           
  3428                           ;USART.c: 30:     dato = RCREG;
  3429  0557  1283               	bcf	3,5	;RP0=0, select bank0
  3430  0558  1303               	bcf	3,6	;RP1=0, select bank0
  3431  0559  081A               	movf	26,w	;volatile
  3432  055A  00F0               	movwf	??_obtener_dato
  3433  055B  01F1               	clrf	??_obtener_dato+1
  3434  055C  0870               	movf	??_obtener_dato,w
  3435  055D  00A0               	movwf	_dato
  3436  055E  0871               	movf	??_obtener_dato+1,w
  3437  055F  00A1               	movwf	_dato+1
  3438  0560                     i1l209:
  3439  0560  0008               	return
  3440  0561                     __end_of_obtener_dato:
  3441                           
  3442                           	psect	text21
  3443  04E7                     __ptext21:	
  3444 ;; *************** function _ADC *****************
  3445 ;; Defined at:
  3446 ;;		line 11 in file "ADC.c"
  3447 ;; Parameters:    Size  Location     Type
  3448 ;;		None
  3449 ;; Auto vars:     Size  Location     Type
  3450 ;;		None
  3451 ;; Return value:  Size  Location     Type
  3452 ;;                  1    wreg      void 
  3453 ;; Registers used:
  3454 ;;		wreg, status,2, status,0
  3455 ;; Tracked objects:
  3456 ;;		On entry : 0/0
  3457 ;;		On exit  : 0/0
  3458 ;;		Unchanged: 0/0
  3459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3460 ;;      Params:         0       0       0       0       0
  3461 ;;      Locals:         0       0       0       0       0
  3462 ;;      Temps:          1       0       0       0       0
  3463 ;;      Totals:         1       0       0       0       0
  3464 ;;Total ram usage:        1 bytes
  3465 ;; Hardware stack levels used: 1
  3466 ;; This function calls:
  3467 ;;		Nothing
  3468 ;; This function is called by:
  3469 ;;		_isr
  3470 ;; This function uses a non-reentrant model
  3471 ;;
  3472                           
  3473                           
  3474                           ;psect for function _ADC
  3475  04E7                     _ADC:
  3476  04E7                     i1l1506:	
  3477                           ;incstack = 0
  3478                           ; Regs used in _ADC: [wreg+status,2+status,0]
  3479                           
  3480                           
  3481                           ;ADC.c: 12:     if(ADCON0bits.CHS == 0){
  3482  04E7  1283               	bcf	3,5	;RP0=0, select bank0
  3483  04E8  1303               	bcf	3,6	;RP1=0, select bank0
  3484  04E9  0C1F               	rrf	31,w	;volatile
  3485  04EA  00F0               	movwf	??_ADC
  3486  04EB  0C70               	rrf	??_ADC,w
  3487  04EC  390F               	andlw	15
  3488  04ED  3A00               	xorlw	0
  3489  04EE  1D03               	skipz
  3490  04EF  2CF1               	goto	u93_21
  3491  04F0  2CF2               	goto	u93_20
  3492  04F1                     u93_21:
  3493  04F1  2CF7               	goto	i1l1510
  3494  04F2                     u93_20:
  3495  04F2                     i1l1508:
  3496                           
  3497                           ;ADC.c: 13:         cont1 = ADRESH;
  3498  04F2  081E               	movf	30,w	;volatile
  3499  04F3  00F0               	movwf	??_ADC
  3500  04F4  0870               	movf	??_ADC,w
  3501  04F5  00A4               	movwf	_cont1
  3502                           
  3503                           ;ADC.c: 14:     }
  3504  04F6  2D04               	goto	i1l182
  3505  04F7                     i1l1510:
  3506  04F7  0C1F               	rrf	31,w	;volatile
  3507  04F8  00F0               	movwf	??_ADC
  3508  04F9  0C70               	rrf	??_ADC,w
  3509  04FA  390F               	andlw	15
  3510  04FB  3A01               	xorlw	1
  3511  04FC  1D03               	skipz
  3512  04FD  2CFF               	goto	u94_21
  3513  04FE  2D00               	goto	u94_20
  3514  04FF                     u94_21:
  3515  04FF  2D04               	goto	i1l182
  3516  0500                     u94_20:
  3517  0500                     i1l1512:
  3518                           
  3519                           ;ADC.c: 16:         cont2 = ADRESH;
  3520  0500  081E               	movf	30,w	;volatile
  3521  0501  00F0               	movwf	??_ADC
  3522  0502  0870               	movf	??_ADC,w
  3523  0503  00A3               	movwf	_cont2
  3524  0504                     i1l182:
  3525  0504  0008               	return
  3526  0505                     __end_of_ADC:
  3527  007E                     btemp	set	126	;btemp
  3528  007E                     wtemp0	set	126
  3529                           
  3530                           	psect	config
  3531                           
  3532                           ;Config register CONFIG1 @ 0x2007
  3533                           ;	Oscillator Selection bits
  3534                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  3535                           ;	Watchdog Timer Enable bit
  3536                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  3537                           ;	Power-up Timer Enable bit
  3538                           ;	PWRTE = OFF, PWRT disabled
  3539                           ;	RE3/MCLR pin function select bit
  3540                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  3541                           ;	Code Protection bit
  3542                           ;	CP = OFF, Program memory code protection is disabled
  3543                           ;	Data Code Protection bit
  3544                           ;	CPD = OFF, Data memory code protection is disabled
  3545                           ;	Brown Out Reset Selection bits
  3546                           ;	BOREN = OFF, BOR disabled
  3547                           ;	Internal External Switchover bit
  3548                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  3549                           ;	Fail-Safe Clock Monitor Enabled bit
  3550                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  3551                           ;	Low Voltage Programming Enable bit
  3552                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  3553                           ;	In-Circuit Debugger Mode bit
  3554                           ;	DEBUG = 0x1, unprogrammed default
  3555  2007                     	org	8199
  3556  2007  20D4               	dw	8404
  3557                           
  3558                           ;Config register CONFIG2 @ 0x2008
  3559                           ;	Brown-out Reset Selection bit
  3560                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  3561                           ;	Flash Program Memory Self Write Enable bits
  3562                           ;	WRT = OFF, Write protection off
  3563  2008                     	org	8200
  3564  2008  3FFF               	dw	16383

Data Sizes:
    Strings     25
    Constant    10
    Data        0
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80     36      74
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_4(CODE[8]), STR_3(CODE[8]), STR_2(CODE[8]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> buffer3(BANK0[10]), buffer2(BANK0[10]), buffer1(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Escribir_stringLCD@d	PTR const unsigned char  size(2) Largest target is 17
		 -> buffer3(BANK0[10]), buffer2(BANK0[10]), buffer1(BANK0[10]), STR_1(CODE[17]), 

    divisor@dig	PTR unsigned char  size(1) Largest target is 1
		 -> vol3(BANK0[1]), vol2(BANK0[1]), vol1(BANK0[1]), 


Critical Paths under _main in COMMON

    _main->_set_cursor
    _main->_setup
    _Limpiar_pantallaLCD->_Escribir_comandoLCD
    _Iniciar_LCD->_Escribir_comandoLCD
    _set_cursor->_Escribir_comandoLCD
    _Escribir_comandoLCD->_prender_ELCD
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _divisor->___awmod
    _Escribir_stringLCD->_Escribir_datosLCD
    _Escribir_datosLCD->_prender_ELCD

Critical Paths under _isr in COMMON

    _isr->_obtener_dato

Critical Paths under _main in BANK0

    _main->_chequeo
    _main->_conversion_char
    _setup->_Limpiar_pantallaLCD
    _conversion_char->_sprintf
    _chequeo->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _divisor->___awdiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    8445
                                             35 BANK0      1     1      0
                 _Escribir_stringLCD
                            _chequeo
                         _conversion
                    _conversion_char
                         _set_cursor
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                1     1      0      62
                                              6 COMMON     1     1      0
                        _Iniciar_LCD
                _Limpiar_pantallaLCD
                       _config_USART
 ---------------------------------------------------------------------------------
 (2) _config_USART                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Limpiar_pantallaLCD                                  2     2      0      31
                                              0 BANK0      2     2      0
                _Escribir_comandoLCD
 ---------------------------------------------------------------------------------
 (2) _Iniciar_LCD                                          0     0      0      31
                _Escribir_comandoLCD
 ---------------------------------------------------------------------------------
 (1) _set_cursor                                           2     1      1     515
                                              6 COMMON     1     0      1
                                              0 BANK0      1     1      0
                _Escribir_comandoLCD
 ---------------------------------------------------------------------------------
 (3) _Escribir_comandoLCD                                  1     1      0      31
                                              5 COMMON     1     1      0
                       _prender_ELCD
 ---------------------------------------------------------------------------------
 (1) _conversion_char                                      7     7      0    3706
                                             28 BANK0      7     7      0
                            _divisor
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _conversion                                           1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chequeo                                              7     7      0    3706
                                             28 BANK0      7     7      0
                            _divisor
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             25    18      7    1907
                                             11 BANK0     17    10      7
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     412
                                              5 COMMON     2     2      0
                                              7 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     421
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _divisor                                              8     7      1    1799
                                              8 BANK0      8     7      1
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     613
                                              4 COMMON     3     3      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     625
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Escribir_stringLCD                                   2     0      2     456
                                              0 BANK0      2     0      2
                  _Escribir_datosLCD
 ---------------------------------------------------------------------------------
 (2) _Escribir_datosLCD                                    1     1      0      31
                                              5 COMMON     1     1      0
                       _prender_ELCD
 ---------------------------------------------------------------------------------
 (4) _prender_ELCD                                         1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  2     2      0       0
                                              2 COMMON     2     2      0
                                _ADC
                       _obtener_dato
 ---------------------------------------------------------------------------------
 (6) _obtener_dato                                         2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _ADC                                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Escribir_stringLCD
     _Escribir_datosLCD
       _prender_ELCD
   _chequeo
     _divisor
       ___awdiv
       ___awmod
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _conversion
   _conversion_char
     _divisor
     _sprintf
   _set_cursor
     _Escribir_comandoLCD
       _prender_ELCD
   _setup
     _Iniciar_LCD
       _Escribir_comandoLCD
     _Limpiar_pantallaLCD
       _Escribir_comandoLCD
     _config_USART

 _isr (ROOT)
   _ADC
   _obtener_dato

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      54       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     24      4A       5       92.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      54      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Fri Feb 04 12:50:44 2022

                           pc 0002                            l94 0111                  ___awdiv@sign 004B  
                          fsr 0004                           l100 0335                           l103 023B  
                         l114 03BE                           l131 0519                           l108 02ED  
                         l140 04A9                           l134 054A                           l206 052C  
                         l137 0556                           l146 0486                           l322 0108  
                         l154 04C8                           l149 053E                           _ADC 04E7  
                         l189 045E                           l608 03FA                           l492 0296  
                         l479 01E0                           l598 037B                           _RC0 0038  
                         _RC1 0039                           u950 0439                           u951 0438  
                         u960 0442                           u961 0441                           u970 0452  
                         u971 0451                           _dec 0078                           _cen 0077  
                         _isr 04C9                           fsr0 0004                           _uni 0079  
                         indf 0000                  ___awmod@sign 0076                          ?_ADC 0070  
                        l2012 004C                          l1400 0528                          l1402 0529  
                        l1700 01C5                          l1702 01CC                          l1390 051F  
                        l1704 01D2                          l1720 024A                          l1712 023C  
                        l1560 0439                          l1800 048B                          l1392 0520  
                        l1706 01D7                          l1730 0263                          l1722 024E  
                        l1714 023D                          l1562 0442                          l1810 049D  
                        l1802 048C                          l1394 0521                          l1386 051A  
                        l1660 050F                          l1708 01DC                          l1740 0282  
                        l1732 0267                          l1724 0253                          l1716 0243  
                        l1820 02A2                          l1572 0457                          l1564 0444  
                        l1812 04A3                          l1804 048F                          l1396 0524  
                        l1388 051E                          l1900 02EE                          l1670 017B  
                        l1734 026B                          l1726 0259                          l1742 0288  
                        l1718 0248                          l1830 02E0                          l1750 0336  
                        l1574 045B                          l1566 0449                          l1558 0433  
                        l1662 0540                          l1806 0491                          l1814 052D  
                        l1398 0527                          l1910 0305                          l1902 02F2  
                        l1656 0505                          l1680 018F                          l1672 017F  
                        l1744 028D                          l1736 0275                          l1728 025C  
                        l1760 034E                          l1752 033A                          l1840 0039  
                        l1832 0022                          l1568 0452                          l1664 0543  
                        l1808 0497                          l1816 0533                          l1920 0315  
                        l1912 030A                          l1904 02F3                          l1658 0508  
                        l1690 01A5                          l1682 0193                          l1674 0184  
                        l1746 0292                          l1738 027B                          l1826 02A4  
                        l1818 029A                          l1770 0371                          l1762 0352  
                        l1754 0340                          l1850 0063                          l1834 0027  
                        l1666 0545                          l1930 0323                          l1922 0317  
                        l1914 030D                          l1906 02FE                          l1692 01A9  
                        l1684 0195                          l1676 0186                          l1668 0178  
                        l1828 02DA                          l1764 0363                          l1756 0343  
                        l1772 0377                          l1780 03CA                          l1852 0067  
                        l1844 003A                          l1836 002D                          l1940 0330  
                        l1932 0326                          l1924 0318                          l1916 030E  
                        l1908 0304                          l1950 045F                          l1694 01AD  
                        l1686 019B                          l1678 018A                          l1766 0369  
                        l1758 034A                          l1790 03E9                          l1782 03D1  
                        l1870 009E                          l1862 0072                          l1854 006B  
                        l1846 0057                          l1838 0034                          l1942 04AD  
                        l1934 0329                          l1926 031D                          l1918 030F  
                        l1952 0460                          l1696 01BE                          l1688 019E  
                        l1768 036A                          l1792 03F0                          l1784 03D5  
                        l1776 03BF                          l1880 00E5                          l1872 00A5  
                        l1856 0070                          l1848 005F                          l1960 037C  
                        l1944 04B2                          l1936 032A                          l1928 0320  
                        l1954 046E                          l1698 01C4                          l1786 03D9  
                        l1778 03C7                          l1794 03F6                          l1882 00E9  
                        l1874 00A9                          l1866 008E                          l1970 039D  
                        l1962 0385                          l1946 04B9                          l1938 032B  
                        l1956 0476                          l1788 03E3                          l1876 00AE  
                        l1868 0098                          l1884 00F2                          l1964 038A  
                        l1948 04C1                          l1980 0136                          l1972 0109  
                        l1894 054C                          l1878 00DE                          l1886 0104  
                        l1966 0391                          l1958 01E1                          l1798 0487  
                        l1982 0141                          l1974 010E                          l1896 054F  
                        l1968 0393                          l1984 015D                          l1976 011E  
                        l1898 0551                          l1986 0169                          l1978 0129  
                        ?_isr 0070                          STR_1 041A                          STR_2 042B  
                        STR_3 042B                          STR_4 042B                          u1110 01BE  
                        u1111 01BD                          u1200 0275                          u1105 01AE  
                        u1201 0274                          u1130 01D2                          u1050 017F  
                        u1131 01D1                          u1115 01BA                          u1051 017E  
                        u1140 01D7                          u1060 018A                          u1220 0288  
                        u1300 0377                          u1141 01D6                          u1125 01C6  
                        u1061 0189                          u1221 0287                          u1205 0271  
                        u1301 0376                          u1070 019B                          u1230 028D  
                        u1150 0243                          u1310 03C7                          u1071 019A  
                        u1231 028C                          u1215 027C                          u1151 0242  
                        u1311 03C6                          u1160 024E                          u1240 0340  
                        u1400 008D                          u1161 024D                          u1241 033F  
                        u1401 008C                          u1090 01AD                          u1170 0259  
                        u1330 03D9                          u1410 0098                          u1091 01AC  
                        u1171 0258                          u1331 03D8                          u1411 0097  
                        u1260 0352                          u1340 03E3                          u1420 009E  
                        u1085 019F                          u1261 0351                          u1341 03E2  
                        u1325 03CB                          u1421 009D                          u1405 0089  
                        u1190 026B                          u1430 00F2                          u1191 026A  
                        u1255 0344                          u1431 00F1                          u1280 0363  
                        u1360 03F6                          u1440 0104                          u1185 025D  
                        u1281 0362                          u1361 03F5                          u1345 03DF  
                        u1441 0103                          u1370 02ED                          u1450 04B2  
                        u1371 02EC                          u1275 0353                          u1355 03EA  
                        u1451 04B1                          u1507 031A                          u1380 002D  
                        u1460 04C1                          u1285 035F                          u1381 002C  
                        u1461 04C0                          u1517 0539                          u1470 0486  
                        u1390 0067                          u1471 0485                          u1375 02E9  
                        u1295 036B                          u1391 0066                          u1527 0446  
                        u1480 0385                          u1481 0384                          u1537 0459  
              ??_config_USART 0074                          u1490 0391                          u1547 050A  
                        u1491 0390                          u1557 0514                          i1l89 04E0  
               ??_Iniciar_LCD 0076                          _dato 0020                          _main 0109  
                        _vol1 0045                          _vol2 0044                          _vol3 0043  
                        btemp 007E                          start 000C                         ??_ADC 0070  
                       ??_isr 0072    __end_of_Escribir_stringLCD 0487                         ?_main 0070  
             __end_of___awdiv 01E1               __end_of___awmod 0297                         _ANSEL 0188  
             ___awdiv@divisor 0046               __end_of___lwdiv 037C                         i1l209 0560  
                       i1l182 0504               __end_of___lwmod 03FB               ___awdiv@counter 004A  
                       _RCREG 001A                         _SPBRG 0099                         _PORTA 0005  
                       _PORTB 0006                         _PORTD 0008                         _PORTE 0009  
                       _TRISA 0085                         _TRISB 0086                         _TRISD 0088  
                       _TRISE 0089                         u93_20 04F2                         u93_21 04F1  
                       u94_20 0500                         u94_21 04FF               __end_of_chequeo 03BF  
             __end_of_divisor 02EE                         _cont1 0024                         _cont2 0023  
             __end_of_dpowers 041A                         _setup 02EE           _Limpiar_pantallaLCD 052D  
                       pclath 000A             ??_conversion_char 0062                         status 0003  
                       wtemp0 007E               __end_of_sprintf 0109               __initialization 000F  
         __end_of_Iniciar_LCD 04AA                  __end_of_main 0178             _Escribir_datosLCD 054B  
        ?_Limpiar_pantallaLCD 0070            ?_Escribir_datosLCD 0070                        ??_main 0069  
         ??_Escribir_datosLCD 0075                        _ADRESH 001E              ___awdiv@dividend 0048  
                      ?_setup 0070                        _ANSELH 0189                        u103_20 04CF  
                      u103_21 04CE                        i1l1510 04F7                        i1l1512 0500  
                      u104_20 04DB                        u104_21 04DA                        i1l1506 04E7  
                      i1l1514 0557                        i1l1610 04D4                        i1l1508 04F2  
                      i1l1612 04D7                        i1l1614 04DB                        i1l1606 04C9  
                      i1l1608 04CF                        _SPBRGH 009A                        _TRISC0 0438  
                      _TRISC1 0439     __end_of_Escribir_datosLCD 0557         ??_Limpiar_pantallaLCD 0046  
                   ??___awdiv 0074                     ??___awmod 0074                     ??___lwdiv 0074  
                   ??___lwmod 0075                        _cont_U 0022              ___awdiv@quotient 004C  
        __end_of_config_USART 052D               ___awmod@divisor 0046                     ??_chequeo 0062  
             ___awmod@counter 0075                     ??_divisor 004F                        saved_w 007E  
                   ??_sprintf 0058                 ?_obtener_dato 0070       __end_of__initialization 001B  
                 _Iniciar_LCD 0487                __pcstackCOMMON 0070                 __end_of_setup 0336  
              ??_obtener_dato 0070                       ??_setup 0076                    __pbssBANK0 0020  
  __size_of_Escribir_datosLCD 000C                    __pmaintext 0109                    __pintentry 0004  
__size_of_Escribir_comandoLCD 000C      Escribir_datosLCD@LCDchar 0075               _conversion_char 01E1  
          _Escribir_stringLCD 045F                    __stringtab 0400                    _conversion 0433  
         ?_Escribir_stringLCD 0046         __size_of_config_USART 0013                       ___awdiv 0178  
                     ___awmod 023C                       ___lwdiv 0336                       ___lwmod 03BF  
                     _chequeo 037C                       __ptext1 02EE                       __ptext2 051A  
                     __ptext3 052D                       __ptext4 0487                       __ptext5 04AA  
                     __ptext6 053F                       __ptext7 01E1                       __ptext8 0433  
                     __ptext9 037C                       _buffer1 0039                       _buffer2 002F  
                     _buffer3 0025                  __size_of_ADC 001E                       _divisor 0297  
        ??_Escribir_stringLCD 0076                       _dpowers 0410                  __size_of_isr 001E  
            ___awmod@dividend 0048                 ?_prender_ELCD 0070                   set_cursor@a 0046  
                 set_cursor@b 0076                       _sprintf 001F                       clrloop0 0562  
        end_of_initialization 001B                  _config_USART 051A                    _set_cursor 04AA  
                   _RCSTAbits 0018          __end_of_obtener_dato 0561       __end_of_conversion_char 023C  
              ??_prender_ELCD 0074                  ?_Iniciar_LCD 0070                   ?_conversion 0070  
                   _TXSTAbits 0098   __end_of_Limpiar_pantallaLCD 053F                    divisor@dig 004E  
                 _BAUDCTLbits 0187           start_initialization 000F                   __end_of_ADC 0505  
                 __end_of_isr 04E7           _Escribir_comandoLCD 053F    Escribir_comandoLCD@Comando 0075  
                 ?_set_cursor 0076              ?_conversion_char 0070          ?_Escribir_comandoLCD 0070  
         __size_of_conversion 002C                   __pbssCOMMON 0077                     ___latbits 0002  
               __pcstackBANK0 0046                   sprintf@flag 005C                   sprintf@prec 005D  
       __size_of_obtener_dato 000A          __end_of_prender_ELCD 051A              ___lwdiv@dividend 0048  
                    ?___awdiv 0046                      ?___awmod 0046                      ?___lwdiv 0046  
                    ?___lwmod 004D         ??_Escribir_comandoLCD 0075                      ?_chequeo 0070  
                   __pstrings 0400                      ?_divisor 004E              ___lwdiv@quotient 004B  
         __size_of_set_cursor 001F                      ?_sprintf 0051                __size_of_setup 0048  
                _obtener_dato 0557             interrupt_function 0004                     clear_ram0 0561  
                    _PIE1bits 008C          __size_of_Iniciar_LCD 0023                      _PIR1bits 000C  
                  _ADCON0bits 001F                   __stringbase 040F                    _ADCON1bits 009F  
 __size_of_Escribir_stringLCD 0028                  ??_conversion 0074           Escribir_stringLCD@d 0046  
            __size_of___awdiv 0069              __size_of___awmod 005B              __size_of___lwdiv 0046  
            __size_of___lwmod 003C            __end_of__stringtab 0410              __size_of_chequeo 0043  
                  sprintf@val 005E              __size_of_divisor 0057            __end_of_conversion 045F  
             ___lwdiv@divisor 0046               ___lwdiv@counter 004A                      __ptext10 001F  
                    __ptext11 03BF                      __ptext20 0557                      __ptext12 0336  
                    __ptext21 04E7                      __ptext13 0297                      __ptext14 023C  
                    __ptext15 0178                      __ptext16 045F                      __ptext17 054B  
                    __ptext18 0505                      __ptext19 04C9              __size_of_sprintf 00EA  
       __size_of_prender_ELCD 0015                 __size_of_main 006F                  ??_set_cursor 0077  
__size_of_Limpiar_pantallaLCD 0012                      divisor@a 0051                      divisor@b 0052  
                    divisor@i 0054                    _INTCONbits 000B                  _prender_ELCD 0505  
          __end_of_set_cursor 04C9                      intlevel1 0000                     sprintf@ap 005B  
                   sprintf@sp 0060              ___lwmod@dividend 004F                     stringcode 040A  
                  _OSCCONbits 008F                      sprintf@c 0061                      sprintf@f 0051  
             ___lwmod@divisor 004D               ___lwmod@counter 0076      __size_of_conversion_char 005B  
                    stringdir 040A                      stringtab 0400                 ?_config_USART 0070  
 __end_of_Escribir_comandoLCD 054B  
