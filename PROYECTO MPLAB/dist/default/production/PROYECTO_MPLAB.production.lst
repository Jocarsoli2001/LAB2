

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Fri Feb 04 18:40:05 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    32                           	dabs	1,0x7E,2
    33  0000                     
    34                           ; Version 2.20
    35                           ; Generated 12/02/2020 GMT
    36                           ; 
    37                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F887 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     	;# 
    69  0001                     	;# 
    70  0002                     	;# 
    71  0003                     	;# 
    72  0004                     	;# 
    73  0005                     	;# 
    74  0006                     	;# 
    75  0007                     	;# 
    76  0008                     	;# 
    77  0009                     	;# 
    78  000A                     	;# 
    79  000B                     	;# 
    80  000C                     	;# 
    81  000D                     	;# 
    82  000E                     	;# 
    83  000E                     	;# 
    84  000F                     	;# 
    85  0010                     	;# 
    86  0011                     	;# 
    87  0012                     	;# 
    88  0013                     	;# 
    89  0014                     	;# 
    90  0015                     	;# 
    91  0015                     	;# 
    92  0016                     	;# 
    93  0017                     	;# 
    94  0018                     	;# 
    95  0019                     	;# 
    96  001A                     	;# 
    97  001B                     	;# 
    98  001B                     	;# 
    99  001C                     	;# 
   100  001D                     	;# 
   101  001E                     	;# 
   102  001F                     	;# 
   103  0081                     	;# 
   104  0085                     	;# 
   105  0086                     	;# 
   106  0087                     	;# 
   107  0088                     	;# 
   108  0089                     	;# 
   109  008C                     	;# 
   110  008D                     	;# 
   111  008E                     	;# 
   112  008F                     	;# 
   113  0090                     	;# 
   114  0091                     	;# 
   115  0092                     	;# 
   116  0093                     	;# 
   117  0093                     	;# 
   118  0093                     	;# 
   119  0094                     	;# 
   120  0095                     	;# 
   121  0096                     	;# 
   122  0097                     	;# 
   123  0098                     	;# 
   124  0099                     	;# 
   125  009A                     	;# 
   126  009B                     	;# 
   127  009C                     	;# 
   128  009D                     	;# 
   129  009E                     	;# 
   130  009F                     	;# 
   131  0105                     	;# 
   132  0107                     	;# 
   133  0108                     	;# 
   134  0109                     	;# 
   135  010C                     	;# 
   136  010C                     	;# 
   137  010D                     	;# 
   138  010E                     	;# 
   139  010F                     	;# 
   140  0185                     	;# 
   141  0187                     	;# 
   142  0188                     	;# 
   143  0189                     	;# 
   144  018C                     	;# 
   145  018D                     	;# 
   146  0000                     	;# 
   147  0001                     	;# 
   148  0002                     	;# 
   149  0003                     	;# 
   150  0004                     	;# 
   151  0005                     	;# 
   152  0006                     	;# 
   153  0007                     	;# 
   154  0008                     	;# 
   155  0009                     	;# 
   156  000A                     	;# 
   157  000B                     	;# 
   158  000C                     	;# 
   159  000D                     	;# 
   160  000E                     	;# 
   161  000E                     	;# 
   162  000F                     	;# 
   163  0010                     	;# 
   164  0011                     	;# 
   165  0012                     	;# 
   166  0013                     	;# 
   167  0014                     	;# 
   168  0015                     	;# 
   169  0015                     	;# 
   170  0016                     	;# 
   171  0017                     	;# 
   172  0018                     	;# 
   173  0019                     	;# 
   174  001A                     	;# 
   175  001B                     	;# 
   176  001B                     	;# 
   177  001C                     	;# 
   178  001D                     	;# 
   179  001E                     	;# 
   180  001F                     	;# 
   181  0081                     	;# 
   182  0085                     	;# 
   183  0086                     	;# 
   184  0087                     	;# 
   185  0088                     	;# 
   186  0089                     	;# 
   187  008C                     	;# 
   188  008D                     	;# 
   189  008E                     	;# 
   190  008F                     	;# 
   191  0090                     	;# 
   192  0091                     	;# 
   193  0092                     	;# 
   194  0093                     	;# 
   195  0093                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0095                     	;# 
   199  0096                     	;# 
   200  0097                     	;# 
   201  0098                     	;# 
   202  0099                     	;# 
   203  009A                     	;# 
   204  009B                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  009F                     	;# 
   209  0105                     	;# 
   210  0107                     	;# 
   211  0108                     	;# 
   212  0109                     	;# 
   213  010C                     	;# 
   214  010C                     	;# 
   215  010D                     	;# 
   216  010E                     	;# 
   217  010F                     	;# 
   218  0185                     	;# 
   219  0187                     	;# 
   220  0188                     	;# 
   221  0189                     	;# 
   222  018C                     	;# 
   223  018D                     	;# 
   224  0000                     	;# 
   225  0001                     	;# 
   226  0002                     	;# 
   227  0003                     	;# 
   228  0004                     	;# 
   229  0005                     	;# 
   230  0006                     	;# 
   231  0007                     	;# 
   232  0008                     	;# 
   233  0009                     	;# 
   234  000A                     	;# 
   235  000B                     	;# 
   236  000C                     	;# 
   237  000D                     	;# 
   238  000E                     	;# 
   239  000E                     	;# 
   240  000F                     	;# 
   241  0010                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0013                     	;# 
   245  0014                     	;# 
   246  0015                     	;# 
   247  0015                     	;# 
   248  0016                     	;# 
   249  0017                     	;# 
   250  0018                     	;# 
   251  0019                     	;# 
   252  001A                     	;# 
   253  001B                     	;# 
   254  001B                     	;# 
   255  001C                     	;# 
   256  001D                     	;# 
   257  001E                     	;# 
   258  001F                     	;# 
   259  0081                     	;# 
   260  0085                     	;# 
   261  0086                     	;# 
   262  0087                     	;# 
   263  0088                     	;# 
   264  0089                     	;# 
   265  008C                     	;# 
   266  008D                     	;# 
   267  008E                     	;# 
   268  008F                     	;# 
   269  0090                     	;# 
   270  0091                     	;# 
   271  0092                     	;# 
   272  0093                     	;# 
   273  0093                     	;# 
   274  0093                     	;# 
   275  0094                     	;# 
   276  0095                     	;# 
   277  0096                     	;# 
   278  0097                     	;# 
   279  0098                     	;# 
   280  0099                     	;# 
   281  009A                     	;# 
   282  009B                     	;# 
   283  009C                     	;# 
   284  009D                     	;# 
   285  009E                     	;# 
   286  009F                     	;# 
   287  0105                     	;# 
   288  0107                     	;# 
   289  0108                     	;# 
   290  0109                     	;# 
   291  010C                     	;# 
   292  010C                     	;# 
   293  010D                     	;# 
   294  010E                     	;# 
   295  010F                     	;# 
   296  0185                     	;# 
   297  0187                     	;# 
   298  0188                     	;# 
   299  0189                     	;# 
   300  018C                     	;# 
   301  018D                     	;# 
   302  0000                     	;# 
   303  0001                     	;# 
   304  0002                     	;# 
   305  0003                     	;# 
   306  0004                     	;# 
   307  0005                     	;# 
   308  0006                     	;# 
   309  0007                     	;# 
   310  0008                     	;# 
   311  0009                     	;# 
   312  000A                     	;# 
   313  000B                     	;# 
   314  000C                     	;# 
   315  000D                     	;# 
   316  000E                     	;# 
   317  000E                     	;# 
   318  000F                     	;# 
   319  0010                     	;# 
   320  0011                     	;# 
   321  0012                     	;# 
   322  0013                     	;# 
   323  0014                     	;# 
   324  0015                     	;# 
   325  0015                     	;# 
   326  0016                     	;# 
   327  0017                     	;# 
   328  0018                     	;# 
   329  0019                     	;# 
   330  001A                     	;# 
   331  001B                     	;# 
   332  001B                     	;# 
   333  001C                     	;# 
   334  001D                     	;# 
   335  001E                     	;# 
   336  001F                     	;# 
   337  0081                     	;# 
   338  0085                     	;# 
   339  0086                     	;# 
   340  0087                     	;# 
   341  0088                     	;# 
   342  0089                     	;# 
   343  008C                     	;# 
   344  008D                     	;# 
   345  008E                     	;# 
   346  008F                     	;# 
   347  0090                     	;# 
   348  0091                     	;# 
   349  0092                     	;# 
   350  0093                     	;# 
   351  0093                     	;# 
   352  0093                     	;# 
   353  0094                     	;# 
   354  0095                     	;# 
   355  0096                     	;# 
   356  0097                     	;# 
   357  0098                     	;# 
   358  0099                     	;# 
   359  009A                     	;# 
   360  009B                     	;# 
   361  009C                     	;# 
   362  009D                     	;# 
   363  009E                     	;# 
   364  009F                     	;# 
   365  0105                     	;# 
   366  0107                     	;# 
   367  0108                     	;# 
   368  0109                     	;# 
   369  010C                     	;# 
   370  010C                     	;# 
   371  010D                     	;# 
   372  010E                     	;# 
   373  010F                     	;# 
   374  0185                     	;# 
   375  0187                     	;# 
   376  0188                     	;# 
   377  0189                     	;# 
   378  018C                     	;# 
   379  018D                     	;# 
   380                           
   381                           	psect	strings
   382  0427                     __pstrings:
   383  0427                     stringtab:
   384  0427                     __stringtab:
   385                           
   386                           ;	String table - string pointers are 1 byte each
   387  0427  1BFF               	btfsc	btemp+1,7
   388  0428  2C31               	ljmp	stringcode
   389  0429  1383               	bcf	3,7
   390  042A  187F               	btfsc	btemp+1,0
   391  042B  1783               	bsf	3,7
   392  042C  0800               	movf	0,w
   393  042D  0A84               	incf	4,f
   394  042E  1903               	skipnz
   395  042F  0AFF               	incf	btemp+1,f
   396  0430  0008               	return
   397  0431                     stringcode:
   398  0431                     stringdir:
   399  0431  3004               	movlw	high stringdir
   400  0432  008A               	movwf	10
   401  0433  0804               	movf	4,w
   402  0434  0A84               	incf	4,f
   403  0435  0782               	addwf	2,f
   404  0436                     __stringbase:
   405  0436  3400               	retlw	0
   406  0437                     __end_of__stringtab:
   407  0437                     _dpowers:
   408  0437  3401               	retlw	1
   409  0438  3400               	retlw	0
   410  0439  340A               	retlw	10
   411  043A  3400               	retlw	0
   412  043B  3464               	retlw	100
   413  043C  3400               	retlw	0
   414  043D  34E8               	retlw	232
   415  043E  3403               	retlw	3
   416  043F  3410               	retlw	16
   417  0440  3427               	retlw	39
   418  0441                     __end_of_dpowers:
   419  001E                     _ADRESH	set	30
   420  0008                     _PORTD	set	8
   421  0018                     _RCSTAbits	set	24
   422  000B                     _INTCONbits	set	11
   423  0006                     _PORTB	set	6
   424  0009                     _PORTE	set	9
   425  0005                     _PORTA	set	5
   426  001F                     _ADCON0bits	set	31
   427  001A                     _RCREG	set	26
   428  000C                     _PIR1bits	set	12
   429  0038                     _RC0	set	56
   430  0039                     _RC1	set	57
   431  0088                     _TRISD	set	136
   432  009A                     _SPBRGH	set	154
   433  0099                     _SPBRG	set	153
   434  0098                     _TXSTAbits	set	152
   435  008C                     _PIE1bits	set	140
   436  009F                     _ADCON1bits	set	159
   437  008F                     _OSCCONbits	set	143
   438  0089                     _TRISE	set	137
   439  0086                     _TRISB	set	134
   440  0085                     _TRISA	set	133
   441  0438                     _TRISC0	set	1080
   442  0439                     _TRISC1	set	1081
   443  0187                     _BAUDCTLbits	set	391
   444  0189                     _ANSELH	set	393
   445  0188                     _ANSEL	set	392
   446  0441                     STR_1:
   447  0441  3453               	retlw	83	;'S'
   448  0442  3431               	retlw	49	;'1'
   449  0443  343A               	retlw	58	;':'
   450  0444  3420               	retlw	32	;' '
   451  0445  3420               	retlw	32	;' '
   452  0446  3420               	retlw	32	;' '
   453  0447  3420               	retlw	32	;' '
   454  0448  3453               	retlw	83	;'S'
   455  0449  3432               	retlw	50	;'2'
   456  044A  343A               	retlw	58	;':'
   457  044B  3420               	retlw	32	;' '
   458  044C  3420               	retlw	32	;' '
   459  044D  3420               	retlw	32	;' '
   460  044E  3453               	retlw	83	;'S'
   461  044F  3433               	retlw	51	;'3'
   462  0450  343A               	retlw	58	;':'
   463  0451  3400               	retlw	0
   464  0452                     STR_2:
   465  0452  3425               	retlw	37	;'%'
   466  0453  3464               	retlw	100	;'d'
   467  0454  342E               	retlw	46	;'.'
   468  0455  3425               	retlw	37	;'%'
   469  0456  3464               	retlw	100	;'d'
   470  0457  3425               	retlw	37	;'%'
   471  0458  3464               	retlw	100	;'d'
   472  0459  3400               	retlw	0
   473  0457                     
   474                           	psect	cinit
   475  000F                     start_initialization:	
   476                           ; #config settings
   477                           
   478  000F                     __initialization:
   479                           
   480                           ; Clear objects allocated to COMMON
   481  000F  01F6               	clrf	__pbssCOMMON& (0+127)
   482  0010  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   483  0011  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   484  0012  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   485                           
   486                           ; Clear objects allocated to BANK0
   487  0013  1383               	bcf	3,7	;select IRP bank0
   488  0014  3045               	movlw	low __pbssBANK0
   489  0015  0084               	movwf	4
   490  0016  3069               	movlw	low (__pbssBANK0+36)
   491  0017  120A  118A  255F  120A  118A  	fcall	clear_ram0
   492  001C                     end_of_initialization:	
   493                           ;End of C runtime variable initialization code
   494                           
   495  001C                     __end_of__initialization:
   496  001C  0183               	clrf	3
   497  001D  120A  118A  290A   	ljmp	_main	;jump to C main() function
   498                           
   499                           	psect	bssCOMMON
   500  0076                     __pbssCOMMON:
   501  0076                     _dato:
   502  0076                     	ds	1
   503  0077                     _cen:
   504  0077                     	ds	1
   505  0078                     _dec:
   506  0078                     	ds	1
   507  0079                     _uni:
   508  0079                     	ds	1
   509                           
   510                           	psect	bssBANK0
   511  0045                     __pbssBANK0:
   512  0045                     _Cont_U:
   513  0045                     	ds	1
   514  0046                     _vol3:
   515  0046                     	ds	1
   516  0047                     _cont2:
   517  0047                     	ds	1
   518  0048                     _cont1:
   519  0048                     	ds	1
   520  0049                     _buffer3:
   521  0049                     	ds	10
   522  0053                     _buffer2:
   523  0053                     	ds	10
   524  005D                     _buffer1:
   525  005D                     	ds	10
   526  0067                     _vol2:
   527  0067                     	ds	1
   528  0068                     _vol1:
   529  0068                     	ds	1
   530                           
   531                           	psect	clrtext
   532  055F                     clear_ram0:	
   533                           ;	Called with FSR containing the base address, and
   534                           ;	W with the last address+1
   535                           
   536  055F  0064               	clrwdt	;clear the watchdog before getting into this loop
   537  0560                     clrloop0:
   538  0560  0180               	clrf	0	;clear RAM location pointed to by FSR
   539  0561  0A84               	incf	4,f	;increment pointer
   540  0562  0604               	xorwf	4,w	;XOR with final address
   541  0563  1903               	btfsc	3,2	;have we reached the end yet?
   542  0564  3400               	retlw	0	;all done for this memory range, return
   543  0565  0604               	xorwf	4,w	;XOR again to restore value
   544  0566  2D60               	goto	clrloop0	;do the next byte
   545                           
   546                           	psect	cstackCOMMON
   547  0070                     __pcstackCOMMON:
   548  0070                     ?_ADC:
   549  0070                     ??_ADC:	
   550                           ; 1 bytes @ 0x0
   551                           
   552  0070                     ?_setup:	
   553                           ; 1 bytes @ 0x0
   554                           
   555  0070                     ?_conversion:	
   556                           ; 1 bytes @ 0x0
   557                           
   558  0070                     ?_conversion_char:	
   559                           ; 1 bytes @ 0x0
   560                           
   561  0070                     ?_dato_recibido:	
   562                           ; 1 bytes @ 0x0
   563                           
   564  0070                     ?_Iniciar_LCD:	
   565                           ; 1 bytes @ 0x0
   566                           
   567  0070                     ?_isr:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0070                     ?_main:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  0070                     ?_prender_ELCD:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0070                     ?_Escribir_comandoLCD:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0070                     ?_Escribir_datosLCD:	
   580                           ; 1 bytes @ 0x0
   581                           
   582                           
   583                           ; 1 bytes @ 0x0
   584  0070                     	ds	1
   585  0071                     ??_isr:
   586                           
   587                           ; 1 bytes @ 0x1
   588  0071                     	ds	3
   589  0074                     ??_conversion:
   590  0074                     ??_prender_ELCD:	
   591                           ; 1 bytes @ 0x4
   592                           
   593  0074                     ??___awdiv:	
   594                           ; 1 bytes @ 0x4
   595                           
   596  0074                     ??___awmod:	
   597                           ; 1 bytes @ 0x4
   598                           
   599  0074                     ??___lwdiv:	
   600                           ; 1 bytes @ 0x4
   601                           
   602                           
   603                           ; 1 bytes @ 0x4
   604  0074                     	ds	1
   605  0075                     ?_divisor:
   606  0075                     ??___lwmod:	
   607                           ; 1 bytes @ 0x5
   608                           
   609  0075                     divisor@dig:	
   610                           ; 1 bytes @ 0x5
   611                           
   612                           
   613                           ; 1 bytes @ 0x5
   614  0075                     	ds	1
   615  0076                     ??_set_cursor:
   616  0076                     ??_Escribir_stringLCD:	
   617                           ; 1 bytes @ 0x6
   618                           
   619  0076                     ??_Escribir_comandoLCD:	
   620                           ; 1 bytes @ 0x6
   621                           
   622  0076                     ??_Escribir_datosLCD:	
   623                           ; 1 bytes @ 0x6
   624                           
   625                           
   626                           	psect	cstackBANK0
   627  0020                     __pcstackBANK0:	
   628                           ; 1 bytes @ 0x6
   629                           
   630  0020                     ?___awdiv:
   631  0020                     ?___awmod:	
   632                           ; 2 bytes @ 0x0
   633                           
   634  0020                     ?___lwdiv:	
   635                           ; 2 bytes @ 0x0
   636                           
   637  0020                     Escribir_comandoLCD@Comando:	
   638                           ; 2 bytes @ 0x0
   639                           
   640  0020                     Escribir_datosLCD@LCDchar:	
   641                           ; 1 bytes @ 0x0
   642                           
   643  0020                     ___awdiv@divisor:	
   644                           ; 1 bytes @ 0x0
   645                           
   646  0020                     ___awmod@divisor:	
   647                           ; 2 bytes @ 0x0
   648                           
   649  0020                     ___lwdiv@divisor:	
   650                           ; 2 bytes @ 0x0
   651                           
   652                           
   653                           ; 2 bytes @ 0x0
   654  0020                     	ds	1
   655  0021                     ?_set_cursor:
   656  0021                     ?_Escribir_stringLCD:	
   657                           ; 1 bytes @ 0x1
   658                           
   659  0021                     ??_Iniciar_LCD:	
   660                           ; 1 bytes @ 0x1
   661                           
   662  0021                     set_cursor@b:	
   663                           ; 1 bytes @ 0x1
   664                           
   665  0021                     Escribir_stringLCD@d:	
   666                           ; 1 bytes @ 0x1
   667                           
   668                           
   669                           ; 2 bytes @ 0x1
   670  0021                     	ds	1
   671  0022                     set_cursor@a:
   672  0022                     ___awdiv@dividend:	
   673                           ; 1 bytes @ 0x2
   674                           
   675  0022                     ___awmod@dividend:	
   676                           ; 2 bytes @ 0x2
   677                           
   678  0022                     ___lwdiv@dividend:	
   679                           ; 2 bytes @ 0x2
   680                           
   681                           
   682                           ; 2 bytes @ 0x2
   683  0022                     	ds	2
   684  0024                     ??_setup:
   685  0024                     ___awdiv@counter:	
   686                           ; 1 bytes @ 0x4
   687                           
   688  0024                     ___awmod@counter:	
   689                           ; 1 bytes @ 0x4
   690                           
   691  0024                     ___lwdiv@counter:	
   692                           ; 1 bytes @ 0x4
   693                           
   694                           
   695                           ; 1 bytes @ 0x4
   696  0024                     	ds	1
   697  0025                     ___awdiv@sign:
   698  0025                     ___awmod@sign:	
   699                           ; 1 bytes @ 0x5
   700                           
   701  0025                     ___lwdiv@quotient:	
   702                           ; 1 bytes @ 0x5
   703                           
   704                           
   705                           ; 2 bytes @ 0x5
   706  0025                     	ds	1
   707  0026                     ___awdiv@quotient:
   708                           
   709                           ; 2 bytes @ 0x6
   710  0026                     	ds	1
   711  0027                     ?___lwmod:
   712  0027                     ___lwmod@divisor:	
   713                           ; 2 bytes @ 0x7
   714                           
   715                           
   716                           ; 2 bytes @ 0x7
   717  0027                     	ds	1
   718  0028                     ??_divisor:
   719                           
   720                           ; 1 bytes @ 0x8
   721  0028                     	ds	1
   722  0029                     ___lwmod@dividend:
   723                           
   724                           ; 2 bytes @ 0x9
   725  0029                     	ds	1
   726  002A                     divisor@a:
   727                           
   728                           ; 1 bytes @ 0xA
   729  002A                     	ds	1
   730  002B                     ___lwmod@counter:
   731  002B                     divisor@b:	
   732                           ; 1 bytes @ 0xB
   733                           
   734                           
   735                           ; 2 bytes @ 0xB
   736  002B                     	ds	1
   737  002C                     ?_sprintf:
   738  002C                     sprintf@f:	
   739                           ; 2 bytes @ 0xC
   740                           
   741                           
   742                           ; 1 bytes @ 0xC
   743  002C                     	ds	1
   744  002D                     divisor@i:
   745                           
   746                           ; 2 bytes @ 0xD
   747  002D                     	ds	6
   748  0033                     ??_sprintf:
   749                           
   750                           ; 1 bytes @ 0x13
   751  0033                     	ds	3
   752  0036                     sprintf@ap:
   753                           
   754                           ; 1 bytes @ 0x16
   755  0036                     	ds	1
   756  0037                     sprintf@flag:
   757                           
   758                           ; 1 bytes @ 0x17
   759  0037                     	ds	1
   760  0038                     sprintf@prec:
   761                           
   762                           ; 1 bytes @ 0x18
   763  0038                     	ds	1
   764  0039                     sprintf@val:
   765                           
   766                           ; 2 bytes @ 0x19
   767  0039                     	ds	2
   768  003B                     sprintf@sp:
   769                           
   770                           ; 1 bytes @ 0x1B
   771  003B                     	ds	1
   772  003C                     sprintf@c:
   773                           
   774                           ; 1 bytes @ 0x1C
   775  003C                     	ds	1
   776  003D                     ??_conversion_char:
   777  003D                     ??_dato_recibido:	
   778                           ; 1 bytes @ 0x1D
   779                           
   780                           
   781                           ; 1 bytes @ 0x1D
   782  003D                     	ds	7
   783  0044                     ??_main:
   784                           
   785                           ; 1 bytes @ 0x24
   786  0044                     	ds	1
   787                           
   788                           	psect	maintext
   789  010A                     __pmaintext:	
   790 ;;
   791 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   792 ;;
   793 ;; *************** function _main *****************
   794 ;; Defined at:
   795 ;;		line 84 in file "LAB2.c"
   796 ;; Parameters:    Size  Location     Type
   797 ;;		None
   798 ;; Auto vars:     Size  Location     Type
   799 ;;		None
   800 ;; Return value:  Size  Location     Type
   801 ;;                  1    wreg      void 
   802 ;; Registers used:
   803 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   804 ;; Tracked objects:
   805 ;;		On entry : B00/0
   806 ;;		On exit  : 0/0
   807 ;;		Unchanged: 0/0
   808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   809 ;;      Params:         0       0       0       0       0
   810 ;;      Locals:         0       0       0       0       0
   811 ;;      Temps:          0       1       0       0       0
   812 ;;      Totals:         0       1       0       0       0
   813 ;;Total ram usage:        1 bytes
   814 ;; Hardware stack levels required when called: 6
   815 ;; This function calls:
   816 ;;		_Escribir_stringLCD
   817 ;;		_conversion
   818 ;;		_conversion_char
   819 ;;		_dato_recibido
   820 ;;		_set_cursor
   821 ;;		_setup
   822 ;; This function is called by:
   823 ;;		Startup code after reset
   824 ;; This function uses a non-reentrant model
   825 ;;
   826                           
   827                           
   828                           ;psect for function _main
   829  010A                     _main:
   830  010A                     l1954:	
   831                           ;incstack = 0
   832                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   833                           
   834                           
   835                           ;LAB2.c: 85:     setup();
   836  010A  120A  118A  2355  120A  118A  	fcall	_setup
   837  010F                     l1956:
   838                           
   839                           ;LAB2.c: 86:     ADCON0bits.GO = 1;
   840  010F  1283               	bcf	3,5	;RP0=0, select bank0
   841  0110  1303               	bcf	3,6	;RP1=0, select bank0
   842  0111  149F               	bsf	31,1	;volatile
   843  0112                     l102:	
   844                           ;LAB2.c: 87:     while(1){
   845                           
   846                           
   847                           ;LAB2.c: 89:         conversion();
   848  0112  120A  118A  2489  120A  118A  	fcall	_conversion
   849                           
   850                           ;LAB2.c: 92:         set_cursor(1,1);
   851  0117  1283               	bcf	3,5	;RP0=0, select bank0
   852  0118  1303               	bcf	3,6	;RP1=0, select bank0
   853  0119  01A1               	clrf	set_cursor@b
   854  011A  0AA1               	incf	set_cursor@b,f
   855  011B  3001               	movlw	1
   856  011C  120A  118A  24DD  120A  118A  	fcall	_set_cursor
   857  0121                     l1958:
   858                           
   859                           ;LAB2.c: 93:         Escribir_stringLCD("S1:    S2:   S3:");
   860  0121  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   861  0122  1283               	bcf	3,5	;RP0=0, select bank0
   862  0123  1303               	bcf	3,6	;RP1=0, select bank0
   863  0124  00A1               	movwf	Escribir_stringLCD@d
   864  0125  3080               	movlw	128
   865  0126  00A2               	movwf	Escribir_stringLCD@d+1
   866  0127  120A  118A  24B5  120A  118A  	fcall	_Escribir_stringLCD
   867  012C                     l1960:
   868                           
   869                           ;LAB2.c: 95:         conversion_char();
   870  012C  120A  118A  2248  120A  118A  	fcall	_conversion_char
   871                           
   872                           ;LAB2.c: 97:         set_cursor(2,1);
   873  0131  1283               	bcf	3,5	;RP0=0, select bank0
   874  0132  1303               	bcf	3,6	;RP1=0, select bank0
   875  0133  01A1               	clrf	set_cursor@b
   876  0134  0AA1               	incf	set_cursor@b,f
   877  0135  3002               	movlw	2
   878  0136  120A  118A  24DD  120A  118A  	fcall	_set_cursor
   879  013B                     l1962:
   880                           
   881                           ;LAB2.c: 98:         Escribir_stringLCD(buffer1);
   882  013B  305D               	movlw	(low (_buffer1| 0))& (0+255)
   883  013C  1283               	bcf	3,5	;RP0=0, select bank0
   884  013D  1303               	bcf	3,6	;RP1=0, select bank0
   885  013E  00A1               	movwf	Escribir_stringLCD@d
   886  013F  3000               	movlw	0
   887  0140  00A2               	movwf	Escribir_stringLCD@d+1
   888  0141  120A  118A  24B5  120A  118A  	fcall	_Escribir_stringLCD
   889  0146                     l1964:
   890                           
   891                           ;LAB2.c: 99:         set_cursor(2,7);
   892  0146  3007               	movlw	7
   893  0147  1283               	bcf	3,5	;RP0=0, select bank0
   894  0148  1303               	bcf	3,6	;RP1=0, select bank0
   895  0149  00C4               	movwf	??_main
   896  014A  0844               	movf	??_main,w
   897  014B  00A1               	movwf	set_cursor@b
   898  014C  3002               	movlw	2
   899  014D  120A  118A  24DD  120A  118A  	fcall	_set_cursor
   900                           
   901                           ;LAB2.c: 100:         Escribir_stringLCD(buffer2);
   902  0152  3053               	movlw	(low (_buffer2| 0))& (0+255)
   903  0153  1283               	bcf	3,5	;RP0=0, select bank0
   904  0154  1303               	bcf	3,6	;RP1=0, select bank0
   905  0155  00A1               	movwf	Escribir_stringLCD@d
   906  0156  3000               	movlw	0
   907  0157  00A2               	movwf	Escribir_stringLCD@d+1
   908  0158  120A  118A  24B5  120A  118A  	fcall	_Escribir_stringLCD
   909                           
   910                           ;LAB2.c: 103:         dato_recibido();
   911  015D  120A  118A  2533  120A  118A  	fcall	_dato_recibido
   912  0162                     l1966:
   913                           
   914                           ;LAB2.c: 105:         set_cursor(2,14);
   915  0162  300E               	movlw	14
   916  0163  1283               	bcf	3,5	;RP0=0, select bank0
   917  0164  1303               	bcf	3,6	;RP1=0, select bank0
   918  0165  00C4               	movwf	??_main
   919  0166  0844               	movf	??_main,w
   920  0167  00A1               	movwf	set_cursor@b
   921  0168  3002               	movlw	2
   922  0169  120A  118A  24DD  120A  118A  	fcall	_set_cursor
   923  016E                     l1968:
   924                           
   925                           ;LAB2.c: 106:         Escribir_stringLCD(buffer3);
   926  016E  3049               	movlw	(low (_buffer3| 0))& (0+255)
   927  016F  1283               	bcf	3,5	;RP0=0, select bank0
   928  0170  1303               	bcf	3,6	;RP1=0, select bank0
   929  0171  00A1               	movwf	Escribir_stringLCD@d
   930  0172  3000               	movlw	0
   931  0173  00A2               	movwf	Escribir_stringLCD@d+1
   932  0174  120A  118A  24B5  120A  118A  	fcall	_Escribir_stringLCD
   933  0179  2912               	goto	l102
   934  017A  120A  118A  280C   	ljmp	start
   935  017D                     __end_of_main:
   936                           
   937                           	psect	text1
   938  0355                     __ptext1:	
   939 ;; *************** function _setup *****************
   940 ;; Defined at:
   941 ;;		line 111 in file "LAB2.c"
   942 ;; Parameters:    Size  Location     Type
   943 ;;		None
   944 ;; Auto vars:     Size  Location     Type
   945 ;;		None
   946 ;; Return value:  Size  Location     Type
   947 ;;                  1    wreg      void 
   948 ;; Registers used:
   949 ;;		wreg, status,2, status,0, pclath, cstack
   950 ;; Tracked objects:
   951 ;;		On entry : 0/0
   952 ;;		On exit  : 0/0
   953 ;;		Unchanged: 0/0
   954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   955 ;;      Params:         0       0       0       0       0
   956 ;;      Locals:         0       0       0       0       0
   957 ;;      Temps:          0       1       0       0       0
   958 ;;      Totals:         0       1       0       0       0
   959 ;;Total ram usage:        1 bytes
   960 ;; Hardware stack levels used: 1
   961 ;; Hardware stack levels required when called: 5
   962 ;; This function calls:
   963 ;;		_Iniciar_LCD
   964 ;; This function is called by:
   965 ;;		_main
   966 ;; This function uses a non-reentrant model
   967 ;;
   968                           
   969                           
   970                           ;psect for function _setup
   971  0355                     _setup:
   972  0355                     l1878:	
   973                           ;incstack = 0
   974                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   975                           
   976                           
   977                           ;LAB2.c: 114:     ANSEL = 0b0011;
   978  0355  3003               	movlw	3
   979  0356  1683               	bsf	3,5	;RP0=1, select bank3
   980  0357  1703               	bsf	3,6	;RP1=1, select bank3
   981  0358  0088               	movwf	8	;volatile
   982  0359                     l1880:
   983                           
   984                           ;LAB2.c: 115:     ANSELH = 0;
   985  0359  0189               	clrf	9	;volatile
   986  035A                     l1882:
   987                           
   988                           ;LAB2.c: 117:     TRISA = 0b0011;
   989  035A  3003               	movlw	3
   990  035B  1683               	bsf	3,5	;RP0=1, select bank1
   991  035C  1303               	bcf	3,6	;RP1=0, select bank1
   992  035D  0085               	movwf	5	;volatile
   993                           
   994                           ;LAB2.c: 118:     TRISB = 0;
   995  035E  0186               	clrf	6	;volatile
   996                           
   997                           ;LAB2.c: 119:     TRISE = 0;
   998  035F  0189               	clrf	9	;volatile
   999                           
  1000                           ;LAB2.c: 121:     PORTA = 0;
  1001  0360  1283               	bcf	3,5	;RP0=0, select bank0
  1002  0361  1303               	bcf	3,6	;RP1=0, select bank0
  1003  0362  0185               	clrf	5	;volatile
  1004                           
  1005                           ;LAB2.c: 122:     PORTE = 0;
  1006  0363  0189               	clrf	9	;volatile
  1007                           
  1008                           ;LAB2.c: 123:     PORTB = 0;
  1009  0364  0186               	clrf	6	;volatile
  1010  0365                     l1884:
  1011                           
  1012                           ;LAB2.c: 126:     OSCCONbits.IRCF = 0b0110;
  1013  0365  1683               	bsf	3,5	;RP0=1, select bank1
  1014  0366  1303               	bcf	3,6	;RP1=0, select bank1
  1015  0367  080F               	movf	15,w	;volatile
  1016  0368  398F               	andlw	-113
  1017  0369  3860               	iorlw	96
  1018  036A  008F               	movwf	15	;volatile
  1019  036B                     l1886:
  1020                           
  1021                           ;LAB2.c: 127:     OSCCONbits.SCS = 1;
  1022  036B  140F               	bsf	15,0	;volatile
  1023  036C                     l1888:
  1024                           
  1025                           ;LAB2.c: 130:     ADCON1bits.ADFM = 0;
  1026  036C  139F               	bcf	31,7	;volatile
  1027  036D                     l1890:
  1028                           
  1029                           ;LAB2.c: 131:     ADCON1bits.VCFG0 = 0;
  1030  036D  121F               	bcf	31,4	;volatile
  1031  036E                     l1892:
  1032                           
  1033                           ;LAB2.c: 132:     ADCON1bits.VCFG1 = 0;
  1034  036E  129F               	bcf	31,5	;volatile
  1035  036F                     l1894:
  1036                           
  1037                           ;LAB2.c: 134:     ADCON0bits.ADCS = 0b01;
  1038  036F  1283               	bcf	3,5	;RP0=0, select bank0
  1039  0370  1303               	bcf	3,6	;RP1=0, select bank0
  1040  0371  081F               	movf	31,w	;volatile
  1041  0372  393F               	andlw	-193
  1042  0373  3840               	iorlw	64
  1043  0374  009F               	movwf	31	;volatile
  1044  0375                     l1896:
  1045                           
  1046                           ;LAB2.c: 135:     ADCON0bits.CHS = 0;
  1047  0375  30C3               	movlw	-61
  1048  0376  059F               	andwf	31,f	;volatile
  1049  0377                     l1898:
  1050                           
  1051                           ;LAB2.c: 136:     ADCON0bits.ADON = 1;
  1052  0377  141F               	bsf	31,0	;volatile
  1053  0378                     l1900:
  1054                           
  1055                           ;LAB2.c: 137:     _delay((unsigned long)((50)*(4000000/4000000.0)));
  1056  0378  300F               	movlw	15
  1057  0379  1283               	bcf	3,5	;RP0=0, select bank0
  1058  037A  1303               	bcf	3,6	;RP1=0, select bank0
  1059  037B  00A4               	movwf	??_setup
  1060  037C                     u1427:
  1061  037C  0BA4               	decfsz	??_setup,f
  1062  037D  2B7C               	goto	u1427
  1063  037E  2B7F               	nop2
  1064  037F                     l1902:
  1065                           
  1066                           ;LAB2.c: 140:     PIR1bits.ADIF = 0;
  1067  037F  1283               	bcf	3,5	;RP0=0, select bank0
  1068  0380  1303               	bcf	3,6	;RP1=0, select bank0
  1069  0381  130C               	bcf	12,6	;volatile
  1070  0382                     l1904:
  1071                           
  1072                           ;LAB2.c: 141:     PIE1bits.ADIE = 1;
  1073  0382  1683               	bsf	3,5	;RP0=1, select bank1
  1074  0383  1303               	bcf	3,6	;RP1=0, select bank1
  1075  0384  170C               	bsf	12,6	;volatile
  1076  0385                     l1906:
  1077                           
  1078                           ;LAB2.c: 142:     PIR1bits.RCIF = 0;
  1079  0385  1283               	bcf	3,5	;RP0=0, select bank0
  1080  0386  1303               	bcf	3,6	;RP1=0, select bank0
  1081  0387  128C               	bcf	12,5	;volatile
  1082  0388                     l1908:
  1083                           
  1084                           ;LAB2.c: 143:     PIE1bits.RCIE = 1;
  1085  0388  1683               	bsf	3,5	;RP0=1, select bank1
  1086  0389  1303               	bcf	3,6	;RP1=0, select bank1
  1087  038A  168C               	bsf	12,5	;volatile
  1088  038B                     l1910:
  1089                           
  1090                           ;LAB2.c: 144:     INTCONbits.PEIE = 1;
  1091  038B  170B               	bsf	11,6	;volatile
  1092  038C                     l1912:
  1093                           
  1094                           ;LAB2.c: 145:     INTCONbits.GIE = 1;
  1095  038C  178B               	bsf	11,7	;volatile
  1096  038D                     l1914:
  1097                           
  1098                           ;LAB2.c: 148:     TXSTAbits.SYNC = 0;
  1099  038D  1218               	bcf	24,4	;volatile
  1100  038E                     l1916:
  1101                           
  1102                           ;LAB2.c: 149:     TXSTAbits.BRGH = 1;
  1103  038E  1518               	bsf	24,2	;volatile
  1104  038F                     l1918:
  1105                           
  1106                           ;LAB2.c: 151:     BAUDCTLbits.BRG16 = 0;
  1107  038F  1683               	bsf	3,5	;RP0=1, select bank3
  1108  0390  1703               	bsf	3,6	;RP1=1, select bank3
  1109  0391  1187               	bcf	7,3	;volatile
  1110  0392                     l1920:
  1111                           
  1112                           ;LAB2.c: 153:     SPBRG = 23;
  1113  0392  3017               	movlw	23
  1114  0393  1683               	bsf	3,5	;RP0=1, select bank1
  1115  0394  1303               	bcf	3,6	;RP1=0, select bank1
  1116  0395  0099               	movwf	25	;volatile
  1117  0396                     l1922:
  1118                           
  1119                           ;LAB2.c: 154:     SPBRGH = 0;
  1120  0396  019A               	clrf	26	;volatile
  1121  0397                     l1924:
  1122                           
  1123                           ;LAB2.c: 156:     RCSTAbits.SPEN = 1;
  1124  0397  1283               	bcf	3,5	;RP0=0, select bank0
  1125  0398  1303               	bcf	3,6	;RP1=0, select bank0
  1126  0399  1798               	bsf	24,7	;volatile
  1127  039A                     l1926:
  1128                           
  1129                           ;LAB2.c: 157:     RCSTAbits.RX9 = 0;
  1130  039A  1318               	bcf	24,6	;volatile
  1131  039B                     l1928:
  1132                           
  1133                           ;LAB2.c: 158:     RCSTAbits.CREN = 1;
  1134  039B  1618               	bsf	24,4	;volatile
  1135  039C                     l1930:
  1136                           
  1137                           ;LAB2.c: 160:     TXSTAbits.TXEN = 1;
  1138  039C  1683               	bsf	3,5	;RP0=1, select bank1
  1139  039D  1303               	bcf	3,6	;RP1=0, select bank1
  1140  039E  1698               	bsf	24,5	;volatile
  1141  039F                     l1932:
  1142                           
  1143                           ;LAB2.c: 163:     Iniciar_LCD();
  1144  039F  120A  118A  21E6  120A  118A  	fcall	_Iniciar_LCD
  1145  03A4                     l108:
  1146  03A4  0008               	return
  1147  03A5                     __end_of_setup:
  1148                           
  1149                           	psect	text2
  1150  01E6                     __ptext2:	
  1151 ;; *************** function _Iniciar_LCD *****************
  1152 ;; Defined at:
  1153 ;;		line 32 in file "LCD.c"
  1154 ;; Parameters:    Size  Location     Type
  1155 ;;		None
  1156 ;; Auto vars:     Size  Location     Type
  1157 ;;		None
  1158 ;; Return value:  Size  Location     Type
  1159 ;;                  1    wreg      void 
  1160 ;; Registers used:
  1161 ;;		wreg, status,2, status,0, pclath, cstack
  1162 ;; Tracked objects:
  1163 ;;		On entry : 0/0
  1164 ;;		On exit  : 0/0
  1165 ;;		Unchanged: 0/0
  1166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1167 ;;      Params:         0       0       0       0       0
  1168 ;;      Locals:         0       0       0       0       0
  1169 ;;      Temps:          0       3       0       0       0
  1170 ;;      Totals:         0       3       0       0       0
  1171 ;;Total ram usage:        3 bytes
  1172 ;; Hardware stack levels used: 1
  1173 ;; Hardware stack levels required when called: 4
  1174 ;; This function calls:
  1175 ;;		_Escribir_datosLCD
  1176 ;; This function is called by:
  1177 ;;		_setup
  1178 ;; This function uses a non-reentrant model
  1179 ;;
  1180                           
  1181                           
  1182                           ;psect for function _Iniciar_LCD
  1183  01E6                     _Iniciar_LCD:
  1184  01E6                     l1766:	
  1185                           ;incstack = 0
  1186                           ; Regs used in _Iniciar_LCD: [wreg+status,2+status,0+pclath+cstack]
  1187                           
  1188                           
  1189                           ;LCD.c: 33:     RC1 = 0;
  1190  01E6  1283               	bcf	3,5	;RP0=0, select bank0
  1191  01E7  1303               	bcf	3,6	;RP1=0, select bank0
  1192  01E8  1087               	bcf	7,1	;volatile
  1193                           
  1194                           ;LCD.c: 34:     RC0 = 0;
  1195  01E9  1007               	bcf	7,0	;volatile
  1196  01EA                     l1768:
  1197                           
  1198                           ;LCD.c: 35:     PORTD = 0;
  1199  01EA  0188               	clrf	8	;volatile
  1200  01EB                     l1770:
  1201                           
  1202                           ;LCD.c: 36:     TRISC1 = 0;
  1203  01EB  1683               	bsf	3,5	;RP0=1, select bank1
  1204  01EC  1303               	bcf	3,6	;RP1=0, select bank1
  1205  01ED  1087               	bcf	7,1	;volatile
  1206  01EE                     l1772:
  1207                           
  1208                           ;LCD.c: 37:     TRISC0 = 0;
  1209  01EE  1007               	bcf	7,0	;volatile
  1210                           
  1211                           ;LCD.c: 38:     TRISD = 0;
  1212  01EF  0188               	clrf	8	;volatile
  1213  01F0                     l1774:
  1214                           
  1215                           ;LCD.c: 40:     _delay((unsigned long)((16)*(8000000/4000.0)));
  1216  01F0  302A               	movlw	42
  1217  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  1218  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  1219  01F3  00A2               	movwf	??_Iniciar_LCD+1
  1220  01F4  308D               	movlw	141
  1221  01F5  00A1               	movwf	??_Iniciar_LCD
  1222  01F6                     u1437:
  1223  01F6  0BA1               	decfsz	??_Iniciar_LCD,f
  1224  01F7  29F6               	goto	u1437
  1225  01F8  0BA2               	decfsz	??_Iniciar_LCD+1,f
  1226  01F9  29F6               	goto	u1437
  1227  01FA                     l1776:
  1228                           
  1229                           ;LCD.c: 41:     Escribir_datosLCD(0b00110000);
  1230  01FA  3030               	movlw	48
  1231  01FB  120A  118A  2553  120A  118A  	fcall	_Escribir_datosLCD
  1232  0200                     l1778:
  1233                           
  1234                           ;LCD.c: 42:     _delay((unsigned long)((5)*(8000000/4000.0)));
  1235  0200  300D               	movlw	13
  1236  0201  1283               	bcf	3,5	;RP0=0, select bank0
  1237  0202  1303               	bcf	3,6	;RP1=0, select bank0
  1238  0203  00A2               	movwf	??_Iniciar_LCD+1
  1239  0204  30FB               	movlw	251
  1240  0205  00A1               	movwf	??_Iniciar_LCD
  1241  0206                     u1447:
  1242  0206  0BA1               	decfsz	??_Iniciar_LCD,f
  1243  0207  2A06               	goto	u1447
  1244  0208  0BA2               	decfsz	??_Iniciar_LCD+1,f
  1245  0209  2A06               	goto	u1447
  1246  020A                     l1780:
  1247                           
  1248                           ;LCD.c: 43:     Escribir_datosLCD(0b00110000);
  1249  020A  3030               	movlw	48
  1250  020B  120A  118A  2553  120A  118A  	fcall	_Escribir_datosLCD
  1251  0210                     l1782:
  1252                           
  1253                           ;LCD.c: 44:     _delay((unsigned long)((200)*(8000000/4000000.0)));
  1254  0210  3084               	movlw	132
  1255  0211  1283               	bcf	3,5	;RP0=0, select bank0
  1256  0212  1303               	bcf	3,6	;RP1=0, select bank0
  1257  0213  00A1               	movwf	??_Iniciar_LCD
  1258  0214                     u1457:
  1259  0214  0BA1               	decfsz	??_Iniciar_LCD,f
  1260  0215  2A14               	goto	u1457
  1261  0216  0000               	nop
  1262  0217                     l1784:
  1263                           
  1264                           ;LCD.c: 45:     Escribir_datosLCD(0b00110000);
  1265  0217  3030               	movlw	48
  1266  0218  120A  118A  2553  120A  118A  	fcall	_Escribir_datosLCD
  1267  021D                     l1786:
  1268                           
  1269                           ;LCD.c: 48:     _delay((unsigned long)((100)*(8000000/4000.0)));
  1270  021D  3002               	movlw	2
  1271  021E  1283               	bcf	3,5	;RP0=0, select bank0
  1272  021F  1303               	bcf	3,6	;RP1=0, select bank0
  1273  0220  00A3               	movwf	??_Iniciar_LCD+2
  1274  0221  3004               	movlw	4
  1275  0222  00A2               	movwf	??_Iniciar_LCD+1
  1276  0223  30B9               	movlw	185
  1277  0224  00A1               	movwf	??_Iniciar_LCD
  1278  0225                     u1467:
  1279  0225  0BA1               	decfsz	??_Iniciar_LCD,f
  1280  0226  2A25               	goto	u1467
  1281  0227  0BA2               	decfsz	??_Iniciar_LCD+1,f
  1282  0228  2A25               	goto	u1467
  1283  0229  0BA3               	decfsz	??_Iniciar_LCD+2,f
  1284  022A  2A25               	goto	u1467
  1285  022B  2A2C               	nop2
  1286  022C                     l1788:
  1287                           
  1288                           ;LCD.c: 49:     Escribir_datosLCD(0b00111000);
  1289  022C  3038               	movlw	56
  1290  022D  120A  118A  2553  120A  118A  	fcall	_Escribir_datosLCD
  1291  0232                     l1790:
  1292                           
  1293                           ;LCD.c: 50:     _delay((unsigned long)((100)*(8000000/4000.0)));
  1294  0232  3002               	movlw	2
  1295  0233  1283               	bcf	3,5	;RP0=0, select bank0
  1296  0234  1303               	bcf	3,6	;RP1=0, select bank0
  1297  0235  00A3               	movwf	??_Iniciar_LCD+2
  1298  0236  3004               	movlw	4
  1299  0237  00A2               	movwf	??_Iniciar_LCD+1
  1300  0238  30B9               	movlw	185
  1301  0239  00A1               	movwf	??_Iniciar_LCD
  1302  023A                     u1477:
  1303  023A  0BA1               	decfsz	??_Iniciar_LCD,f
  1304  023B  2A3A               	goto	u1477
  1305  023C  0BA2               	decfsz	??_Iniciar_LCD+1,f
  1306  023D  2A3A               	goto	u1477
  1307  023E  0BA3               	decfsz	??_Iniciar_LCD+2,f
  1308  023F  2A3A               	goto	u1477
  1309  0240  2A41               	nop2
  1310  0241                     l1792:
  1311                           
  1312                           ;LCD.c: 51:     Escribir_datosLCD(0b00001100);
  1313  0241  300C               	movlw	12
  1314  0242  120A  118A  2553  120A  118A  	fcall	_Escribir_datosLCD
  1315  0247                     l145:
  1316  0247  0008               	return
  1317  0248                     __end_of_Iniciar_LCD:
  1318                           
  1319                           	psect	text3
  1320  04DD                     __ptext3:	
  1321 ;; *************** function _set_cursor *****************
  1322 ;; Defined at:
  1323 ;;		line 66 in file "LCD.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;  a               1    wreg     unsigned char 
  1326 ;;  b               1    1[BANK0 ] unsigned char 
  1327 ;; Auto vars:     Size  Location     Type
  1328 ;;  a               1    2[BANK0 ] unsigned char 
  1329 ;; Return value:  Size  Location     Type
  1330 ;;                  1    wreg      void 
  1331 ;; Registers used:
  1332 ;;		wreg, status,2, status,0, pclath, cstack
  1333 ;; Tracked objects:
  1334 ;;		On entry : 0/0
  1335 ;;		On exit  : 0/0
  1336 ;;		Unchanged: 0/0
  1337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1338 ;;      Params:         0       1       0       0       0
  1339 ;;      Locals:         0       1       0       0       0
  1340 ;;      Temps:          0       0       0       0       0
  1341 ;;      Totals:         0       2       0       0       0
  1342 ;;Total ram usage:        2 bytes
  1343 ;; Hardware stack levels used: 1
  1344 ;; Hardware stack levels required when called: 4
  1345 ;; This function calls:
  1346 ;;		_Escribir_comandoLCD
  1347 ;; This function is called by:
  1348 ;;		_main
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351                           
  1352                           
  1353                           ;psect for function _set_cursor
  1354  04DD                     _set_cursor:
  1355                           
  1356                           ;incstack = 0
  1357                           ; Regs used in _set_cursor: [wreg+status,2+status,0+pclath+cstack]
  1358                           ;set_cursor@a stored from wreg
  1359  04DD  1283               	bcf	3,5	;RP0=0, select bank0
  1360  04DE  1303               	bcf	3,6	;RP1=0, select bank0
  1361  04DF  00A2               	movwf	set_cursor@a
  1362  04E0                     l1934:
  1363                           
  1364                           ;LCD.c: 67:     if(a == 1){
  1365  04E0  0322               	decf	set_cursor@a,w
  1366  04E1  1D03               	btfss	3,2
  1367  04E2  2CE4               	goto	u1391
  1368  04E3  2CE5               	goto	u1390
  1369  04E4                     u1391:
  1370  04E4  2CEC               	goto	l1938
  1371  04E5                     u1390:
  1372  04E5                     l1936:
  1373                           
  1374                           ;LCD.c: 68:         Escribir_comandoLCD(0x80 + (b-1));
  1375  04E5  0821               	movf	set_cursor@b,w
  1376  04E6  3E7F               	addlw	127
  1377  04E7  120A  118A  2547  120A  118A  	fcall	_Escribir_comandoLCD
  1378  04EC                     l1938:
  1379                           
  1380                           ;LCD.c: 70:     if(a == 2){
  1381  04EC  3002               	movlw	2
  1382  04ED  1283               	bcf	3,5	;RP0=0, select bank0
  1383  04EE  1303               	bcf	3,6	;RP1=0, select bank0
  1384  04EF  0622               	xorwf	set_cursor@a,w
  1385  04F0  1D03               	btfss	3,2
  1386  04F1  2CF3               	goto	u1401
  1387  04F2  2CF4               	goto	u1400
  1388  04F3                     u1401:
  1389  04F3  2CFB               	goto	l159
  1390  04F4                     u1400:
  1391  04F4                     l1940:
  1392                           
  1393                           ;LCD.c: 71:         Escribir_comandoLCD(0xC0 + (b-1));
  1394  04F4  0821               	movf	set_cursor@b,w
  1395  04F5  3EBF               	addlw	191
  1396  04F6  120A  118A  2547  120A  118A  	fcall	_Escribir_comandoLCD
  1397  04FB                     l159:
  1398  04FB  0008               	return
  1399  04FC                     __end_of_set_cursor:
  1400                           
  1401                           	psect	text4
  1402  0547                     __ptext4:	
  1403 ;; *************** function _Escribir_comandoLCD *****************
  1404 ;; Defined at:
  1405 ;;		line 18 in file "LCD.c"
  1406 ;; Parameters:    Size  Location     Type
  1407 ;;  Comando         1    wreg     unsigned char 
  1408 ;; Auto vars:     Size  Location     Type
  1409 ;;  Comando         1    0[BANK0 ] unsigned char 
  1410 ;; Return value:  Size  Location     Type
  1411 ;;                  1    wreg      void 
  1412 ;; Registers used:
  1413 ;;		wreg, status,2, status,0, pclath, cstack
  1414 ;; Tracked objects:
  1415 ;;		On entry : 0/0
  1416 ;;		On exit  : 0/0
  1417 ;;		Unchanged: 0/0
  1418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1419 ;;      Params:         0       0       0       0       0
  1420 ;;      Locals:         0       1       0       0       0
  1421 ;;      Temps:          0       0       0       0       0
  1422 ;;      Totals:         0       1       0       0       0
  1423 ;;Total ram usage:        1 bytes
  1424 ;; Hardware stack levels used: 1
  1425 ;; Hardware stack levels required when called: 3
  1426 ;; This function calls:
  1427 ;;		_prender_ELCD
  1428 ;; This function is called by:
  1429 ;;		_set_cursor
  1430 ;;		_Limpiar_pantallaLCD
  1431 ;;		_shift_right
  1432 ;;		_shift_left
  1433 ;; This function uses a non-reentrant model
  1434 ;;
  1435                           
  1436                           
  1437                           ;psect for function _Escribir_comandoLCD
  1438  0547                     _Escribir_comandoLCD:
  1439                           
  1440                           ;incstack = 0
  1441                           ; Regs used in _Escribir_comandoLCD: [wreg+status,2+status,0+pclath+cstack]
  1442                           ;Escribir_comandoLCD@Comando stored from wreg
  1443  0547  1283               	bcf	3,5	;RP0=0, select bank0
  1444  0548  1303               	bcf	3,6	;RP1=0, select bank0
  1445  0549  00A0               	movwf	Escribir_comandoLCD@Comando
  1446  054A                     l1872:
  1447                           
  1448                           ;LCD.c: 19:     RC0 = 0;
  1449  054A  1007               	bcf	7,0	;volatile
  1450  054B                     l1874:
  1451                           
  1452                           ;LCD.c: 20:     PORTD = Comando;
  1453  054B  0820               	movf	Escribir_comandoLCD@Comando,w
  1454  054C  0088               	movwf	8	;volatile
  1455  054D                     l1876:
  1456                           
  1457                           ;LCD.c: 22:     prender_ELCD();
  1458  054D  120A  118A  251A  120A  118A  	fcall	_prender_ELCD
  1459  0552                     l139:
  1460  0552  0008               	return
  1461  0553                     __end_of_Escribir_comandoLCD:
  1462                           
  1463                           	psect	text5
  1464  0533                     __ptext5:	
  1465 ;; *************** function _dato_recibido *****************
  1466 ;; Defined at:
  1467 ;;		line 183 in file "LAB2.c"
  1468 ;; Parameters:    Size  Location     Type
  1469 ;;		None
  1470 ;; Auto vars:     Size  Location     Type
  1471 ;;		None
  1472 ;; Return value:  Size  Location     Type
  1473 ;;                  1    wreg      void 
  1474 ;; Registers used:
  1475 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1476 ;; Tracked objects:
  1477 ;;		On entry : 0/0
  1478 ;;		On exit  : 0/0
  1479 ;;		Unchanged: 0/0
  1480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1481 ;;      Params:         0       0       0       0       0
  1482 ;;      Locals:         0       0       0       0       0
  1483 ;;      Temps:          0       3       0       0       0
  1484 ;;      Totals:         0       3       0       0       0
  1485 ;;Total ram usage:        3 bytes
  1486 ;; Hardware stack levels used: 1
  1487 ;; Hardware stack levels required when called: 4
  1488 ;; This function calls:
  1489 ;;		_sprintf
  1490 ;; This function is called by:
  1491 ;;		_main
  1492 ;; This function uses a non-reentrant model
  1493 ;;
  1494                           
  1495                           
  1496                           ;psect for function _dato_recibido
  1497  0533                     _dato_recibido:
  1498  0533                     l1952:	
  1499                           ;incstack = 0
  1500                           ; Regs used in _dato_recibido: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1501                           
  1502                           
  1503                           ;LAB2.c: 184:     sprintf(buffer3, "%d", Cont_U);
  1504  0533  3021               	movlw	(low (((STR_2+5)-__stringbase)| (0+32768)))& (0+255)
  1505  0534  1283               	bcf	3,5	;RP0=0, select bank0
  1506  0535  1303               	bcf	3,6	;RP1=0, select bank0
  1507  0536  00BD               	movwf	??_dato_recibido
  1508  0537  083D               	movf	??_dato_recibido,w
  1509  0538  00AC               	movwf	sprintf@f
  1510  0539  0845               	movf	_Cont_U,w
  1511  053A  00BE               	movwf	??_dato_recibido+1
  1512  053B  01BF               	clrf	??_dato_recibido+2
  1513  053C  083E               	movf	??_dato_recibido+1,w
  1514  053D  00AD               	movwf	?_sprintf+1
  1515  053E  083F               	movf	??_dato_recibido+2,w
  1516  053F  00AE               	movwf	?_sprintf+2
  1517  0540  3049               	movlw	(low (_buffer3| 0))& (0+255)
  1518  0541  120A  118A  2020  120A  118A  	fcall	_sprintf
  1519  0546                     l119:
  1520  0546  0008               	return
  1521  0547                     __end_of_dato_recibido:
  1522                           
  1523                           	psect	text6
  1524  0248                     __ptext6:	
  1525 ;; *************** function _conversion_char *****************
  1526 ;; Defined at:
  1527 ;;		line 167 in file "LAB2.c"
  1528 ;; Parameters:    Size  Location     Type
  1529 ;;		None
  1530 ;; Auto vars:     Size  Location     Type
  1531 ;;		None
  1532 ;; Return value:  Size  Location     Type
  1533 ;;                  1    wreg      void 
  1534 ;; Registers used:
  1535 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1536 ;; Tracked objects:
  1537 ;;		On entry : 0/0
  1538 ;;		On exit  : 0/0
  1539 ;;		Unchanged: 0/0
  1540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1541 ;;      Params:         0       0       0       0       0
  1542 ;;      Locals:         0       0       0       0       0
  1543 ;;      Temps:          0       7       0       0       0
  1544 ;;      Totals:         0       7       0       0       0
  1545 ;;Total ram usage:        7 bytes
  1546 ;; Hardware stack levels used: 1
  1547 ;; Hardware stack levels required when called: 4
  1548 ;; This function calls:
  1549 ;;		_divisor
  1550 ;;		_sprintf
  1551 ;; This function is called by:
  1552 ;;		_main
  1553 ;; This function uses a non-reentrant model
  1554 ;;
  1555                           
  1556                           
  1557                           ;psect for function _conversion_char
  1558  0248                     _conversion_char:
  1559  0248                     l1950:	
  1560                           ;incstack = 0
  1561                           ; Regs used in _conversion_char: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1562                           
  1563                           
  1564                           ;LAB2.c: 168:     divisor(cont1, vol1);
  1565  0248  3068               	movlw	(low (_vol1| 0))& (0+255)
  1566  0249  1283               	bcf	3,5	;RP0=0, select bank0
  1567  024A  1303               	bcf	3,6	;RP1=0, select bank0
  1568  024B  00BD               	movwf	??_conversion_char
  1569  024C  083D               	movf	??_conversion_char,w
  1570  024D  00F5               	movwf	divisor@dig
  1571  024E  0848               	movf	_cont1,w
  1572  024F  120A  118A  22FE  120A  118A  	fcall	_divisor
  1573                           
  1574                           ;LAB2.c: 169:     sprintf(buffer1, "%d.%d%d", vol1[2], vol1[1], vol1[0]);
  1575  0254  301C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1576  0255  1283               	bcf	3,5	;RP0=0, select bank0
  1577  0256  1303               	bcf	3,6	;RP1=0, select bank0
  1578  0257  00BD               	movwf	??_conversion_char
  1579  0258  083D               	movf	??_conversion_char,w
  1580  0259  00AC               	movwf	sprintf@f
  1581  025A  086A               	movf	_vol1+2,w
  1582  025B  00BE               	movwf	??_conversion_char+1
  1583  025C  01BF               	clrf	??_conversion_char+2
  1584  025D  083E               	movf	??_conversion_char+1,w
  1585  025E  00AD               	movwf	?_sprintf+1
  1586  025F  083F               	movf	??_conversion_char+2,w
  1587  0260  00AE               	movwf	?_sprintf+2
  1588  0261  0869               	movf	_vol1+1,w
  1589  0262  00C0               	movwf	??_conversion_char+3
  1590  0263  01C1               	clrf	??_conversion_char+4
  1591  0264  0840               	movf	??_conversion_char+3,w
  1592  0265  00AF               	movwf	?_sprintf+3
  1593  0266  0841               	movf	??_conversion_char+4,w
  1594  0267  00B0               	movwf	?_sprintf+4
  1595  0268  0868               	movf	_vol1,w
  1596  0269  00C2               	movwf	??_conversion_char+5
  1597  026A  01C3               	clrf	??_conversion_char+6
  1598  026B  0842               	movf	??_conversion_char+5,w
  1599  026C  00B1               	movwf	?_sprintf+5
  1600  026D  0843               	movf	??_conversion_char+6,w
  1601  026E  00B2               	movwf	?_sprintf+6
  1602  026F  305D               	movlw	(low (_buffer1| 0))& (0+255)
  1603  0270  120A  118A  2020  120A  118A  	fcall	_sprintf
  1604                           
  1605                           ;LAB2.c: 171:     divisor(cont2, vol2);
  1606  0275  3067               	movlw	(low (_vol2| 0))& (0+255)
  1607  0276  1283               	bcf	3,5	;RP0=0, select bank0
  1608  0277  1303               	bcf	3,6	;RP1=0, select bank0
  1609  0278  00BD               	movwf	??_conversion_char
  1610  0279  083D               	movf	??_conversion_char,w
  1611  027A  00F5               	movwf	divisor@dig
  1612  027B  0847               	movf	_cont2,w
  1613  027C  120A  118A  22FE  120A  118A  	fcall	_divisor
  1614                           
  1615                           ;LAB2.c: 172:     sprintf(buffer2, "%d.%d%d", vol2[2], vol2[1], vol2[0]);
  1616  0281  301C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1617  0282  1283               	bcf	3,5	;RP0=0, select bank0
  1618  0283  1303               	bcf	3,6	;RP1=0, select bank0
  1619  0284  00BD               	movwf	??_conversion_char
  1620  0285  083D               	movf	??_conversion_char,w
  1621  0286  00AC               	movwf	sprintf@f
  1622  0287  0869               	movf	_vol2+2,w
  1623  0288  00BE               	movwf	??_conversion_char+1
  1624  0289  01BF               	clrf	??_conversion_char+2
  1625  028A  083E               	movf	??_conversion_char+1,w
  1626  028B  00AD               	movwf	?_sprintf+1
  1627  028C  083F               	movf	??_conversion_char+2,w
  1628  028D  00AE               	movwf	?_sprintf+2
  1629  028E  0868               	movf	_vol2+1,w
  1630  028F  00C0               	movwf	??_conversion_char+3
  1631  0290  01C1               	clrf	??_conversion_char+4
  1632  0291  0840               	movf	??_conversion_char+3,w
  1633  0292  00AF               	movwf	?_sprintf+3
  1634  0293  0841               	movf	??_conversion_char+4,w
  1635  0294  00B0               	movwf	?_sprintf+4
  1636  0295  0867               	movf	_vol2,w
  1637  0296  00C2               	movwf	??_conversion_char+5
  1638  0297  01C3               	clrf	??_conversion_char+6
  1639  0298  0842               	movf	??_conversion_char+5,w
  1640  0299  00B1               	movwf	?_sprintf+5
  1641  029A  0843               	movf	??_conversion_char+6,w
  1642  029B  00B2               	movwf	?_sprintf+6
  1643  029C  3053               	movlw	(low (_buffer2| 0))& (0+255)
  1644  029D  120A  118A  2020  120A  118A  	fcall	_sprintf
  1645  02A2                     l111:
  1646  02A2  0008               	return
  1647  02A3                     __end_of_conversion_char:
  1648                           
  1649                           	psect	text7
  1650  0020                     __ptext7:	
  1651 ;; *************** function _sprintf *****************
  1652 ;; Defined at:
  1653 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c"
  1654 ;; Parameters:    Size  Location     Type
  1655 ;;  sp              1    wreg     PTR unsigned char 
  1656 ;;		 -> buffer3(10), buffer2(10), buffer1(10), 
  1657 ;;  f               1   12[BANK0 ] PTR const unsigned char 
  1658 ;;		 -> STR_4(3), STR_3(8), STR_2(8), 
  1659 ;; Auto vars:     Size  Location     Type
  1660 ;;  sp              1   27[BANK0 ] PTR unsigned char 
  1661 ;;		 -> buffer3(10), buffer2(10), buffer1(10), 
  1662 ;;  tmpval          4    0        struct .
  1663 ;;  val             2   25[BANK0 ] unsigned int 
  1664 ;;  cp              2    0        PTR const unsigned char 
  1665 ;;  len             2    0        unsigned int 
  1666 ;;  c               1   28[BANK0 ] unsigned char 
  1667 ;;  prec            1   24[BANK0 ] char 
  1668 ;;  flag            1   23[BANK0 ] unsigned char 
  1669 ;;  ap              1   22[BANK0 ] PTR void [1]
  1670 ;;		 -> ?_sprintf(2), 
  1671 ;; Return value:  Size  Location     Type
  1672 ;;                  2   12[BANK0 ] int 
  1673 ;; Registers used:
  1674 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1675 ;; Tracked objects:
  1676 ;;		On entry : 0/0
  1677 ;;		On exit  : 0/0
  1678 ;;		Unchanged: 0/0
  1679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1680 ;;      Params:         0       7       0       0       0
  1681 ;;      Locals:         0       7       0       0       0
  1682 ;;      Temps:          0       3       0       0       0
  1683 ;;      Totals:         0      17       0       0       0
  1684 ;;Total ram usage:       17 bytes
  1685 ;; Hardware stack levels used: 1
  1686 ;; Hardware stack levels required when called: 3
  1687 ;; This function calls:
  1688 ;;		___lwdiv
  1689 ;;		___lwmod
  1690 ;; This function is called by:
  1691 ;;		_conversion_char
  1692 ;;		_dato_recibido
  1693 ;; This function uses a non-reentrant model
  1694 ;;
  1695                           
  1696                           
  1697                           ;psect for function _sprintf
  1698  0020                     _sprintf:
  1699                           
  1700                           ;incstack = 0
  1701                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1702                           ;sprintf@sp stored from wreg
  1703  0020  1283               	bcf	3,5	;RP0=0, select bank0
  1704  0021  1303               	bcf	3,6	;RP1=0, select bank0
  1705  0022  00BB               	movwf	sprintf@sp
  1706  0023                     l1810:
  1707                           
  1708                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  1709  0023  302D               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1710  0024  00B3               	movwf	??_sprintf
  1711  0025  0833               	movf	??_sprintf,w
  1712  0026  00B6               	movwf	sprintf@ap
  1713                           
  1714                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1715  0027  28F3               	goto	l1862
  1716  0028                     l1812:
  1717                           
  1718                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1719  0028  3025               	movlw	37
  1720  0029  063C               	xorwf	sprintf@c,w
  1721  002A  1903               	btfsc	3,2
  1722  002B  282D               	goto	u1321
  1723  002C  282E               	goto	u1320
  1724  002D                     u1321:
  1725  002D  283A               	goto	l1818
  1726  002E                     u1320:
  1727  002E                     l1814:
  1728                           
  1729                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1730  002E  083C               	movf	sprintf@c,w
  1731  002F  00B3               	movwf	??_sprintf
  1732  0030  083B               	movf	sprintf@sp,w
  1733  0031  0084               	movwf	4
  1734  0032  0833               	movf	??_sprintf,w
  1735  0033  1383               	bcf	3,7	;select IRP bank0
  1736  0034  0080               	movwf	0
  1737  0035                     l1816:
  1738  0035  3001               	movlw	1
  1739  0036  00B3               	movwf	??_sprintf
  1740  0037  0833               	movf	??_sprintf,w
  1741  0038  07BB               	addwf	sprintf@sp,f
  1742                           
  1743                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 559:    continue;
  1744  0039  28F3               	goto	l1862
  1745  003A                     l1818:
  1746                           
  1747                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1748  003A  01B7               	clrf	sprintf@flag
  1749  003B                     l1822:	
  1750                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  1751                           
  1752  003B  3001               	movlw	1
  1753  003C  07AC               	addwf	sprintf@f,f
  1754  003D  30FF               	movlw	-1
  1755  003E  072C               	addwf	sprintf@f,w
  1756  003F  0084               	movwf	4
  1757  0040  120A  118A  2431  120A  118A  	fcall	stringdir
  1758  0045  00BC               	movwf	sprintf@c
  1759  0046  00B3               	movwf	??_sprintf
  1760  0047  01B4               	clrf	??_sprintf+1
  1761                           
  1762                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1763                           ; Switch size 1, requested type "simple"
  1764                           ; Number of cases is 1, Range of values is 0 to 0
  1765                           ; switch strategies available:
  1766                           ; Name         Instructions Cycles
  1767                           ; simple_byte            4     3 (average)
  1768                           ; direct_byte           11     8 (fixed)
  1769                           ; jumptable            260     6 (fixed)
  1770                           ;	Chosen strategy is simple_byte
  1771  0048  0834               	movf	??_sprintf+1,w
  1772  0049  3A00               	xorlw	0	; case 0
  1773  004A  1903               	skipnz
  1774  004B  284D               	goto	l1998
  1775  004C  28F3               	goto	l1862
  1776  004D                     l1998:
  1777                           
  1778                           ; Switch size 1, requested type "simple"
  1779                           ; Number of cases is 3, Range of values is 0 to 105
  1780                           ; switch strategies available:
  1781                           ; Name         Instructions Cycles
  1782                           ; simple_byte           10     6 (average)
  1783                           ; jumptable            260     6 (fixed)
  1784                           ;	Chosen strategy is simple_byte
  1785  004D  0833               	movf	??_sprintf,w
  1786  004E  3A00               	xorlw	0	; case 0
  1787  004F  1903               	skipnz
  1788  0050  2905               	goto	l1864
  1789  0051  3A64               	xorlw	100	; case 100
  1790  0052  1903               	skipnz
  1791  0053  2858               	goto	l1824
  1792  0054  3A0D               	xorlw	13	; case 105
  1793  0055  1903               	skipnz
  1794  0056  2858               	goto	l1824
  1795  0057  28F3               	goto	l1862
  1796  0058                     l1824:
  1797                           
  1798                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1799  0058  0836               	movf	sprintf@ap,w
  1800  0059  0084               	movwf	4
  1801  005A  1383               	bcf	3,7	;select IRP bank0
  1802  005B  0800               	movf	0,w
  1803  005C  00B9               	movwf	sprintf@val
  1804  005D  0A84               	incf	4,f
  1805  005E  0800               	movf	0,w
  1806  005F  00BA               	movwf	sprintf@val+1
  1807  0060                     l1826:
  1808  0060  3002               	movlw	2
  1809  0061  00B3               	movwf	??_sprintf
  1810  0062  0833               	movf	??_sprintf,w
  1811  0063  07B6               	addwf	sprintf@ap,f
  1812  0064                     l1828:
  1813                           
  1814                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1815  0064  1FBA               	btfss	sprintf@val+1,7
  1816  0065  2867               	goto	u1331
  1817  0066  2868               	goto	u1330
  1818  0067                     u1331:
  1819  0067  2871               	goto	l1834
  1820  0068                     u1330:
  1821  0068                     l1830:
  1822                           
  1823                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1824  0068  3003               	movlw	3
  1825  0069  00B3               	movwf	??_sprintf
  1826  006A  0833               	movf	??_sprintf,w
  1827  006B  04B7               	iorwf	sprintf@flag,f
  1828  006C                     l1832:
  1829                           
  1830                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1831  006C  09B9               	comf	sprintf@val,f
  1832  006D  09BA               	comf	sprintf@val+1,f
  1833  006E  0AB9               	incf	sprintf@val,f
  1834  006F  1903               	skipnz
  1835  0070  0ABA               	incf	sprintf@val+1,f
  1836  0071                     l1834:
  1837                           
  1838                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1839  0071  01BC               	clrf	sprintf@c
  1840  0072  0ABC               	incf	sprintf@c,f
  1841  0073                     l1840:
  1842                           
  1843                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1844  0073  083C               	movf	sprintf@c,w
  1845  0074  00B3               	movwf	??_sprintf
  1846  0075  0733               	addwf	??_sprintf,w
  1847  0076  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1848  0077  0084               	movwf	4
  1849  0078  120A  118A  2431  120A  118A  	fcall	stringdir
  1850  007D  00B4               	movwf	??_sprintf+1
  1851  007E  120A  118A  2431  120A  118A  	fcall	stringdir
  1852  0083  00B5               	movwf	??_sprintf+2
  1853  0084  0835               	movf	??_sprintf+2,w
  1854  0085  023A               	subwf	sprintf@val+1,w
  1855  0086  1D03               	skipz
  1856  0087  288A               	goto	u1345
  1857  0088  0834               	movf	??_sprintf+1,w
  1858  0089  0239               	subwf	sprintf@val,w
  1859  008A                     u1345:
  1860  008A  1803               	skipnc
  1861  008B  288D               	goto	u1341
  1862  008C  288E               	goto	u1340
  1863  008D                     u1341:
  1864  008D  288F               	goto	l1844
  1865  008E                     u1340:
  1866  008E  2899               	goto	l1846
  1867  008F                     l1844:
  1868  008F  3001               	movlw	1
  1869  0090  00B3               	movwf	??_sprintf
  1870  0091  0833               	movf	??_sprintf,w
  1871  0092  07BC               	addwf	sprintf@c,f
  1872  0093  3005               	movlw	5
  1873  0094  063C               	xorwf	sprintf@c,w
  1874  0095  1D03               	btfss	3,2
  1875  0096  2898               	goto	u1351
  1876  0097  2899               	goto	u1350
  1877  0098                     u1351:
  1878  0098  2873               	goto	l1840
  1879  0099                     u1350:
  1880  0099                     l1846:
  1881                           
  1882                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  1883  0099  0837               	movf	sprintf@flag,w
  1884  009A  3903               	andlw	3
  1885  009B  1903               	btfsc	3,2
  1886  009C  289E               	goto	u1361
  1887  009D  289F               	goto	u1360
  1888  009E                     u1361:
  1889  009E  28AA               	goto	l1852
  1890  009F                     u1360:
  1891  009F                     l1848:
  1892                           
  1893                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1894  009F  302D               	movlw	45
  1895  00A0  00B3               	movwf	??_sprintf
  1896  00A1  083B               	movf	sprintf@sp,w
  1897  00A2  0084               	movwf	4
  1898  00A3  0833               	movf	??_sprintf,w
  1899  00A4  1383               	bcf	3,7	;select IRP bank0
  1900  00A5  0080               	movwf	0
  1901  00A6                     l1850:
  1902  00A6  3001               	movlw	1
  1903  00A7  00B3               	movwf	??_sprintf
  1904  00A8  0833               	movf	??_sprintf,w
  1905  00A9  07BB               	addwf	sprintf@sp,f
  1906  00AA                     l1852:
  1907                           
  1908                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1909  00AA  083C               	movf	sprintf@c,w
  1910  00AB  00B3               	movwf	??_sprintf
  1911  00AC  0833               	movf	??_sprintf,w
  1912  00AD  00B8               	movwf	sprintf@prec
  1913                           
  1914                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1915  00AE  28EA               	goto	l1860
  1916  00AF                     l1854:
  1917                           
  1918                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1919  00AF  300A               	movlw	10
  1920  00B0  00A7               	movwf	___lwmod@divisor
  1921  00B1  3000               	movlw	0
  1922  00B2  00A8               	movwf	___lwmod@divisor+1
  1923  00B3  0838               	movf	sprintf@prec,w
  1924  00B4  00B3               	movwf	??_sprintf
  1925  00B5  0733               	addwf	??_sprintf,w
  1926  00B6  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1927  00B7  0084               	movwf	4
  1928  00B8  120A  118A  2431  120A  118A  	fcall	stringdir
  1929  00BD  00A0               	movwf	___lwdiv@divisor
  1930  00BE  120A  118A  2431  120A  118A  	fcall	stringdir
  1931  00C3  00A1               	movwf	___lwdiv@divisor+1
  1932  00C4  083A               	movf	sprintf@val+1,w
  1933  00C5  00A3               	movwf	___lwdiv@dividend+1
  1934  00C6  0839               	movf	sprintf@val,w
  1935  00C7  00A2               	movwf	___lwdiv@dividend
  1936  00C8  120A  118A  23A5  120A  118A  	fcall	___lwdiv
  1937  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  1938  00CE  1303               	bcf	3,6	;RP1=0, select bank0
  1939  00CF  0821               	movf	?___lwdiv+1,w
  1940  00D0  00AA               	movwf	___lwmod@dividend+1
  1941  00D1  0820               	movf	?___lwdiv,w
  1942  00D2  00A9               	movwf	___lwmod@dividend
  1943  00D3  120A  118A  23EB  120A  118A  	fcall	___lwmod
  1944  00D8  1283               	bcf	3,5	;RP0=0, select bank0
  1945  00D9  1303               	bcf	3,6	;RP1=0, select bank0
  1946  00DA  0827               	movf	?___lwmod,w
  1947  00DB  3E30               	addlw	48
  1948  00DC  00B4               	movwf	??_sprintf+1
  1949  00DD  0834               	movf	??_sprintf+1,w
  1950  00DE  00BC               	movwf	sprintf@c
  1951  00DF                     l1856:
  1952                           
  1953                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1954  00DF  083C               	movf	sprintf@c,w
  1955  00E0  00B3               	movwf	??_sprintf
  1956  00E1  083B               	movf	sprintf@sp,w
  1957  00E2  0084               	movwf	4
  1958  00E3  0833               	movf	??_sprintf,w
  1959  00E4  1383               	bcf	3,7	;select IRP bank0
  1960  00E5  0080               	movwf	0
  1961  00E6                     l1858:
  1962  00E6  3001               	movlw	1
  1963  00E7  00B3               	movwf	??_sprintf
  1964  00E8  0833               	movf	??_sprintf,w
  1965  00E9  07BB               	addwf	sprintf@sp,f
  1966  00EA                     l1860:
  1967                           
  1968                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1969  00EA  30FF               	movlw	255
  1970  00EB  00B3               	movwf	??_sprintf
  1971  00EC  0833               	movf	??_sprintf,w
  1972  00ED  07B8               	addwf	sprintf@prec,f
  1973  00EE  0A38               	incf	sprintf@prec,w
  1974  00EF  1D03               	btfss	3,2
  1975  00F0  28F2               	goto	u1371
  1976  00F1  28F3               	goto	u1370
  1977  00F2                     u1371:
  1978  00F2  28AF               	goto	l1854
  1979  00F3                     u1370:
  1980  00F3                     l1862:
  1981                           
  1982                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1983  00F3  3001               	movlw	1
  1984  00F4  07AC               	addwf	sprintf@f,f
  1985  00F5  30FF               	movlw	-1
  1986  00F6  072C               	addwf	sprintf@f,w
  1987  00F7  0084               	movwf	4
  1988  00F8  120A  118A  2431  120A  118A  	fcall	stringdir
  1989  00FD  00B3               	movwf	??_sprintf
  1990  00FE  0833               	movf	??_sprintf,w
  1991  00FF  00BC               	movwf	sprintf@c
  1992  0100  083C               	movf	sprintf@c,w
  1993  0101  1D03               	btfss	3,2
  1994  0102  2904               	goto	u1381
  1995  0103  2905               	goto	u1380
  1996  0104                     u1381:
  1997  0104  2828               	goto	l1812
  1998  0105                     u1380:
  1999  0105                     l1864:
  2000                           
  2001                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  2002  0105  083B               	movf	sprintf@sp,w
  2003  0106  0084               	movwf	4
  2004  0107  1383               	bcf	3,7	;select IRP bank0
  2005  0108  0180               	clrf	0
  2006  0109                     l304:
  2007  0109  0008               	return
  2008  010A                     __end_of_sprintf:
  2009                           
  2010                           	psect	text8
  2011  03EB                     __ptext8:	
  2012 ;; *************** function ___lwmod *****************
  2013 ;; Defined at:
  2014 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  2015 ;; Parameters:    Size  Location     Type
  2016 ;;  divisor         2    7[BANK0 ] unsigned int 
  2017 ;;  dividend        2    9[BANK0 ] unsigned int 
  2018 ;; Auto vars:     Size  Location     Type
  2019 ;;  counter         1   11[BANK0 ] unsigned char 
  2020 ;; Return value:  Size  Location     Type
  2021 ;;                  2    7[BANK0 ] unsigned int 
  2022 ;; Registers used:
  2023 ;;		wreg, status,2, status,0
  2024 ;; Tracked objects:
  2025 ;;		On entry : 0/0
  2026 ;;		On exit  : 0/0
  2027 ;;		Unchanged: 0/0
  2028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2029 ;;      Params:         0       4       0       0       0
  2030 ;;      Locals:         0       1       0       0       0
  2031 ;;      Temps:          1       0       0       0       0
  2032 ;;      Totals:         1       5       0       0       0
  2033 ;;Total ram usage:        6 bytes
  2034 ;; Hardware stack levels used: 1
  2035 ;; Hardware stack levels required when called: 2
  2036 ;; This function calls:
  2037 ;;		Nothing
  2038 ;; This function is called by:
  2039 ;;		_sprintf
  2040 ;; This function uses a non-reentrant model
  2041 ;;
  2042                           
  2043                           
  2044                           ;psect for function ___lwmod
  2045  03EB                     ___lwmod:
  2046  03EB                     l1350:	
  2047                           ;incstack = 0
  2048                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2049                           
  2050  03EB  1283               	bcf	3,5	;RP0=0, select bank0
  2051  03EC  1303               	bcf	3,6	;RP1=0, select bank0
  2052  03ED  0827               	movf	___lwmod@divisor,w
  2053  03EE  0428               	iorwf	___lwmod@divisor+1,w
  2054  03EF  1903               	btfsc	3,2
  2055  03F0  2BF2               	goto	u791
  2056  03F1  2BF3               	goto	u790
  2057  03F2                     u791:
  2058  03F2  2C22               	goto	l1368
  2059  03F3                     u790:
  2060  03F3                     l1352:
  2061  03F3  01AB               	clrf	___lwmod@counter
  2062  03F4  0AAB               	incf	___lwmod@counter,f
  2063  03F5  2C01               	goto	l1358
  2064  03F6                     l1354:
  2065  03F6  3001               	movlw	1
  2066  03F7                     u805:
  2067  03F7  1003               	clrc
  2068  03F8  0DA7               	rlf	___lwmod@divisor,f
  2069  03F9  0DA8               	rlf	___lwmod@divisor+1,f
  2070  03FA  3EFF               	addlw	-1
  2071  03FB  1D03               	skipz
  2072  03FC  2BF7               	goto	u805
  2073  03FD                     l1356:
  2074  03FD  3001               	movlw	1
  2075  03FE  00F5               	movwf	??___lwmod
  2076  03FF  0875               	movf	??___lwmod,w
  2077  0400  07AB               	addwf	___lwmod@counter,f
  2078  0401                     l1358:
  2079  0401  1FA8               	btfss	___lwmod@divisor+1,7
  2080  0402  2C04               	goto	u811
  2081  0403  2C05               	goto	u810
  2082  0404                     u811:
  2083  0404  2BF6               	goto	l1354
  2084  0405                     u810:
  2085  0405                     l1360:
  2086  0405  0828               	movf	___lwmod@divisor+1,w
  2087  0406  022A               	subwf	___lwmod@dividend+1,w
  2088  0407  1D03               	skipz
  2089  0408  2C0B               	goto	u825
  2090  0409  0827               	movf	___lwmod@divisor,w
  2091  040A  0229               	subwf	___lwmod@dividend,w
  2092  040B                     u825:
  2093  040B  1C03               	skipc
  2094  040C  2C0E               	goto	u821
  2095  040D  2C0F               	goto	u820
  2096  040E                     u821:
  2097  040E  2C15               	goto	l1364
  2098  040F                     u820:
  2099  040F                     l1362:
  2100  040F  0827               	movf	___lwmod@divisor,w
  2101  0410  02A9               	subwf	___lwmod@dividend,f
  2102  0411  0828               	movf	___lwmod@divisor+1,w
  2103  0412  1C03               	skipc
  2104  0413  03AA               	decf	___lwmod@dividend+1,f
  2105  0414  02AA               	subwf	___lwmod@dividend+1,f
  2106  0415                     l1364:
  2107  0415  3001               	movlw	1
  2108  0416                     u835:
  2109  0416  1003               	clrc
  2110  0417  0CA8               	rrf	___lwmod@divisor+1,f
  2111  0418  0CA7               	rrf	___lwmod@divisor,f
  2112  0419  3EFF               	addlw	-1
  2113  041A  1D03               	skipz
  2114  041B  2C16               	goto	u835
  2115  041C                     l1366:
  2116  041C  3001               	movlw	1
  2117  041D  02AB               	subwf	___lwmod@counter,f
  2118  041E  1D03               	btfss	3,2
  2119  041F  2C21               	goto	u841
  2120  0420  2C22               	goto	u840
  2121  0421                     u841:
  2122  0421  2C05               	goto	l1360
  2123  0422                     u840:
  2124  0422                     l1368:
  2125  0422  082A               	movf	___lwmod@dividend+1,w
  2126  0423  00A8               	movwf	?___lwmod+1
  2127  0424  0829               	movf	___lwmod@dividend,w
  2128  0425  00A7               	movwf	?___lwmod
  2129  0426                     l590:
  2130  0426  0008               	return
  2131  0427                     __end_of___lwmod:
  2132                           
  2133                           	psect	text9
  2134  03A5                     __ptext9:	
  2135 ;; *************** function ___lwdiv *****************
  2136 ;; Defined at:
  2137 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  2138 ;; Parameters:    Size  Location     Type
  2139 ;;  divisor         2    0[BANK0 ] unsigned int 
  2140 ;;  dividend        2    2[BANK0 ] unsigned int 
  2141 ;; Auto vars:     Size  Location     Type
  2142 ;;  quotient        2    5[BANK0 ] unsigned int 
  2143 ;;  counter         1    4[BANK0 ] unsigned char 
  2144 ;; Return value:  Size  Location     Type
  2145 ;;                  2    0[BANK0 ] unsigned int 
  2146 ;; Registers used:
  2147 ;;		wreg, status,2, status,0
  2148 ;; Tracked objects:
  2149 ;;		On entry : 0/0
  2150 ;;		On exit  : 0/0
  2151 ;;		Unchanged: 0/0
  2152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2153 ;;      Params:         0       4       0       0       0
  2154 ;;      Locals:         0       3       0       0       0
  2155 ;;      Temps:          1       0       0       0       0
  2156 ;;      Totals:         1       7       0       0       0
  2157 ;;Total ram usage:        8 bytes
  2158 ;; Hardware stack levels used: 1
  2159 ;; Hardware stack levels required when called: 2
  2160 ;; This function calls:
  2161 ;;		Nothing
  2162 ;; This function is called by:
  2163 ;;		_sprintf
  2164 ;; This function uses a non-reentrant model
  2165 ;;
  2166                           
  2167                           
  2168                           ;psect for function ___lwdiv
  2169  03A5                     ___lwdiv:
  2170  03A5                     l1740:	
  2171                           ;incstack = 0
  2172                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2173                           
  2174  03A5  1283               	bcf	3,5	;RP0=0, select bank0
  2175  03A6  1303               	bcf	3,6	;RP1=0, select bank0
  2176  03A7  01A5               	clrf	___lwdiv@quotient
  2177  03A8  01A6               	clrf	___lwdiv@quotient+1
  2178  03A9                     l1742:
  2179  03A9  0820               	movf	___lwdiv@divisor,w
  2180  03AA  0421               	iorwf	___lwdiv@divisor+1,w
  2181  03AB  1903               	btfsc	3,2
  2182  03AC  2BAE               	goto	u1241
  2183  03AD  2BAF               	goto	u1240
  2184  03AE                     u1241:
  2185  03AE  2BE6               	goto	l1762
  2186  03AF                     u1240:
  2187  03AF                     l1744:
  2188  03AF  01A4               	clrf	___lwdiv@counter
  2189  03B0  0AA4               	incf	___lwdiv@counter,f
  2190  03B1  2BBD               	goto	l1750
  2191  03B2                     l1746:
  2192  03B2  3001               	movlw	1
  2193  03B3                     u1255:
  2194  03B3  1003               	clrc
  2195  03B4  0DA0               	rlf	___lwdiv@divisor,f
  2196  03B5  0DA1               	rlf	___lwdiv@divisor+1,f
  2197  03B6  3EFF               	addlw	-1
  2198  03B7  1D03               	skipz
  2199  03B8  2BB3               	goto	u1255
  2200  03B9                     l1748:
  2201  03B9  3001               	movlw	1
  2202  03BA  00F4               	movwf	??___lwdiv
  2203  03BB  0874               	movf	??___lwdiv,w
  2204  03BC  07A4               	addwf	___lwdiv@counter,f
  2205  03BD                     l1750:
  2206  03BD  1FA1               	btfss	___lwdiv@divisor+1,7
  2207  03BE  2BC0               	goto	u1261
  2208  03BF  2BC1               	goto	u1260
  2209  03C0                     u1261:
  2210  03C0  2BB2               	goto	l1746
  2211  03C1                     u1260:
  2212  03C1                     l1752:
  2213  03C1  3001               	movlw	1
  2214  03C2                     u1275:
  2215  03C2  1003               	clrc
  2216  03C3  0DA5               	rlf	___lwdiv@quotient,f
  2217  03C4  0DA6               	rlf	___lwdiv@quotient+1,f
  2218  03C5  3EFF               	addlw	-1
  2219  03C6  1D03               	skipz
  2220  03C7  2BC2               	goto	u1275
  2221  03C8  0821               	movf	___lwdiv@divisor+1,w
  2222  03C9  0223               	subwf	___lwdiv@dividend+1,w
  2223  03CA  1D03               	skipz
  2224  03CB  2BCE               	goto	u1285
  2225  03CC  0820               	movf	___lwdiv@divisor,w
  2226  03CD  0222               	subwf	___lwdiv@dividend,w
  2227  03CE                     u1285:
  2228  03CE  1C03               	skipc
  2229  03CF  2BD1               	goto	u1281
  2230  03D0  2BD2               	goto	u1280
  2231  03D1                     u1281:
  2232  03D1  2BD9               	goto	l1758
  2233  03D2                     u1280:
  2234  03D2                     l1754:
  2235  03D2  0820               	movf	___lwdiv@divisor,w
  2236  03D3  02A2               	subwf	___lwdiv@dividend,f
  2237  03D4  0821               	movf	___lwdiv@divisor+1,w
  2238  03D5  1C03               	skipc
  2239  03D6  03A3               	decf	___lwdiv@dividend+1,f
  2240  03D7  02A3               	subwf	___lwdiv@dividend+1,f
  2241  03D8                     l1756:
  2242  03D8  1425               	bsf	___lwdiv@quotient,0
  2243  03D9                     l1758:
  2244  03D9  3001               	movlw	1
  2245  03DA                     u1295:
  2246  03DA  1003               	clrc
  2247  03DB  0CA1               	rrf	___lwdiv@divisor+1,f
  2248  03DC  0CA0               	rrf	___lwdiv@divisor,f
  2249  03DD  3EFF               	addlw	-1
  2250  03DE  1D03               	skipz
  2251  03DF  2BDA               	goto	u1295
  2252  03E0                     l1760:
  2253  03E0  3001               	movlw	1
  2254  03E1  02A4               	subwf	___lwdiv@counter,f
  2255  03E2  1D03               	btfss	3,2
  2256  03E3  2BE5               	goto	u1301
  2257  03E4  2BE6               	goto	u1300
  2258  03E5                     u1301:
  2259  03E5  2BC1               	goto	l1752
  2260  03E6                     u1300:
  2261  03E6                     l1762:
  2262  03E6  0826               	movf	___lwdiv@quotient+1,w
  2263  03E7  00A1               	movwf	?___lwdiv+1
  2264  03E8  0825               	movf	___lwdiv@quotient,w
  2265  03E9  00A0               	movwf	?___lwdiv
  2266  03EA                     l580:
  2267  03EA  0008               	return
  2268  03EB                     __end_of___lwdiv:
  2269                           
  2270                           	psect	text10
  2271  02FE                     __ptext10:	
  2272 ;; *************** function _divisor *****************
  2273 ;; Defined at:
  2274 ;;		line 175 in file "LAB2.c"
  2275 ;; Parameters:    Size  Location     Type
  2276 ;;  a               1    wreg     unsigned char 
  2277 ;;  dig             1    5[COMMON] PTR unsigned char 
  2278 ;;		 -> vol2(1), vol1(1), 
  2279 ;; Auto vars:     Size  Location     Type
  2280 ;;  a               1   10[BANK0 ] unsigned char 
  2281 ;;  i               2   13[BANK0 ] int 
  2282 ;;  b               2   11[BANK0 ] int 
  2283 ;; Return value:  Size  Location     Type
  2284 ;;                  1    wreg      void 
  2285 ;; Registers used:
  2286 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2287 ;; Tracked objects:
  2288 ;;		On entry : 0/0
  2289 ;;		On exit  : 0/0
  2290 ;;		Unchanged: 0/0
  2291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2292 ;;      Params:         1       0       0       0       0
  2293 ;;      Locals:         0       5       0       0       0
  2294 ;;      Temps:          0       2       0       0       0
  2295 ;;      Totals:         1       7       0       0       0
  2296 ;;Total ram usage:        8 bytes
  2297 ;; Hardware stack levels used: 1
  2298 ;; Hardware stack levels required when called: 3
  2299 ;; This function calls:
  2300 ;;		___awdiv
  2301 ;;		___awmod
  2302 ;; This function is called by:
  2303 ;;		_conversion_char
  2304 ;; This function uses a non-reentrant model
  2305 ;;
  2306                           
  2307                           
  2308                           ;psect for function _divisor
  2309  02FE                     _divisor:
  2310                           
  2311                           ;incstack = 0
  2312                           ; Regs used in _divisor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2313                           ;divisor@a stored from wreg
  2314  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  2315  02FF  1303               	bcf	3,6	;RP1=0, select bank0
  2316  0300  00AA               	movwf	divisor@a
  2317  0301                     l1796:
  2318                           
  2319                           ;LAB2.c: 176:     int b = 2*a;
  2320  0301  082A               	movf	divisor@a,w
  2321  0302  00A8               	movwf	??_divisor
  2322  0303  01A9               	clrf	??_divisor+1
  2323  0304  1003               	clrc
  2324  0305  0D28               	rlf	??_divisor,w
  2325  0306  00AB               	movwf	divisor@b
  2326  0307  0D29               	rlf	??_divisor+1,w
  2327  0308  00AC               	movwf	divisor@b+1
  2328  0309                     l1798:
  2329                           
  2330                           ;LAB2.c: 177:     for(int i = 0; i<3 ; i++){
  2331  0309  01AD               	clrf	divisor@i
  2332  030A  01AE               	clrf	divisor@i+1
  2333  030B                     l1804:
  2334                           
  2335                           ;LAB2.c: 178:         dig[i] = b % 10;
  2336  030B  300A               	movlw	10
  2337  030C  1283               	bcf	3,5	;RP0=0, select bank0
  2338  030D  1303               	bcf	3,6	;RP1=0, select bank0
  2339  030E  00A0               	movwf	___awmod@divisor
  2340  030F  3000               	movlw	0
  2341  0310  00A1               	movwf	___awmod@divisor+1
  2342  0311  082C               	movf	divisor@b+1,w
  2343  0312  00A3               	movwf	___awmod@dividend+1
  2344  0313  082B               	movf	divisor@b,w
  2345  0314  00A2               	movwf	___awmod@dividend
  2346  0315  120A  118A  22A3  120A  118A  	fcall	___awmod
  2347  031A  1283               	bcf	3,5	;RP0=0, select bank0
  2348  031B  1303               	bcf	3,6	;RP1=0, select bank0
  2349  031C  0820               	movf	?___awmod,w
  2350  031D  00A8               	movwf	??_divisor
  2351  031E  082D               	movf	divisor@i,w
  2352  031F  0775               	addwf	divisor@dig,w
  2353  0320  00A9               	movwf	??_divisor+1
  2354  0321  0829               	movf	??_divisor+1,w
  2355  0322  0084               	movwf	4
  2356  0323  0828               	movf	??_divisor,w
  2357  0324  1383               	bcf	3,7	;select IRP bank0
  2358  0325  0080               	movwf	0
  2359                           
  2360                           ;LAB2.c: 179:         b = (b - dig[i])/10;
  2361  0326  300A               	movlw	10
  2362  0327  00A0               	movwf	___awdiv@divisor
  2363  0328  3000               	movlw	0
  2364  0329  00A1               	movwf	___awdiv@divisor+1
  2365  032A  082D               	movf	divisor@i,w
  2366  032B  0775               	addwf	divisor@dig,w
  2367  032C  00A8               	movwf	??_divisor
  2368  032D  0828               	movf	??_divisor,w
  2369  032E  0084               	movwf	4
  2370  032F  0800               	movf	0,w
  2371  0330  022B               	subwf	divisor@b,w
  2372  0331  00A2               	movwf	___awdiv@dividend
  2373  0332  082C               	movf	divisor@b+1,w
  2374  0333  1C03               	skipc
  2375  0334  032C               	decf	divisor@b+1,w
  2376  0335  00A3               	movwf	___awdiv@dividend+1
  2377  0336  120A  118A  217D  120A  118A  	fcall	___awdiv
  2378  033B  1283               	bcf	3,5	;RP0=0, select bank0
  2379  033C  1303               	bcf	3,6	;RP1=0, select bank0
  2380  033D  0821               	movf	?___awdiv+1,w
  2381  033E  00AC               	movwf	divisor@b+1
  2382  033F  0820               	movf	?___awdiv,w
  2383  0340  00AB               	movwf	divisor@b
  2384  0341                     l1806:
  2385                           
  2386                           ;LAB2.c: 180:     }
  2387  0341  3001               	movlw	1
  2388  0342  07AD               	addwf	divisor@i,f
  2389  0343  1803               	skipnc
  2390  0344  0AAE               	incf	divisor@i+1,f
  2391  0345  3000               	movlw	0
  2392  0346  07AE               	addwf	divisor@i+1,f
  2393  0347                     l1808:
  2394  0347  082E               	movf	divisor@i+1,w
  2395  0348  3A80               	xorlw	128
  2396  0349  00FF               	movwf	btemp+1
  2397  034A  3080               	movlw	128
  2398  034B  027F               	subwf	btemp+1,w
  2399  034C  1D03               	skipz
  2400  034D  2B50               	goto	u1315
  2401  034E  3003               	movlw	3
  2402  034F  022D               	subwf	divisor@i,w
  2403  0350                     u1315:
  2404  0350  1C03               	skipc
  2405  0351  2B53               	goto	u1311
  2406  0352  2B54               	goto	u1310
  2407  0353                     u1311:
  2408  0353  2B0B               	goto	l1804
  2409  0354                     u1310:
  2410  0354                     l116:
  2411  0354  0008               	return
  2412  0355                     __end_of_divisor:
  2413                           
  2414                           	psect	text11
  2415  02A3                     __ptext11:	
  2416 ;; *************** function ___awmod *****************
  2417 ;; Defined at:
  2418 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awmod.c"
  2419 ;; Parameters:    Size  Location     Type
  2420 ;;  divisor         2    0[BANK0 ] int 
  2421 ;;  dividend        2    2[BANK0 ] int 
  2422 ;; Auto vars:     Size  Location     Type
  2423 ;;  sign            1    5[BANK0 ] unsigned char 
  2424 ;;  counter         1    4[BANK0 ] unsigned char 
  2425 ;; Return value:  Size  Location     Type
  2426 ;;                  2    0[BANK0 ] int 
  2427 ;; Registers used:
  2428 ;;		wreg, status,2, status,0
  2429 ;; Tracked objects:
  2430 ;;		On entry : 0/0
  2431 ;;		On exit  : 0/0
  2432 ;;		Unchanged: 0/0
  2433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2434 ;;      Params:         0       4       0       0       0
  2435 ;;      Locals:         0       2       0       0       0
  2436 ;;      Temps:          1       0       0       0       0
  2437 ;;      Totals:         1       6       0       0       0
  2438 ;;Total ram usage:        7 bytes
  2439 ;; Hardware stack levels used: 1
  2440 ;; Hardware stack levels required when called: 2
  2441 ;; This function calls:
  2442 ;;		Nothing
  2443 ;; This function is called by:
  2444 ;;		_divisor
  2445 ;; This function uses a non-reentrant model
  2446 ;;
  2447                           
  2448                           
  2449                           ;psect for function ___awmod
  2450  02A3                     ___awmod:
  2451  02A3                     l1702:	
  2452                           ;incstack = 0
  2453                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2454                           
  2455  02A3  1283               	bcf	3,5	;RP0=0, select bank0
  2456  02A4  1303               	bcf	3,6	;RP1=0, select bank0
  2457  02A5  01A5               	clrf	___awmod@sign
  2458  02A6                     l1704:
  2459  02A6  1FA3               	btfss	___awmod@dividend+1,7
  2460  02A7  2AA9               	goto	u1151
  2461  02A8  2AAA               	goto	u1150
  2462  02A9                     u1151:
  2463  02A9  2AB1               	goto	l1710
  2464  02AA                     u1150:
  2465  02AA                     l1706:
  2466  02AA  09A2               	comf	___awmod@dividend,f
  2467  02AB  09A3               	comf	___awmod@dividend+1,f
  2468  02AC  0AA2               	incf	___awmod@dividend,f
  2469  02AD  1903               	skipnz
  2470  02AE  0AA3               	incf	___awmod@dividend+1,f
  2471  02AF                     l1708:
  2472  02AF  01A5               	clrf	___awmod@sign
  2473  02B0  0AA5               	incf	___awmod@sign,f
  2474  02B1                     l1710:
  2475  02B1  1FA1               	btfss	___awmod@divisor+1,7
  2476  02B2  2AB4               	goto	u1161
  2477  02B3  2AB5               	goto	u1160
  2478  02B4                     u1161:
  2479  02B4  2ABA               	goto	l1714
  2480  02B5                     u1160:
  2481  02B5                     l1712:
  2482  02B5  09A0               	comf	___awmod@divisor,f
  2483  02B6  09A1               	comf	___awmod@divisor+1,f
  2484  02B7  0AA0               	incf	___awmod@divisor,f
  2485  02B8  1903               	skipnz
  2486  02B9  0AA1               	incf	___awmod@divisor+1,f
  2487  02BA                     l1714:
  2488  02BA  0820               	movf	___awmod@divisor,w
  2489  02BB  0421               	iorwf	___awmod@divisor+1,w
  2490  02BC  1903               	btfsc	3,2
  2491  02BD  2ABF               	goto	u1171
  2492  02BE  2AC0               	goto	u1170
  2493  02BF                     u1171:
  2494  02BF  2AEF               	goto	l1732
  2495  02C0                     u1170:
  2496  02C0                     l1716:
  2497  02C0  01A4               	clrf	___awmod@counter
  2498  02C1  0AA4               	incf	___awmod@counter,f
  2499  02C2  2ACE               	goto	l1722
  2500  02C3                     l1718:
  2501  02C3  3001               	movlw	1
  2502  02C4                     u1185:
  2503  02C4  1003               	clrc
  2504  02C5  0DA0               	rlf	___awmod@divisor,f
  2505  02C6  0DA1               	rlf	___awmod@divisor+1,f
  2506  02C7  3EFF               	addlw	-1
  2507  02C8  1D03               	skipz
  2508  02C9  2AC4               	goto	u1185
  2509  02CA                     l1720:
  2510  02CA  3001               	movlw	1
  2511  02CB  00F4               	movwf	??___awmod
  2512  02CC  0874               	movf	??___awmod,w
  2513  02CD  07A4               	addwf	___awmod@counter,f
  2514  02CE                     l1722:
  2515  02CE  1FA1               	btfss	___awmod@divisor+1,7
  2516  02CF  2AD1               	goto	u1191
  2517  02D0  2AD2               	goto	u1190
  2518  02D1                     u1191:
  2519  02D1  2AC3               	goto	l1718
  2520  02D2                     u1190:
  2521  02D2                     l1724:
  2522  02D2  0821               	movf	___awmod@divisor+1,w
  2523  02D3  0223               	subwf	___awmod@dividend+1,w
  2524  02D4  1D03               	skipz
  2525  02D5  2AD8               	goto	u1205
  2526  02D6  0820               	movf	___awmod@divisor,w
  2527  02D7  0222               	subwf	___awmod@dividend,w
  2528  02D8                     u1205:
  2529  02D8  1C03               	skipc
  2530  02D9  2ADB               	goto	u1201
  2531  02DA  2ADC               	goto	u1200
  2532  02DB                     u1201:
  2533  02DB  2AE2               	goto	l1728
  2534  02DC                     u1200:
  2535  02DC                     l1726:
  2536  02DC  0820               	movf	___awmod@divisor,w
  2537  02DD  02A2               	subwf	___awmod@dividend,f
  2538  02DE  0821               	movf	___awmod@divisor+1,w
  2539  02DF  1C03               	skipc
  2540  02E0  03A3               	decf	___awmod@dividend+1,f
  2541  02E1  02A3               	subwf	___awmod@dividend+1,f
  2542  02E2                     l1728:
  2543  02E2  3001               	movlw	1
  2544  02E3                     u1215:
  2545  02E3  1003               	clrc
  2546  02E4  0CA1               	rrf	___awmod@divisor+1,f
  2547  02E5  0CA0               	rrf	___awmod@divisor,f
  2548  02E6  3EFF               	addlw	-1
  2549  02E7  1D03               	skipz
  2550  02E8  2AE3               	goto	u1215
  2551  02E9                     l1730:
  2552  02E9  3001               	movlw	1
  2553  02EA  02A4               	subwf	___awmod@counter,f
  2554  02EB  1D03               	btfss	3,2
  2555  02EC  2AEE               	goto	u1221
  2556  02ED  2AEF               	goto	u1220
  2557  02EE                     u1221:
  2558  02EE  2AD2               	goto	l1724
  2559  02EF                     u1220:
  2560  02EF                     l1732:
  2561  02EF  0825               	movf	___awmod@sign,w
  2562  02F0  1903               	btfsc	3,2
  2563  02F1  2AF3               	goto	u1231
  2564  02F2  2AF4               	goto	u1230
  2565  02F3                     u1231:
  2566  02F3  2AF9               	goto	l1736
  2567  02F4                     u1230:
  2568  02F4                     l1734:
  2569  02F4  09A2               	comf	___awmod@dividend,f
  2570  02F5  09A3               	comf	___awmod@dividend+1,f
  2571  02F6  0AA2               	incf	___awmod@dividend,f
  2572  02F7  1903               	skipnz
  2573  02F8  0AA3               	incf	___awmod@dividend+1,f
  2574  02F9                     l1736:
  2575  02F9  0823               	movf	___awmod@dividend+1,w
  2576  02FA  00A1               	movwf	?___awmod+1
  2577  02FB  0822               	movf	___awmod@dividend,w
  2578  02FC  00A0               	movwf	?___awmod
  2579  02FD                     l474:
  2580  02FD  0008               	return
  2581  02FE                     __end_of___awmod:
  2582                           
  2583                           	psect	text12
  2584  017D                     __ptext12:	
  2585 ;; *************** function ___awdiv *****************
  2586 ;; Defined at:
  2587 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awdiv.c"
  2588 ;; Parameters:    Size  Location     Type
  2589 ;;  divisor         2    0[BANK0 ] int 
  2590 ;;  dividend        2    2[BANK0 ] int 
  2591 ;; Auto vars:     Size  Location     Type
  2592 ;;  quotient        2    6[BANK0 ] int 
  2593 ;;  sign            1    5[BANK0 ] unsigned char 
  2594 ;;  counter         1    4[BANK0 ] unsigned char 
  2595 ;; Return value:  Size  Location     Type
  2596 ;;                  2    0[BANK0 ] int 
  2597 ;; Registers used:
  2598 ;;		wreg, status,2, status,0
  2599 ;; Tracked objects:
  2600 ;;		On entry : 0/0
  2601 ;;		On exit  : 0/0
  2602 ;;		Unchanged: 0/0
  2603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2604 ;;      Params:         0       4       0       0       0
  2605 ;;      Locals:         0       4       0       0       0
  2606 ;;      Temps:          1       0       0       0       0
  2607 ;;      Totals:         1       8       0       0       0
  2608 ;;Total ram usage:        9 bytes
  2609 ;; Hardware stack levels used: 1
  2610 ;; Hardware stack levels required when called: 2
  2611 ;; This function calls:
  2612 ;;		Nothing
  2613 ;; This function is called by:
  2614 ;;		_divisor
  2615 ;; This function uses a non-reentrant model
  2616 ;;
  2617                           
  2618                           
  2619                           ;psect for function ___awdiv
  2620  017D                     ___awdiv:
  2621  017D                     l1658:	
  2622                           ;incstack = 0
  2623                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2624                           
  2625  017D  1283               	bcf	3,5	;RP0=0, select bank0
  2626  017E  1303               	bcf	3,6	;RP1=0, select bank0
  2627  017F  01A5               	clrf	___awdiv@sign
  2628  0180                     l1660:
  2629  0180  1FA1               	btfss	___awdiv@divisor+1,7
  2630  0181  2983               	goto	u1051
  2631  0182  2984               	goto	u1050
  2632  0183                     u1051:
  2633  0183  298B               	goto	l1666
  2634  0184                     u1050:
  2635  0184                     l1662:
  2636  0184  09A0               	comf	___awdiv@divisor,f
  2637  0185  09A1               	comf	___awdiv@divisor+1,f
  2638  0186  0AA0               	incf	___awdiv@divisor,f
  2639  0187  1903               	skipnz
  2640  0188  0AA1               	incf	___awdiv@divisor+1,f
  2641  0189                     l1664:
  2642  0189  01A5               	clrf	___awdiv@sign
  2643  018A  0AA5               	incf	___awdiv@sign,f
  2644  018B                     l1666:
  2645  018B  1FA3               	btfss	___awdiv@dividend+1,7
  2646  018C  298E               	goto	u1061
  2647  018D  298F               	goto	u1060
  2648  018E                     u1061:
  2649  018E  2998               	goto	l1672
  2650  018F                     u1060:
  2651  018F                     l1668:
  2652  018F  09A2               	comf	___awdiv@dividend,f
  2653  0190  09A3               	comf	___awdiv@dividend+1,f
  2654  0191  0AA2               	incf	___awdiv@dividend,f
  2655  0192  1903               	skipnz
  2656  0193  0AA3               	incf	___awdiv@dividend+1,f
  2657  0194                     l1670:
  2658  0194  3001               	movlw	1
  2659  0195  00F4               	movwf	??___awdiv
  2660  0196  0874               	movf	??___awdiv,w
  2661  0197  06A5               	xorwf	___awdiv@sign,f
  2662  0198                     l1672:
  2663  0198  01A6               	clrf	___awdiv@quotient
  2664  0199  01A7               	clrf	___awdiv@quotient+1
  2665  019A                     l1674:
  2666  019A  0820               	movf	___awdiv@divisor,w
  2667  019B  0421               	iorwf	___awdiv@divisor+1,w
  2668  019C  1903               	btfsc	3,2
  2669  019D  299F               	goto	u1071
  2670  019E  29A0               	goto	u1070
  2671  019F                     u1071:
  2672  019F  29D7               	goto	l1694
  2673  01A0                     u1070:
  2674  01A0                     l1676:
  2675  01A0  01A4               	clrf	___awdiv@counter
  2676  01A1  0AA4               	incf	___awdiv@counter,f
  2677  01A2  29AE               	goto	l1682
  2678  01A3                     l1678:
  2679  01A3  3001               	movlw	1
  2680  01A4                     u1085:
  2681  01A4  1003               	clrc
  2682  01A5  0DA0               	rlf	___awdiv@divisor,f
  2683  01A6  0DA1               	rlf	___awdiv@divisor+1,f
  2684  01A7  3EFF               	addlw	-1
  2685  01A8  1D03               	skipz
  2686  01A9  29A4               	goto	u1085
  2687  01AA                     l1680:
  2688  01AA  3001               	movlw	1
  2689  01AB  00F4               	movwf	??___awdiv
  2690  01AC  0874               	movf	??___awdiv,w
  2691  01AD  07A4               	addwf	___awdiv@counter,f
  2692  01AE                     l1682:
  2693  01AE  1FA1               	btfss	___awdiv@divisor+1,7
  2694  01AF  29B1               	goto	u1091
  2695  01B0  29B2               	goto	u1090
  2696  01B1                     u1091:
  2697  01B1  29A3               	goto	l1678
  2698  01B2                     u1090:
  2699  01B2                     l1684:
  2700  01B2  3001               	movlw	1
  2701  01B3                     u1105:
  2702  01B3  1003               	clrc
  2703  01B4  0DA6               	rlf	___awdiv@quotient,f
  2704  01B5  0DA7               	rlf	___awdiv@quotient+1,f
  2705  01B6  3EFF               	addlw	-1
  2706  01B7  1D03               	skipz
  2707  01B8  29B3               	goto	u1105
  2708  01B9  0821               	movf	___awdiv@divisor+1,w
  2709  01BA  0223               	subwf	___awdiv@dividend+1,w
  2710  01BB  1D03               	skipz
  2711  01BC  29BF               	goto	u1115
  2712  01BD  0820               	movf	___awdiv@divisor,w
  2713  01BE  0222               	subwf	___awdiv@dividend,w
  2714  01BF                     u1115:
  2715  01BF  1C03               	skipc
  2716  01C0  29C2               	goto	u1111
  2717  01C1  29C3               	goto	u1110
  2718  01C2                     u1111:
  2719  01C2  29CA               	goto	l1690
  2720  01C3                     u1110:
  2721  01C3                     l1686:
  2722  01C3  0820               	movf	___awdiv@divisor,w
  2723  01C4  02A2               	subwf	___awdiv@dividend,f
  2724  01C5  0821               	movf	___awdiv@divisor+1,w
  2725  01C6  1C03               	skipc
  2726  01C7  03A3               	decf	___awdiv@dividend+1,f
  2727  01C8  02A3               	subwf	___awdiv@dividend+1,f
  2728  01C9                     l1688:
  2729  01C9  1426               	bsf	___awdiv@quotient,0
  2730  01CA                     l1690:
  2731  01CA  3001               	movlw	1
  2732  01CB                     u1125:
  2733  01CB  1003               	clrc
  2734  01CC  0CA1               	rrf	___awdiv@divisor+1,f
  2735  01CD  0CA0               	rrf	___awdiv@divisor,f
  2736  01CE  3EFF               	addlw	-1
  2737  01CF  1D03               	skipz
  2738  01D0  29CB               	goto	u1125
  2739  01D1                     l1692:
  2740  01D1  3001               	movlw	1
  2741  01D2  02A4               	subwf	___awdiv@counter,f
  2742  01D3  1D03               	btfss	3,2
  2743  01D4  29D6               	goto	u1131
  2744  01D5  29D7               	goto	u1130
  2745  01D6                     u1131:
  2746  01D6  29B2               	goto	l1684
  2747  01D7                     u1130:
  2748  01D7                     l1694:
  2749  01D7  0825               	movf	___awdiv@sign,w
  2750  01D8  1903               	btfsc	3,2
  2751  01D9  29DB               	goto	u1141
  2752  01DA  29DC               	goto	u1140
  2753  01DB                     u1141:
  2754  01DB  29E1               	goto	l1698
  2755  01DC                     u1140:
  2756  01DC                     l1696:
  2757  01DC  09A6               	comf	___awdiv@quotient,f
  2758  01DD  09A7               	comf	___awdiv@quotient+1,f
  2759  01DE  0AA6               	incf	___awdiv@quotient,f
  2760  01DF  1903               	skipnz
  2761  01E0  0AA7               	incf	___awdiv@quotient+1,f
  2762  01E1                     l1698:
  2763  01E1  0827               	movf	___awdiv@quotient+1,w
  2764  01E2  00A1               	movwf	?___awdiv+1
  2765  01E3  0826               	movf	___awdiv@quotient,w
  2766  01E4  00A0               	movwf	?___awdiv
  2767  01E5                     l461:
  2768  01E5  0008               	return
  2769  01E6                     __end_of___awdiv:
  2770                           
  2771                           	psect	text13
  2772  0489                     __ptext13:	
  2773 ;; *************** function _conversion *****************
  2774 ;; Defined at:
  2775 ;;		line 21 in file "ADC.c"
  2776 ;; Parameters:    Size  Location     Type
  2777 ;;		None
  2778 ;; Auto vars:     Size  Location     Type
  2779 ;;		None
  2780 ;; Return value:  Size  Location     Type
  2781 ;;                  1    wreg      void 
  2782 ;; Registers used:
  2783 ;;		wreg, status,2, status,0
  2784 ;; Tracked objects:
  2785 ;;		On entry : 0/0
  2786 ;;		On exit  : 0/0
  2787 ;;		Unchanged: 0/0
  2788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2789 ;;      Params:         0       0       0       0       0
  2790 ;;      Locals:         0       0       0       0       0
  2791 ;;      Temps:          1       0       0       0       0
  2792 ;;      Totals:         1       0       0       0       0
  2793 ;;Total ram usage:        1 bytes
  2794 ;; Hardware stack levels used: 1
  2795 ;; Hardware stack levels required when called: 2
  2796 ;; This function calls:
  2797 ;;		Nothing
  2798 ;; This function is called by:
  2799 ;;		_main
  2800 ;; This function uses a non-reentrant model
  2801 ;;
  2802                           
  2803                           
  2804                           ;psect for function _conversion
  2805  0489                     _conversion:
  2806  0489                     l1548:	
  2807                           ;incstack = 0
  2808                           ; Regs used in _conversion: [wreg+status,2+status,0]
  2809                           
  2810                           
  2811                           ;ADC.c: 22:     if(ADCON0bits.GO == 0){
  2812  0489  1283               	bcf	3,5	;RP0=0, select bank0
  2813  048A  1303               	bcf	3,6	;RP1=0, select bank0
  2814  048B  189F               	btfsc	31,1	;volatile
  2815  048C  2C8E               	goto	u951
  2816  048D  2C8F               	goto	u950
  2817  048E                     u951:
  2818  048E  2CB4               	goto	l194
  2819  048F                     u950:
  2820  048F                     l1550:
  2821                           
  2822                           ;ADC.c: 23:         if(ADCON0bits.CHS == 1){
  2823  048F  0C1F               	rrf	31,w	;volatile
  2824  0490  00F4               	movwf	??_conversion
  2825  0491  0C74               	rrf	??_conversion,w
  2826  0492  390F               	andlw	15
  2827  0493  3A01               	xorlw	1
  2828  0494  1D03               	skipz
  2829  0495  2C97               	goto	u961
  2830  0496  2C98               	goto	u960
  2831  0497                     u961:
  2832  0497  2C9F               	goto	l1556
  2833  0498                     u960:
  2834  0498                     l1552:
  2835                           
  2836                           ;ADC.c: 24:             ADCON0bits.CHS = 0;
  2837  0498  30C3               	movlw	-61
  2838  0499  059F               	andwf	31,f	;volatile
  2839  049A                     l1554:
  2840                           
  2841                           ;ADC.c: 25:             _delay((unsigned long)((50)*(8000000/4000000.0)));
  2842  049A  3021               	movlw	33
  2843  049B  00F4               	movwf	??_conversion
  2844  049C                     u1487:
  2845  049C  0BF4               	decfsz	??_conversion,f
  2846  049D  2C9C               	goto	u1487
  2847                           
  2848                           ;ADC.c: 26:         }
  2849  049E  2CAD               	goto	l1562
  2850  049F                     l1556:
  2851  049F  0C1F               	rrf	31,w	;volatile
  2852  04A0  00F4               	movwf	??_conversion
  2853  04A1  0C74               	rrf	??_conversion,w
  2854  04A2  390F               	andlw	15
  2855  04A3  3A00               	xorlw	0
  2856  04A4  1D03               	skipz
  2857  04A5  2CA7               	goto	u971
  2858  04A6  2CA8               	goto	u970
  2859  04A7                     u971:
  2860  04A7  2CAD               	goto	l1562
  2861  04A8                     u970:
  2862  04A8                     l1558:
  2863                           
  2864                           ;ADC.c: 28:             ADCON0bits.CHS = 1;
  2865  04A8  081F               	movf	31,w	;volatile
  2866  04A9  39C3               	andlw	-61
  2867  04AA  3804               	iorlw	4
  2868  04AB  009F               	movwf	31	;volatile
  2869  04AC  2C9A               	goto	l1554
  2870  04AD                     l1562:
  2871                           
  2872                           ;ADC.c: 31:         _delay((unsigned long)((50)*(8000000/4000000.0)));
  2873  04AD  3021               	movlw	33
  2874  04AE  00F4               	movwf	??_conversion
  2875  04AF                     u1497:
  2876  04AF  0BF4               	decfsz	??_conversion,f
  2877  04B0  2CAF               	goto	u1497
  2878  04B1                     l1564:
  2879                           
  2880                           ;ADC.c: 32:         ADCON0bits.GO = 1;
  2881  04B1  1283               	bcf	3,5	;RP0=0, select bank0
  2882  04B2  1303               	bcf	3,6	;RP1=0, select bank0
  2883  04B3  149F               	bsf	31,1	;volatile
  2884  04B4                     l194:
  2885  04B4  0008               	return
  2886  04B5                     __end_of_conversion:
  2887                           
  2888                           	psect	text14
  2889  04B5                     __ptext14:	
  2890 ;; *************** function _Escribir_stringLCD *****************
  2891 ;; Defined at:
  2892 ;;		line 55 in file "LCD.c"
  2893 ;; Parameters:    Size  Location     Type
  2894 ;;  d               2    1[BANK0 ] PTR const unsigned char 
  2895 ;;		 -> buffer3(10), buffer2(10), buffer1(10), STR_1(17), 
  2896 ;; Auto vars:     Size  Location     Type
  2897 ;;		None
  2898 ;; Return value:  Size  Location     Type
  2899 ;;                  1    wreg      void 
  2900 ;; Registers used:
  2901 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2902 ;; Tracked objects:
  2903 ;;		On entry : 0/0
  2904 ;;		On exit  : 0/0
  2905 ;;		Unchanged: 0/0
  2906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2907 ;;      Params:         0       2       0       0       0
  2908 ;;      Locals:         0       0       0       0       0
  2909 ;;      Temps:          0       0       0       0       0
  2910 ;;      Totals:         0       2       0       0       0
  2911 ;;Total ram usage:        2 bytes
  2912 ;; Hardware stack levels used: 1
  2913 ;; Hardware stack levels required when called: 4
  2914 ;; This function calls:
  2915 ;;		_Escribir_datosLCD
  2916 ;; This function is called by:
  2917 ;;		_main
  2918 ;; This function uses a non-reentrant model
  2919 ;;
  2920                           
  2921                           
  2922                           ;psect for function _Escribir_stringLCD
  2923  04B5                     _Escribir_stringLCD:
  2924  04B5                     l1942:	
  2925                           ;incstack = 0
  2926                           ; Regs used in _Escribir_stringLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2927                           
  2928                           
  2929                           ;LCD.c: 56:     while(*d){
  2930  04B5  2CCC               	goto	l1948
  2931  04B6                     l1944:
  2932                           
  2933                           ;LCD.c: 57:         Escribir_datosLCD(*d++);
  2934  04B6  0822               	movf	Escribir_stringLCD@d+1,w
  2935  04B7  00FF               	movwf	btemp+1
  2936  04B8  0821               	movf	Escribir_stringLCD@d,w
  2937  04B9  0084               	movwf	4
  2938  04BA  120A  118A  2427  120A  118A  	fcall	stringtab
  2939  04BF  120A  118A  2553  120A  118A  	fcall	_Escribir_datosLCD
  2940  04C4                     l1946:
  2941  04C4  3001               	movlw	1
  2942  04C5  1283               	bcf	3,5	;RP0=0, select bank0
  2943  04C6  1303               	bcf	3,6	;RP1=0, select bank0
  2944  04C7  07A1               	addwf	Escribir_stringLCD@d,f
  2945  04C8  1803               	skipnc
  2946  04C9  0AA2               	incf	Escribir_stringLCD@d+1,f
  2947  04CA  3000               	movlw	0
  2948  04CB  07A2               	addwf	Escribir_stringLCD@d+1,f
  2949  04CC                     l1948:
  2950                           
  2951                           ;LCD.c: 56:     while(*d){
  2952  04CC  1283               	bcf	3,5	;RP0=0, select bank0
  2953  04CD  1303               	bcf	3,6	;RP1=0, select bank0
  2954  04CE  0822               	movf	Escribir_stringLCD@d+1,w
  2955  04CF  00FF               	movwf	btemp+1
  2956  04D0  0821               	movf	Escribir_stringLCD@d,w
  2957  04D1  0084               	movwf	4
  2958  04D2  120A  118A  2427  120A  118A  	fcall	stringtab
  2959  04D7  3A00               	xorlw	0
  2960  04D8  1D03               	skipz
  2961  04D9  2CDB               	goto	u1411
  2962  04DA  2CDC               	goto	u1410
  2963  04DB                     u1411:
  2964  04DB  2CB6               	goto	l1944
  2965  04DC                     u1410:
  2966  04DC                     l151:
  2967  04DC  0008               	return
  2968  04DD                     __end_of_Escribir_stringLCD:
  2969                           
  2970                           	psect	text15
  2971  0553                     __ptext15:	
  2972 ;; *************** function _Escribir_datosLCD *****************
  2973 ;; Defined at:
  2974 ;;		line 25 in file "LCD.c"
  2975 ;; Parameters:    Size  Location     Type
  2976 ;;  LCDchar         1    wreg     unsigned char 
  2977 ;; Auto vars:     Size  Location     Type
  2978 ;;  LCDchar         1    0[BANK0 ] unsigned char 
  2979 ;; Return value:  Size  Location     Type
  2980 ;;                  1    wreg      void 
  2981 ;; Registers used:
  2982 ;;		wreg, status,2, status,0, pclath, cstack
  2983 ;; Tracked objects:
  2984 ;;		On entry : 0/0
  2985 ;;		On exit  : 0/0
  2986 ;;		Unchanged: 0/0
  2987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2988 ;;      Params:         0       0       0       0       0
  2989 ;;      Locals:         0       1       0       0       0
  2990 ;;      Temps:          0       0       0       0       0
  2991 ;;      Totals:         0       1       0       0       0
  2992 ;;Total ram usage:        1 bytes
  2993 ;; Hardware stack levels used: 1
  2994 ;; Hardware stack levels required when called: 3
  2995 ;; This function calls:
  2996 ;;		_prender_ELCD
  2997 ;; This function is called by:
  2998 ;;		_Iniciar_LCD
  2999 ;;		_Escribir_stringLCD
  3000 ;; This function uses a non-reentrant model
  3001 ;;
  3002                           
  3003                           
  3004                           ;psect for function _Escribir_datosLCD
  3005  0553                     _Escribir_datosLCD:
  3006                           
  3007                           ;incstack = 0
  3008                           ; Regs used in _Escribir_datosLCD: [wreg+status,2+status,0+pclath+cstack]
  3009                           ;Escribir_datosLCD@LCDchar stored from wreg
  3010  0553  1283               	bcf	3,5	;RP0=0, select bank0
  3011  0554  1303               	bcf	3,6	;RP1=0, select bank0
  3012  0555  00A0               	movwf	Escribir_datosLCD@LCDchar
  3013  0556                     l1652:
  3014                           
  3015                           ;LCD.c: 26:     RC0 = 1;
  3016  0556  1407               	bsf	7,0	;volatile
  3017  0557                     l1654:
  3018                           
  3019                           ;LCD.c: 27:     PORTD = LCDchar;
  3020  0557  0820               	movf	Escribir_datosLCD@LCDchar,w
  3021  0558  0088               	movwf	8	;volatile
  3022  0559                     l1656:
  3023                           
  3024                           ;LCD.c: 29:     prender_ELCD();
  3025  0559  120A  118A  251A  120A  118A  	fcall	_prender_ELCD
  3026  055E                     l142:
  3027  055E  0008               	return
  3028  055F                     __end_of_Escribir_datosLCD:
  3029                           
  3030                           	psect	text16
  3031  051A                     __ptext16:	
  3032 ;; *************** function _prender_ELCD *****************
  3033 ;; Defined at:
  3034 ;;		line 11 in file "LCD.c"
  3035 ;; Parameters:    Size  Location     Type
  3036 ;;		None
  3037 ;; Auto vars:     Size  Location     Type
  3038 ;;		None
  3039 ;; Return value:  Size  Location     Type
  3040 ;;                  1    wreg      void 
  3041 ;; Registers used:
  3042 ;;		wreg
  3043 ;; Tracked objects:
  3044 ;;		On entry : 0/0
  3045 ;;		On exit  : 0/0
  3046 ;;		Unchanged: 0/0
  3047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3048 ;;      Params:         0       0       0       0       0
  3049 ;;      Locals:         0       0       0       0       0
  3050 ;;      Temps:          2       0       0       0       0
  3051 ;;      Totals:         2       0       0       0       0
  3052 ;;Total ram usage:        2 bytes
  3053 ;; Hardware stack levels used: 1
  3054 ;; Hardware stack levels required when called: 2
  3055 ;; This function calls:
  3056 ;;		Nothing
  3057 ;; This function is called by:
  3058 ;;		_Escribir_comandoLCD
  3059 ;;		_Escribir_datosLCD
  3060 ;; This function uses a non-reentrant model
  3061 ;;
  3062                           
  3063                           
  3064                           ;psect for function _prender_ELCD
  3065  051A                     _prender_ELCD:
  3066  051A                     l1646:	
  3067                           ;incstack = 0
  3068                           ; Regs used in _prender_ELCD: [wreg]
  3069                           
  3070                           
  3071                           ;LCD.c: 12:     RC1 = 1;
  3072  051A  1283               	bcf	3,5	;RP0=0, select bank0
  3073  051B  1303               	bcf	3,6	;RP1=0, select bank0
  3074  051C  1487               	bsf	7,1	;volatile
  3075  051D                     l1648:
  3076                           
  3077                           ;LCD.c: 13:     _delay((unsigned long)((4)*(8000000/4000.0)));
  3078  051D  300B               	movlw	11
  3079  051E  00F5               	movwf	??_prender_ELCD+1
  3080  051F  3062               	movlw	98
  3081  0520  00F4               	movwf	??_prender_ELCD
  3082  0521                     u1507:
  3083  0521  0BF4               	decfsz	??_prender_ELCD,f
  3084  0522  2D21               	goto	u1507
  3085  0523  0BF5               	decfsz	??_prender_ELCD+1,f
  3086  0524  2D21               	goto	u1507
  3087  0525  0000               	nop
  3088  0526                     l1650:
  3089                           
  3090                           ;LCD.c: 14:     RC1 = 0;
  3091  0526  1283               	bcf	3,5	;RP0=0, select bank0
  3092  0527  1303               	bcf	3,6	;RP1=0, select bank0
  3093  0528  1087               	bcf	7,1	;volatile
  3094                           
  3095                           ;LCD.c: 15:     _delay((unsigned long)((4)*(8000000/4000.0)));
  3096  0529  300B               	movlw	11
  3097  052A  00F5               	movwf	??_prender_ELCD+1
  3098  052B  3062               	movlw	98
  3099  052C  00F4               	movwf	??_prender_ELCD
  3100  052D                     u1517:
  3101  052D  0BF4               	decfsz	??_prender_ELCD,f
  3102  052E  2D2D               	goto	u1517
  3103  052F  0BF5               	decfsz	??_prender_ELCD+1,f
  3104  0530  2D2D               	goto	u1517
  3105  0531  0000               	nop
  3106  0532                     l136:
  3107  0532  0008               	return
  3108  0533                     __end_of_prender_ELCD:
  3109                           
  3110                           	psect	text17
  3111  045A                     __ptext17:	
  3112 ;; *************** function _isr *****************
  3113 ;; Defined at:
  3114 ;;		line 65 in file "LAB2.c"
  3115 ;; Parameters:    Size  Location     Type
  3116 ;;		None
  3117 ;; Auto vars:     Size  Location     Type
  3118 ;;		None
  3119 ;; Return value:  Size  Location     Type
  3120 ;;                  1    wreg      void 
  3121 ;; Registers used:
  3122 ;;		wreg, status,2, status,0, pclath, cstack
  3123 ;; Tracked objects:
  3124 ;;		On entry : 0/0
  3125 ;;		On exit  : 0/0
  3126 ;;		Unchanged: 0/0
  3127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3128 ;;      Params:         0       0       0       0       0
  3129 ;;      Locals:         0       0       0       0       0
  3130 ;;      Temps:          3       0       0       0       0
  3131 ;;      Totals:         3       0       0       0       0
  3132 ;;Total ram usage:        3 bytes
  3133 ;; Hardware stack levels used: 1
  3134 ;; Hardware stack levels required when called: 1
  3135 ;; This function calls:
  3136 ;;		_ADC
  3137 ;; This function is called by:
  3138 ;;		Interrupt level 1
  3139 ;; This function uses a non-reentrant model
  3140 ;;
  3141                           
  3142                           
  3143                           ;psect for function _isr
  3144  045A                     _isr:
  3145  045A                     i1l1586:
  3146                           
  3147                           ;LAB2.c: 66:     if(PIR1bits.ADIF){
  3148  045A  1283               	bcf	3,5	;RP0=0, select bank0
  3149  045B  1303               	bcf	3,6	;RP1=0, select bank0
  3150  045C  1F0C               	btfss	12,6	;volatile
  3151  045D  2C5F               	goto	u101_21
  3152  045E  2C60               	goto	u101_20
  3153  045F                     u101_21:
  3154  045F  2C68               	goto	i1l1592
  3155  0460                     u101_20:
  3156  0460                     i1l1588:
  3157                           
  3158                           ;LAB2.c: 67:         ADC();
  3159  0460  120A  118A  24FC  120A  118A  	fcall	_ADC
  3160  0465                     i1l1590:
  3161                           
  3162                           ;LAB2.c: 68:         PIR1bits.ADIF = 0;
  3163  0465  1283               	bcf	3,5	;RP0=0, select bank0
  3164  0466  1303               	bcf	3,6	;RP1=0, select bank0
  3165  0467  130C               	bcf	12,6	;volatile
  3166  0468                     i1l1592:
  3167                           
  3168                           ;LAB2.c: 70:     if(PIR1bits.RCIF){
  3169  0468  1E8C               	btfss	12,5	;volatile
  3170  0469  2C6B               	goto	u102_21
  3171  046A  2C6C               	goto	u102_20
  3172  046B                     u102_21:
  3173  046B  2C82               	goto	i1l97
  3174  046C                     u102_20:
  3175  046C                     i1l1594:
  3176                           
  3177                           ;LAB2.c: 71:         dato = RCREG;
  3178  046C  081A               	movf	26,w	;volatile
  3179  046D  00F1               	movwf	??_isr
  3180  046E  0871               	movf	??_isr,w
  3181  046F  00F6               	movwf	_dato
  3182  0470                     i1l1596:
  3183                           
  3184                           ;LAB2.c: 72:         if(dato == 75){
  3185  0470  304B               	movlw	75
  3186  0471  0676               	xorwf	_dato,w
  3187  0472  1D03               	btfss	3,2
  3188  0473  2C75               	goto	u103_21
  3189  0474  2C76               	goto	u103_20
  3190  0475                     u103_21:
  3191  0475  2C7A               	goto	i1l95
  3192  0476                     u103_20:
  3193  0476                     i1l1598:
  3194                           
  3195                           ;LAB2.c: 73:             Cont_U++;
  3196  0476  3001               	movlw	1
  3197  0477  00F1               	movwf	??_isr
  3198  0478  0871               	movf	??_isr,w
  3199  0479  07C5               	addwf	_Cont_U,f
  3200  047A                     i1l95:	
  3201                           ;LAB2.c: 74:         }
  3202                           
  3203                           
  3204                           ;LAB2.c: 75:         if(dato == 77){
  3205  047A  304D               	movlw	77
  3206  047B  0676               	xorwf	_dato,w
  3207  047C  1D03               	btfss	3,2
  3208  047D  2C7F               	goto	u104_21
  3209  047E  2C80               	goto	u104_20
  3210  047F                     u104_21:
  3211  047F  2C82               	goto	i1l97
  3212  0480                     u104_20:
  3213  0480                     i1l1600:
  3214                           
  3215                           ;LAB2.c: 76:             Cont_U--;
  3216  0480  3001               	movlw	1
  3217  0481  02C5               	subwf	_Cont_U,f
  3218  0482                     i1l97:
  3219  0482  0873               	movf	??_isr+2,w
  3220  0483  008A               	movwf	10
  3221  0484  0E72               	swapf	??_isr+1,w
  3222  0485  0083               	movwf	3
  3223  0486  0EFE               	swapf	btemp,f
  3224  0487  0E7E               	swapf	btemp,w
  3225  0488  0009               	retfie
  3226  0489                     __end_of_isr:
  3227                           
  3228                           	psect	intentry
  3229  0004                     __pintentry:	
  3230                           ;incstack = 0
  3231                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  3232                           
  3233  0004                     interrupt_function:
  3234  007E                     saved_w	set	btemp
  3235  0004  00FE               	movwf	btemp
  3236  0005  0E03               	swapf	3,w
  3237  0006  00F2               	movwf	??_isr+1
  3238  0007  080A               	movf	10,w
  3239  0008  00F3               	movwf	??_isr+2
  3240  0009  120A  118A  2C5A   	ljmp	_isr
  3241                           
  3242                           	psect	text18
  3243  04FC                     __ptext18:	
  3244 ;; *************** function _ADC *****************
  3245 ;; Defined at:
  3246 ;;		line 11 in file "ADC.c"
  3247 ;; Parameters:    Size  Location     Type
  3248 ;;		None
  3249 ;; Auto vars:     Size  Location     Type
  3250 ;;		None
  3251 ;; Return value:  Size  Location     Type
  3252 ;;                  1    wreg      void 
  3253 ;; Registers used:
  3254 ;;		wreg, status,2, status,0
  3255 ;; Tracked objects:
  3256 ;;		On entry : 0/0
  3257 ;;		On exit  : 0/0
  3258 ;;		Unchanged: 0/0
  3259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3260 ;;      Params:         0       0       0       0       0
  3261 ;;      Locals:         0       0       0       0       0
  3262 ;;      Temps:          1       0       0       0       0
  3263 ;;      Totals:         1       0       0       0       0
  3264 ;;Total ram usage:        1 bytes
  3265 ;; Hardware stack levels used: 1
  3266 ;; This function calls:
  3267 ;;		Nothing
  3268 ;; This function is called by:
  3269 ;;		_isr
  3270 ;; This function uses a non-reentrant model
  3271 ;;
  3272                           
  3273                           
  3274                           ;psect for function _ADC
  3275  04FC                     _ADC:
  3276  04FC                     i1l1484:	
  3277                           ;incstack = 0
  3278                           ; Regs used in _ADC: [wreg+status,2+status,0]
  3279                           
  3280                           
  3281                           ;ADC.c: 12:     if(ADCON0bits.CHS == 0){
  3282  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  3283  04FD  1303               	bcf	3,6	;RP1=0, select bank0
  3284  04FE  0C1F               	rrf	31,w	;volatile
  3285  04FF  00F0               	movwf	??_ADC
  3286  0500  0C70               	rrf	??_ADC,w
  3287  0501  390F               	andlw	15
  3288  0502  3A00               	xorlw	0
  3289  0503  1D03               	skipz
  3290  0504  2D06               	goto	u93_21
  3291  0505  2D07               	goto	u93_20
  3292  0506                     u93_21:
  3293  0506  2D0C               	goto	i1l1488
  3294  0507                     u93_20:
  3295  0507                     i1l1486:
  3296                           
  3297                           ;ADC.c: 13:         cont1 = ADRESH;
  3298  0507  081E               	movf	30,w	;volatile
  3299  0508  00F0               	movwf	??_ADC
  3300  0509  0870               	movf	??_ADC,w
  3301  050A  00C8               	movwf	_cont1
  3302                           
  3303                           ;ADC.c: 14:     }
  3304  050B  2D19               	goto	i1l187
  3305  050C                     i1l1488:
  3306  050C  0C1F               	rrf	31,w	;volatile
  3307  050D  00F0               	movwf	??_ADC
  3308  050E  0C70               	rrf	??_ADC,w
  3309  050F  390F               	andlw	15
  3310  0510  3A01               	xorlw	1
  3311  0511  1D03               	skipz
  3312  0512  2D14               	goto	u94_21
  3313  0513  2D15               	goto	u94_20
  3314  0514                     u94_21:
  3315  0514  2D19               	goto	i1l187
  3316  0515                     u94_20:
  3317  0515                     i1l1490:
  3318                           
  3319                           ;ADC.c: 16:         cont2 = ADRESH;
  3320  0515  081E               	movf	30,w	;volatile
  3321  0516  00F0               	movwf	??_ADC
  3322  0517  0870               	movf	??_ADC,w
  3323  0518  00C7               	movwf	_cont2
  3324  0519                     i1l187:
  3325  0519  0008               	return
  3326  051A                     __end_of_ADC:
  3327  007E                     btemp	set	126	;btemp
  3328  007E                     wtemp0	set	126
  3329                           
  3330                           	psect	config
  3331                           
  3332                           ;Config register CONFIG1 @ 0x2007
  3333                           ;	Oscillator Selection bits
  3334                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  3335                           ;	Watchdog Timer Enable bit
  3336                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  3337                           ;	Power-up Timer Enable bit
  3338                           ;	PWRTE = OFF, PWRT disabled
  3339                           ;	RE3/MCLR pin function select bit
  3340                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  3341                           ;	Code Protection bit
  3342                           ;	CP = OFF, Program memory code protection is disabled
  3343                           ;	Data Code Protection bit
  3344                           ;	CPD = OFF, Data memory code protection is disabled
  3345                           ;	Brown Out Reset Selection bits
  3346                           ;	BOREN = OFF, BOR disabled
  3347                           ;	Internal External Switchover bit
  3348                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  3349                           ;	Fail-Safe Clock Monitor Enabled bit
  3350                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  3351                           ;	Low Voltage Programming Enable bit
  3352                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  3353                           ;	In-Circuit Debugger Mode bit
  3354                           ;	DEBUG = 0x1, unprogrammed default
  3355  2007                     	org	8199
  3356  2007  20D4               	dw	8404
  3357                           
  3358                           ;Config register CONFIG2 @ 0x2008
  3359                           ;	Brown-out Reset Selection bit
  3360                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  3361                           ;	Flash Program Memory Self Write Enable bits
  3362                           ;	WRT = OFF, Write protection off
  3363  2008                     	org	8200
  3364  2008  3FFF               	dw	16383

Data Sizes:
    Strings     25
    Constant    10
    Data        0
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     37      73
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_4(CODE[3]), STR_3(CODE[8]), STR_2(CODE[8]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> buffer3(BANK0[10]), buffer2(BANK0[10]), buffer1(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Escribir_stringLCD@d	PTR const unsigned char  size(2) Largest target is 17
		 -> buffer3(BANK0[10]), buffer2(BANK0[10]), buffer1(BANK0[10]), STR_1(CODE[17]), 

    divisor@dig	PTR unsigned char  size(1) Largest target is 1
		 -> vol2(BANK0[1]), vol1(BANK0[1]), 


Critical Paths under _main in COMMON

    _Escribir_comandoLCD->_prender_ELCD
    _conversion_char->_divisor
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _divisor->___awdiv
    _divisor->___awmod
    _Escribir_datosLCD->_prender_ELCD

Critical Paths under _isr in COMMON

    _isr->_ADC

Critical Paths under _main in BANK0

    _main->_conversion_char
    _setup->_Iniciar_LCD
    _Iniciar_LCD->_Escribir_datosLCD
    _set_cursor->_Escribir_comandoLCD
    _dato_recibido->_sprintf
    _conversion_char->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _divisor->___awdiv
    _Escribir_stringLCD->_Escribir_datosLCD

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    6323
                                             36 BANK0      1     1      0
                 _Escribir_stringLCD
                         _conversion
                    _conversion_char
                      _dato_recibido
                         _set_cursor
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                1     1      0      31
                                              4 BANK0      1     1      0
                        _Iniciar_LCD
 ---------------------------------------------------------------------------------
 (2) _Iniciar_LCD                                          3     3      0      31
                                              1 BANK0      3     3      0
                  _Escribir_datosLCD
 ---------------------------------------------------------------------------------
 (1) _set_cursor                                           2     1      1     515
                                              1 BANK0      2     1      1
                _Escribir_comandoLCD
 ---------------------------------------------------------------------------------
 (2) _Escribir_comandoLCD                                  1     1      0      31
                                              0 BANK0      1     1      0
                       _prender_ELCD
 ---------------------------------------------------------------------------------
 (1) _dato_recibido                                        3     3      0    1806
                                             29 BANK0      3     3      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _conversion_char                                      7     7      0    3515
                                             29 BANK0      7     7      0
                            _divisor
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             25    18      7    1806
                                             12 BANK0     17    10      7
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              5 COMMON     1     1      0
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     421
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _divisor                                              8     7      1    1709
                                              5 COMMON     1     0      1
                                              8 BANK0      7     7      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     613
                                              4 COMMON     1     1      0
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     625
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _conversion                                           1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Escribir_stringLCD                                   2     0      2     456
                                              1 BANK0      2     0      2
                  _Escribir_datosLCD
 ---------------------------------------------------------------------------------
 (3) _Escribir_datosLCD                                    1     1      0      31
                                              0 BANK0      1     1      0
                       _prender_ELCD
 ---------------------------------------------------------------------------------
 (4) _prender_ELCD                                         2     2      0       0
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  3     3      0       0
                                              1 COMMON     3     3      0
                                _ADC
 ---------------------------------------------------------------------------------
 (6) _ADC                                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Escribir_stringLCD
     _Escribir_datosLCD
       _prender_ELCD
   _conversion
   _conversion_char
     _divisor
       ___awdiv
       ___awmod
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _dato_recibido
     _sprintf
   _set_cursor
     _Escribir_comandoLCD
       _prender_ELCD
   _setup
     _Iniciar_LCD
       _Escribir_datosLCD

 _isr (ROOT)
   _ADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      53       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      49       5       91.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      53      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Fri Feb 04 18:40:05 2022

                           pc 0002                  ___awdiv@sign 0025                            fsr 0004  
                         l102 0112                           l111 02A2                           l116 0354  
                         l108 03A4                           l142 055E                           l151 04DC  
                         l119 0546                           l136 0532                           l304 0109  
                         l145 0247                           l139 0552                           l159 04FB  
                         _ADC 04FC                           l194 04B4                           l461 01E5  
                         l474 02FD                           l580 03EA                           l590 0426  
                         _RC0 0038                           _RC1 0039                           u810 0405  
                         u811 0404                           u820 040F                           u821 040E  
                         u805 03F7                           u840 0422                           u841 0421  
                         u825 040B                           u835 0416                           u950 048F  
                         u790 03F3                           u951 048E                           u791 03F2  
                         u960 0498                           u961 0497                           u970 04A8  
                         u971 04A7                           _dec 0078                           _cen 0077  
                         _isr 045A                           fsr0 0004                           _uni 0079  
                         indf 0000                  ___awmod@sign 0025                          ?_ADC 0070  
                        l1350 03EB                          l1360 0405                          l1352 03F3  
                        l1362 040F                          l1354 03F6                          l1364 0415  
                        l1356 03FD                          l1550 048F                          l1710 02B1  
                        l1702 02A3                          l1366 041C                          l1358 0401  
                        l1552 0498                          l1720 02CA                          l1712 02B5  
                        l1704 02A6                          l1368 0422                          l1650 0526  
                        l1562 04AD                          l1554 049A                          l1730 02E9  
                        l1722 02CE                          l1714 02BA                          l1706 02AA  
                        l1810 0023                          l1652 0556                          l1564 04B1  
                        l1556 049F                          l1548 0489                          l1660 0180  
                        l1724 02D2                          l1716 02C0                          l1732 02EF  
                        l1708 02AF                          l1804 030B                          l1740 03A5  
                        l1812 0028                          l1900 0378                          l1646 051A  
                        l1654 0557                          l1558 04A8                          l1670 0194  
                        l1662 0184                          l1734 02F4                          l1726 02DC  
                        l1718 02C3                          l1806 0341                          l1750 03BD  
                        l1742 03A9                          l1830 0068                          l1822 003B  
                        l1814 002E                          l1910 038B                          l1902 037F  
                        l1648 051D                          l1656 0559                          l1680 01AA  
                        l1672 0198                          l1664 0189                          l1736 02F9  
                        l1728 02E2                          l1808 0347                          l1760 03E0  
                        l1752 03C1                          l1744 03AF                          l1840 0073  
                        l1832 006C                          l1824 0058                          l1816 0035  
                        l1920 0392                          l1912 038C                          l1904 0382  
                        l1690 01CA                          l1682 01AE                          l1674 019A  
                        l1666 018B                          l1658 017D                          l1754 03D2  
                        l1746 03B2                          l1762 03E6                          l1850 00A6  
                        l1834 0071                          l1826 0060                          l1818 003A  
                        l1770 01EB                          l1930 039C                          l1922 0396  
                        l1914 038D                          l1906 0385                          l1692 01D1  
                        l1684 01B2                          l1676 01A0                          l1668 018F  
                        l1756 03D8                          l1748 03B9                          l1860 00EA  
                        l1852 00AA                          l1844 008F                          l1828 0064  
                        l1940 04F4                          l1780 020A                          l1772 01EE  
                        l1932 039F                          l1924 0397                          l1916 038E  
                        l1908 0388                          l1942 04B5                          l1686 01C3  
                        l1678 01A3                          l1694 01D7                          l1758 03D9  
                        l1854 00AF                          l1846 0099                          l1862 00F3  
                        l1950 0248                          l1934 04E0                          l1790 0232  
                        l1782 0210                          l1774 01F0                          l1766 01E6  
                        l1926 039A                          l1918 038F                          l1944 04B6  
                        l1696 01DC                          l1688 01C9                          l1856 00DF  
                        l1848 009F                          l1864 0105                          l1952 0533  
                        l1872 054A                          l1936 04E5                          l1792 0241  
                        l1784 0217                          l1776 01FA                          l1768 01EA  
                        l1928 039B                          l1880 0359                          l1960 012C  
                        l1946 04C4                          l1698 01E1                          l1858 00E6  
                        l1874 054B                          l1938 04EC                          l1786 021D  
                        l1778 0200                          l1890 036D                          l1882 035A  
                        l1962 013B                          l1954 010A                          l1948 04CC  
                        l1796 0301                          l1876 054D                          l1788 022C  
                        l1892 036E                          l1884 0365                          l1964 0146  
                        l1956 010F                          l1798 0309                          l1894 036F  
                        l1886 036B                          l1878 0355                          l1966 0162  
                        l1958 0121                          l1896 0375                          l1888 036C  
                        l1968 016E                          l1898 0377                          l1998 004D  
                        ?_isr 0070                          STR_1 0441                          STR_2 0452  
                        STR_3 0452                          STR_4 0457                          u1110 01C3  
                        u1111 01C2                          u1200 02DC                          u1105 01B3  
                        u1201 02DB                          u1130 01D7                          u1050 0184  
                        u1131 01D6                          u1115 01BF                          u1051 0183  
                        u1140 01DC                          u1060 018F                          u1220 02EF  
                        u1300 03E6                          u1141 01DB                          u1125 01CB  
                        u1061 018E                          u1221 02EE                          u1205 02D8  
                        u1301 03E5                          u1070 01A0                          u1230 02F4  
                        u1150 02AA                          u1310 0354                          u1071 019F  
                        u1231 02F3                          u1215 02E3                          u1151 02A9  
                        u1311 0353                          u1160 02B5                          u1240 03AF  
                        u1320 002E                          u1400 04F4                          u1161 02B4  
                        u1241 03AE                          u1321 002D                          u1401 04F3  
                        u1410 04DC                          u1090 01B2                          u1170 02C0  
                        u1330 0068                          u1411 04DB                          u1091 01B1  
                        u1171 02BF                          u1315 0350                          u1331 0067  
                        u1260 03C1                          u1340 008E                          u1085 01A4  
                        u1261 03C0                          u1341 008D                          u1190 02D2  
                        u1350 0099                          u1191 02D1                          u1255 03B3  
                        u1351 0098                          u1280 03D2                          u1360 009F  
                        u1185 02C4                          u1281 03D1                          u1361 009E  
                        u1345 008A                          u1370 00F3                          u1507 0521  
                        u1275 03C2                          u1371 00F2                          u1427 037C  
                        u1380 0105                          u1517 052D                          u1285 03CE  
                        u1381 0104                          u1437 01F6                          u1390 04E5  
                        u1295 03DA                          u1391 04E4                          u1447 0206  
                        u1457 0214                          u1467 0225                          u1477 023A  
                        u1487 049C                          u1497 04AF                          i1l95 047A  
                        i1l97 0482                 ??_Iniciar_LCD 0021                          _dato 0076  
                        _main 010A                          _vol1 0068                          _vol2 0067  
                        _vol3 0046                          btemp 007E                          start 000C  
                       ??_ADC 0070                         ??_isr 0071    __end_of_Escribir_stringLCD 04DD  
                       ?_main 0070               __end_of___awdiv 01E6               __end_of___awmod 02FE  
                       _ANSEL 0188               ___awdiv@divisor 0020               __end_of___lwdiv 03EB  
             __end_of___lwmod 0427                         i1l187 0519               ___awdiv@counter 0024  
                       _RCREG 001A                         _SPBRG 0099                         _PORTA 0005  
                       _PORTB 0006                         _PORTD 0008                         _PORTE 0009  
                       _TRISA 0085                         _TRISB 0086                         _TRISD 0088  
                       _TRISE 0089                         u93_20 0507                         u93_21 0506  
                       u94_20 0515                         u94_21 0514               __end_of_divisor 0355  
                       _cont1 0048                         _cont2 0047               __end_of_dpowers 0441  
                       _setup 0355                         pclath 000A             ??_conversion_char 003D  
                       status 0003                         wtemp0 007E               __end_of_sprintf 010A  
             __initialization 000F           __end_of_Iniciar_LCD 0248                  __end_of_main 017D  
           _Escribir_datosLCD 0553            ?_Escribir_datosLCD 0070                        ??_main 0044  
         ??_Escribir_datosLCD 0076                        _ADRESH 001E              ___awdiv@dividend 0022  
                      ?_setup 0070                        _ANSELH 0189                        u101_20 0460  
                      u101_21 045F                        u102_20 046C                        u102_21 046B  
                      u103_20 0476                        u103_21 0475                        i1l1600 0480  
                      u104_20 0480                        u104_21 047F                        i1l1490 0515  
                      i1l1484 04FC                        i1l1486 0507                        i1l1590 0465  
                      i1l1488 050C                        i1l1592 0468                        i1l1594 046C  
                      i1l1586 045A                        i1l1596 0470                        i1l1588 0460  
                      i1l1598 0476                        _SPBRGH 009A                        _TRISC0 0438  
                      _TRISC1 0439                        _Cont_U 0045     __end_of_Escribir_datosLCD 055F  
                   ??___awdiv 0074                     ??___awmod 0074         __end_of_dato_recibido 0547  
                   ??___lwdiv 0074                     ??___lwmod 0075              ___awdiv@quotient 0026  
             ___awmod@divisor 0020               ___awmod@counter 0024                     ??_divisor 0028  
                      saved_w 007E                     ??_sprintf 0033       __end_of__initialization 001C  
                 _Iniciar_LCD 01E6                __pcstackCOMMON 0070                 __end_of_setup 03A5  
                     ??_setup 0024                    __pbssBANK0 0045    __size_of_Escribir_datosLCD 000C  
                  __pmaintext 010A                    __pintentry 0004  __size_of_Escribir_comandoLCD 000C  
    Escribir_datosLCD@LCDchar 0020               _conversion_char 0248            _Escribir_stringLCD 04B5  
                  __stringtab 0427                    _conversion 0489           ?_Escribir_stringLCD 0021  
                     ___awdiv 017D                       ___awmod 02A3                       ___lwdiv 03A5  
                     ___lwmod 03EB                       __ptext1 0355                       __ptext2 01E6  
                     __ptext3 04DD                       __ptext4 0547                       __ptext5 0533  
                     __ptext6 0248                       __ptext7 0020                       __ptext8 03EB  
                     __ptext9 03A5                       _buffer1 005D                       _buffer2 0053  
                     _buffer3 0049                  __size_of_ADC 001E                       _divisor 02FE  
        ??_Escribir_stringLCD 0076                       _dpowers 0437                  __size_of_isr 002F  
            ___awmod@dividend 0022                 ?_prender_ELCD 0070                   set_cursor@a 0022  
                 set_cursor@b 0021                       _sprintf 0020                       clrloop0 0560  
        end_of_initialization 001C                    _set_cursor 04DD                     _RCSTAbits 0018  
     __end_of_conversion_char 02A3                ??_prender_ELCD 0074                  ?_Iniciar_LCD 0070  
                 ?_conversion 0070                     _TXSTAbits 0098                    divisor@dig 0075  
                 _BAUDCTLbits 0187           start_initialization 000F                   __end_of_ADC 051A  
                 __end_of_isr 0489        __size_of_dato_recibido 0014           _Escribir_comandoLCD 0547  
  Escribir_comandoLCD@Comando 0020                   ?_set_cursor 0021              ?_conversion_char 0070  
        ?_Escribir_comandoLCD 0070           __size_of_conversion 002C                   __pbssCOMMON 0076  
                   ___latbits 0002                 __pcstackBANK0 0020                   sprintf@flag 0037  
                 sprintf@prec 0038          __end_of_prender_ELCD 0533              ___lwdiv@dividend 0022  
                    ?___awdiv 0020                      ?___awmod 0020                      ?___lwdiv 0020  
                    ?___lwmod 0027         ??_Escribir_comandoLCD 0076                 _dato_recibido 0533  
                   __pstrings 0427                      ?_divisor 0075              ___lwdiv@quotient 0025  
         __size_of_set_cursor 001F                      ?_sprintf 002C                __size_of_setup 0050  
           interrupt_function 0004                     clear_ram0 055F                      _PIE1bits 008C  
        __size_of_Iniciar_LCD 0062                      _PIR1bits 000C                ?_dato_recibido 0070  
                  _ADCON0bits 001F                   __stringbase 0436                    _ADCON1bits 009F  
 __size_of_Escribir_stringLCD 0028                  ??_conversion 0074           Escribir_stringLCD@d 0021  
            __size_of___awdiv 0069              __size_of___awmod 005B              __size_of___lwdiv 0046  
            __size_of___lwmod 003C            __end_of__stringtab 0437                    sprintf@val 0039  
            __size_of_divisor 0057            __end_of_conversion 04B5               ___lwdiv@divisor 0020  
             ___lwdiv@counter 0024                      __ptext10 02FE                      __ptext11 02A3  
                    __ptext12 017D                      __ptext13 0489                      __ptext14 04B5  
                    __ptext15 0553                      __ptext16 051A                      __ptext17 045A  
                    __ptext18 04FC              __size_of_sprintf 00EA         __size_of_prender_ELCD 0019  
               __size_of_main 0073                  ??_set_cursor 0076               ??_dato_recibido 003D  
                    divisor@a 002A                      divisor@b 002B                      divisor@i 002D  
                  _INTCONbits 000B                  _prender_ELCD 051A            __end_of_set_cursor 04FC  
                    intlevel1 0000                     sprintf@ap 0036                     sprintf@sp 003B  
            ___lwmod@dividend 0029                     stringcode 0431                    _OSCCONbits 008F  
                    sprintf@c 003C                      sprintf@f 002C               ___lwmod@divisor 0027  
             ___lwmod@counter 002B      __size_of_conversion_char 005B                      stringdir 0431  
                    stringtab 0427   __end_of_Escribir_comandoLCD 0553  
