

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Mon Jan 31 18:56:20 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.20
    20                           ; Generated 12/02/2020 GMT
    21                           ; 
    22                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F887 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  008F                     	;# 
    98  0090                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009A                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  0105                     	;# 
   117  0107                     	;# 
   118  0108                     	;# 
   119  0109                     	;# 
   120  010C                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  010F                     	;# 
   125  0185                     	;# 
   126  0187                     	;# 
   127  0188                     	;# 
   128  0189                     	;# 
   129  018C                     	;# 
   130  018D                     	;# 
   131  0000                     	;# 
   132  0001                     	;# 
   133  0002                     	;# 
   134  0003                     	;# 
   135  0004                     	;# 
   136  0005                     	;# 
   137  0006                     	;# 
   138  0007                     	;# 
   139  0008                     	;# 
   140  0009                     	;# 
   141  000A                     	;# 
   142  000B                     	;# 
   143  000C                     	;# 
   144  000D                     	;# 
   145  000E                     	;# 
   146  000E                     	;# 
   147  000F                     	;# 
   148  0010                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0013                     	;# 
   152  0014                     	;# 
   153  0015                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0017                     	;# 
   157  0018                     	;# 
   158  0019                     	;# 
   159  001A                     	;# 
   160  001B                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001D                     	;# 
   164  001E                     	;# 
   165  001F                     	;# 
   166  0081                     	;# 
   167  0085                     	;# 
   168  0086                     	;# 
   169  0087                     	;# 
   170  0088                     	;# 
   171  0089                     	;# 
   172  008C                     	;# 
   173  008D                     	;# 
   174  008E                     	;# 
   175  008F                     	;# 
   176  0090                     	;# 
   177  0091                     	;# 
   178  0092                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0094                     	;# 
   183  0095                     	;# 
   184  0096                     	;# 
   185  0097                     	;# 
   186  0098                     	;# 
   187  0099                     	;# 
   188  009A                     	;# 
   189  009B                     	;# 
   190  009C                     	;# 
   191  009D                     	;# 
   192  009E                     	;# 
   193  009F                     	;# 
   194  0105                     	;# 
   195  0107                     	;# 
   196  0108                     	;# 
   197  0109                     	;# 
   198  010C                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  010F                     	;# 
   203  0185                     	;# 
   204  0187                     	;# 
   205  0188                     	;# 
   206  0189                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  0000                     	;# 
   210  0001                     	;# 
   211  0002                     	;# 
   212  0003                     	;# 
   213  0004                     	;# 
   214  0005                     	;# 
   215  0006                     	;# 
   216  0007                     	;# 
   217  0008                     	;# 
   218  0009                     	;# 
   219  000A                     	;# 
   220  000B                     	;# 
   221  000C                     	;# 
   222  000D                     	;# 
   223  000E                     	;# 
   224  000E                     	;# 
   225  000F                     	;# 
   226  0010                     	;# 
   227  0011                     	;# 
   228  0012                     	;# 
   229  0013                     	;# 
   230  0014                     	;# 
   231  0015                     	;# 
   232  0015                     	;# 
   233  0016                     	;# 
   234  0017                     	;# 
   235  0018                     	;# 
   236  0019                     	;# 
   237  001A                     	;# 
   238  001B                     	;# 
   239  001B                     	;# 
   240  001C                     	;# 
   241  001D                     	;# 
   242  001E                     	;# 
   243  001F                     	;# 
   244  0081                     	;# 
   245  0085                     	;# 
   246  0086                     	;# 
   247  0087                     	;# 
   248  0088                     	;# 
   249  0089                     	;# 
   250  008C                     	;# 
   251  008D                     	;# 
   252  008E                     	;# 
   253  008F                     	;# 
   254  0090                     	;# 
   255  0091                     	;# 
   256  0092                     	;# 
   257  0093                     	;# 
   258  0093                     	;# 
   259  0093                     	;# 
   260  0094                     	;# 
   261  0095                     	;# 
   262  0096                     	;# 
   263  0097                     	;# 
   264  0098                     	;# 
   265  0099                     	;# 
   266  009A                     	;# 
   267  009B                     	;# 
   268  009C                     	;# 
   269  009D                     	;# 
   270  009E                     	;# 
   271  009F                     	;# 
   272  0105                     	;# 
   273  0107                     	;# 
   274  0108                     	;# 
   275  0109                     	;# 
   276  010C                     	;# 
   277  010C                     	;# 
   278  010D                     	;# 
   279  010E                     	;# 
   280  010F                     	;# 
   281  0185                     	;# 
   282  0187                     	;# 
   283  0188                     	;# 
   284  0189                     	;# 
   285  018C                     	;# 
   286  018D                     	;# 
   287                           
   288                           	psect	strings
   289  007E                     __pstrings:
   290  007E                     stringtab:
   291  007E                     __stringtab:
   292  007E                     stringcode:	
   293                           ;	String table - string pointers are 1 byte each
   294                           
   295  007E                     stringdir:
   296  007E  3000               	movlw	high stringdir
   297  007F  008A               	movwf	10
   298  0080  0804               	movf	4,w
   299  0081  0A84               	incf	4,f
   300  0082  0782               	addwf	2,f
   301  0083                     __stringbase:
   302  0083  3400               	retlw	0
   303  0084                     __end_of__stringtab:
   304  0084                     main@msg:
   305  0084  3448               	retlw	72
   306  0085  346F               	retlw	111
   307  0086  346C               	retlw	108
   308  0087  3461               	retlw	97
   309  0088  3420               	retlw	32
   310  0089  346D               	retlw	109
   311  008A  3475               	retlw	117
   312  008B  346E               	retlw	110
   313  008C  3464               	retlw	100
   314  008D  346F               	retlw	111
   315  008E  3421               	retlw	33
   316  008F  3400               	retlw	0
   317  0090                     __end_ofmain@msg:
   318  000C                     _PIR1bits	set	12
   319  001F                     _ADCON0bits	set	31
   320  0001                     _TMR0	set	1
   321  000B                     _INTCONbits	set	11
   322  0009                     _PORTE	set	9
   323  0007                     _PORTC	set	7
   324  0008                     _PORTD	set	8
   325  0005                     _PORTA	set	5
   326  0038                     _RC0	set	56
   327  0039                     _RC1	set	57
   328  008C                     _PIE1bits	set	140
   329  009F                     _ADCON1bits	set	159
   330  008F                     _OSCCONbits	set	143
   331  0096                     _IOCBbits	set	150
   332  0095                     _WPUBbits	set	149
   333  0081                     _OPTION_REGbits	set	129
   334  0089                     _TRISE	set	137
   335  0088                     _TRISD	set	136
   336  0087                     _TRISC	set	135
   337  0086                     _TRISB	set	134
   338  0085                     _TRISA	set	133
   339  0438                     _TRISC0	set	1080
   340  0439                     _TRISC1	set	1081
   341  0189                     _ANSELH	set	393
   342  0188                     _ANSEL	set	392
   343                           
   344                           	psect	cinit
   345  000F                     start_initialization:	
   346                           ; #config settings
   347                           
   348  000F                     __initialization:
   349  000F                     end_of_initialization:	
   350                           ;End of C runtime variable initialization code
   351                           
   352  000F                     __end_of__initialization:
   353  000F  0183               	clrf	3
   354  0010  120A  118A  286A   	ljmp	_main	;jump to C main() function
   355                           
   356                           	psect	cstackCOMMON
   357  0070                     __pcstackCOMMON:
   358  0070                     ?_Iniciar_LCD:
   359  0070                     ?_Limpiar_pantallaLCD:	
   360                           ; 1 bytes @ 0x0
   361                           
   362  0070                     ?_Escribir_stringLCD:	
   363                           ; 1 bytes @ 0x0
   364                           
   365  0070                     ?_isr:	
   366                           ; 1 bytes @ 0x0
   367                           
   368  0070                     ??_isr:	
   369                           ; 1 bytes @ 0x0
   370                           
   371  0070                     ?_main:	
   372                           ; 1 bytes @ 0x0
   373                           
   374  0070                     ?_prender_ELCD:	
   375                           ; 1 bytes @ 0x0
   376                           
   377  0070                     ?_Escribir_comandoLCD:	
   378                           ; 1 bytes @ 0x0
   379                           
   380  0070                     ?_Escribir_datosLCD:	
   381                           ; 1 bytes @ 0x0
   382                           
   383                           
   384                           ; 1 bytes @ 0x0
   385  0070                     	ds	2
   386  0072                     ??_prender_ELCD:
   387                           
   388                           ; 1 bytes @ 0x2
   389  0072                     	ds	1
   390  0073                     ??_Escribir_comandoLCD:
   391  0073                     ??_Escribir_datosLCD:	
   392                           ; 1 bytes @ 0x3
   393                           
   394  0073                     Escribir_comandoLCD@Comando:	
   395                           ; 1 bytes @ 0x3
   396                           
   397  0073                     Escribir_datosLCD@LCDchar:	
   398                           ; 1 bytes @ 0x3
   399                           
   400                           
   401                           ; 1 bytes @ 0x3
   402  0073                     	ds	1
   403  0074                     ??_Iniciar_LCD:
   404  0074                     ??_Limpiar_pantallaLCD:	
   405                           ; 1 bytes @ 0x4
   406                           
   407  0074                     ??_Escribir_stringLCD:	
   408                           ; 1 bytes @ 0x4
   409                           
   410                           
   411                           ; 1 bytes @ 0x4
   412  0074                     	ds	1
   413  0075                     Escribir_stringLCD@d:
   414                           
   415                           ; 1 bytes @ 0x5
   416  0075                     	ds	1
   417  0076                     ??_main:
   418                           
   419                           	psect	maintext
   420  006A                     __pmaintext:	
   421                           ; 1 bytes @ 0x6
   422 ;;
   423 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   424 ;;
   425 ;; *************** function _main *****************
   426 ;; Defined at:
   427 ;;		line 60 in file "LAB2.c"
   428 ;; Parameters:    Size  Location     Type
   429 ;;		None
   430 ;; Auto vars:     Size  Location     Type
   431 ;;		None
   432 ;; Return value:  Size  Location     Type
   433 ;;                  1    wreg      void 
   434 ;; Registers used:
   435 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   436 ;; Tracked objects:
   437 ;;		On entry : B00/0
   438 ;;		On exit  : 0/0
   439 ;;		Unchanged: 0/0
   440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   441 ;;      Params:         0       0       0       0       0
   442 ;;      Locals:         0       0       0       0       0
   443 ;;      Temps:          0       0       0       0       0
   444 ;;      Totals:         0       0       0       0       0
   445 ;;Total ram usage:        0 bytes
   446 ;; Hardware stack levels required when called: 4
   447 ;; This function calls:
   448 ;;		_Escribir_stringLCD
   449 ;;		_Iniciar_LCD
   450 ;;		_Limpiar_pantallaLCD
   451 ;; This function is called by:
   452 ;;		Startup code after reset
   453 ;; This function uses a non-reentrant model
   454 ;;
   455                           
   456                           
   457                           ;psect for function _main
   458  006A                     _main:
   459  006A                     l844:	
   460                           ;incstack = 0
   461                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   462                           
   463                           
   464                           ;LAB2.c: 61:     Iniciar_LCD();
   465  006A  120A  118A  2013  120A  118A  	fcall	_Iniciar_LCD
   466                           
   467                           ;LAB2.c: 62:     const char msg[] = "Hola mundo!";;LAB2.c: 63:     Limpiar_pantallaLCD()
      +                          ;
   468  006F  120A  118A  2090  120A  118A  	fcall	_Limpiar_pantallaLCD
   469  0074                     l846:
   470                           
   471                           ;LAB2.c: 64:     Escribir_stringLCD(msg);
   472  0074  3001               	movlw	(low ((main@msg-__stringbase)| (0+32768)))& (0+255)
   473  0075  120A  118A  2036  120A  118A  	fcall	_Escribir_stringLCD
   474  007A                     l62:	
   475                           ;LAB2.c: 65:     while(1){
   476                           
   477  007A                     l63:	
   478                           ;LAB2.c: 67:     }
   479                           
   480  007A  287A               	goto	l62
   481  007B  120A  118A  280C   	ljmp	start
   482  007E                     __end_of_main:
   483                           
   484                           	psect	text1
   485  0090                     __ptext1:	
   486 ;; *************** function _Limpiar_pantallaLCD *****************
   487 ;; Defined at:
   488 ;;		line 52 in file "LCD.c"
   489 ;; Parameters:    Size  Location     Type
   490 ;;		None
   491 ;; Auto vars:     Size  Location     Type
   492 ;;		None
   493 ;; Return value:  Size  Location     Type
   494 ;;                  1    wreg      void 
   495 ;; Registers used:
   496 ;;		wreg, status,2, status,0, pclath, cstack
   497 ;; Tracked objects:
   498 ;;		On entry : 0/0
   499 ;;		On exit  : 0/0
   500 ;;		Unchanged: 0/0
   501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   502 ;;      Params:         0       0       0       0       0
   503 ;;      Locals:         0       0       0       0       0
   504 ;;      Temps:          2       0       0       0       0
   505 ;;      Totals:         2       0       0       0       0
   506 ;;Total ram usage:        2 bytes
   507 ;; Hardware stack levels used: 1
   508 ;; Hardware stack levels required when called: 3
   509 ;; This function calls:
   510 ;;		_Escribir_comandoLCD
   511 ;; This function is called by:
   512 ;;		_main
   513 ;; This function uses a non-reentrant model
   514 ;;
   515                           
   516                           
   517                           ;psect for function _Limpiar_pantallaLCD
   518  0090                     _Limpiar_pantallaLCD:
   519  0090                     l736:	
   520                           ;incstack = 0
   521                           ; Regs used in _Limpiar_pantallaLCD: [wreg+status,2+status,0+pclath+cstack]
   522                           
   523                           
   524                           ;LCD.c: 53:     Escribir_comandoLCD(0x01);
   525  0090  3001               	movlw	1
   526  0091  120A  118A  20A0  120A  118A  	fcall	_Escribir_comandoLCD
   527  0096                     l738:
   528                           
   529                           ;LCD.c: 54:     _delay((unsigned long)((4)*(8000000/4000.0)));
   530  0096  300B               	movlw	11
   531  0097  00F5               	movwf	??_Limpiar_pantallaLCD+1
   532  0098  3062               	movlw	98
   533  0099  00F4               	movwf	??_Limpiar_pantallaLCD
   534  009A                     u37:
   535  009A  0BF4               	decfsz	??_Limpiar_pantallaLCD,f
   536  009B  289A               	goto	u37
   537  009C  0BF5               	decfsz	??_Limpiar_pantallaLCD+1,f
   538  009D  289A               	goto	u37
   539  009E  0000               	nop
   540  009F                     l106:
   541  009F  0008               	return
   542  00A0                     __end_of_Limpiar_pantallaLCD:
   543                           
   544                           	psect	text2
   545  0013                     __ptext2:	
   546 ;; *************** function _Iniciar_LCD *****************
   547 ;; Defined at:
   548 ;;		line 32 in file "LCD.c"
   549 ;; Parameters:    Size  Location     Type
   550 ;;		None
   551 ;; Auto vars:     Size  Location     Type
   552 ;;		None
   553 ;; Return value:  Size  Location     Type
   554 ;;                  1    wreg      void 
   555 ;; Registers used:
   556 ;;		wreg, status,2, status,0, pclath, cstack
   557 ;; Tracked objects:
   558 ;;		On entry : 0/0
   559 ;;		On exit  : 0/0
   560 ;;		Unchanged: 0/0
   561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   562 ;;      Params:         0       0       0       0       0
   563 ;;      Locals:         0       0       0       0       0
   564 ;;      Temps:          0       0       0       0       0
   565 ;;      Totals:         0       0       0       0       0
   566 ;;Total ram usage:        0 bytes
   567 ;; Hardware stack levels used: 1
   568 ;; Hardware stack levels required when called: 3
   569 ;; This function calls:
   570 ;;		_Escribir_comandoLCD
   571 ;; This function is called by:
   572 ;;		_main
   573 ;; This function uses a non-reentrant model
   574 ;;
   575                           
   576                           
   577                           ;psect for function _Iniciar_LCD
   578  0013                     _Iniciar_LCD:
   579  0013                     l720:	
   580                           ;incstack = 0
   581                           ; Regs used in _Iniciar_LCD: [wreg+status,2+status,0+pclath+cstack]
   582                           
   583                           
   584                           ;LCD.c: 33:     RC1 = 0;
   585  0013  1283               	bcf	3,5	;RP0=0, select bank0
   586  0014  1303               	bcf	3,6	;RP1=0, select bank0
   587  0015  1087               	bcf	7,1	;volatile
   588                           
   589                           ;LCD.c: 34:     RC0 = 0;
   590  0016  1007               	bcf	7,0	;volatile
   591  0017                     l722:
   592                           
   593                           ;LCD.c: 35:     PORTD = 0;
   594  0017  0188               	clrf	8	;volatile
   595  0018                     l724:
   596                           
   597                           ;LCD.c: 36:     TRISC1 = 0;
   598  0018  1683               	bsf	3,5	;RP0=1, select bank1
   599  0019  1303               	bcf	3,6	;RP1=0, select bank1
   600  001A  1087               	bcf	7,1	;volatile
   601  001B                     l726:
   602                           
   603                           ;LCD.c: 37:     TRISC0 = 0;
   604  001B  1007               	bcf	7,0	;volatile
   605                           
   606                           ;LCD.c: 38:     TRISD = 0;
   607  001C  0188               	clrf	8	;volatile
   608  001D                     l728:
   609                           
   610                           ;LCD.c: 40:     Escribir_comandoLCD(0x38);
   611  001D  3038               	movlw	56
   612  001E  120A  118A  20A0  120A  118A  	fcall	_Escribir_comandoLCD
   613  0023                     l730:
   614                           
   615                           ;LCD.c: 41:     Escribir_comandoLCD(0x0C);
   616  0023  300C               	movlw	12
   617  0024  120A  118A  20A0  120A  118A  	fcall	_Escribir_comandoLCD
   618  0029                     l732:
   619                           
   620                           ;LCD.c: 42:     Escribir_comandoLCD(0x01);
   621  0029  3001               	movlw	1
   622  002A  120A  118A  20A0  120A  118A  	fcall	_Escribir_comandoLCD
   623  002F                     l734:
   624                           
   625                           ;LCD.c: 43:     Escribir_comandoLCD(0x06);
   626  002F  3006               	movlw	6
   627  0030  120A  118A  20A0  120A  118A  	fcall	_Escribir_comandoLCD
   628  0035                     l97:
   629  0035  0008               	return
   630  0036                     __end_of_Iniciar_LCD:
   631                           
   632                           	psect	text3
   633  00A0                     __ptext3:	
   634 ;; *************** function _Escribir_comandoLCD *****************
   635 ;; Defined at:
   636 ;;		line 18 in file "LCD.c"
   637 ;; Parameters:    Size  Location     Type
   638 ;;  Comando         1    wreg     unsigned char 
   639 ;; Auto vars:     Size  Location     Type
   640 ;;  Comando         1    3[COMMON] unsigned char 
   641 ;; Return value:  Size  Location     Type
   642 ;;                  1    wreg      void 
   643 ;; Registers used:
   644 ;;		wreg, status,2, status,0, pclath, cstack
   645 ;; Tracked objects:
   646 ;;		On entry : 0/0
   647 ;;		On exit  : 0/0
   648 ;;		Unchanged: 0/0
   649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   650 ;;      Params:         0       0       0       0       0
   651 ;;      Locals:         1       0       0       0       0
   652 ;;      Temps:          0       0       0       0       0
   653 ;;      Totals:         1       0       0       0       0
   654 ;;Total ram usage:        1 bytes
   655 ;; Hardware stack levels used: 1
   656 ;; Hardware stack levels required when called: 2
   657 ;; This function calls:
   658 ;;		_prender_ELCD
   659 ;; This function is called by:
   660 ;;		_Iniciar_LCD
   661 ;;		_Limpiar_pantallaLCD
   662 ;; This function uses a non-reentrant model
   663 ;;
   664                           
   665                           
   666                           ;psect for function _Escribir_comandoLCD
   667  00A0                     _Escribir_comandoLCD:
   668                           
   669                           ;incstack = 0
   670                           ; Regs used in _Escribir_comandoLCD: [wreg+status,2+status,0+pclath+cstack]
   671                           ;Escribir_comandoLCD@Comando stored from wreg
   672  00A0  00F3               	movwf	Escribir_comandoLCD@Comando
   673  00A1                     l708:
   674                           
   675                           ;LCD.c: 19:     RC0 = 0;
   676  00A1  1283               	bcf	3,5	;RP0=0, select bank0
   677  00A2  1303               	bcf	3,6	;RP1=0, select bank0
   678  00A3  1007               	bcf	7,0	;volatile
   679  00A4                     l710:
   680                           
   681                           ;LCD.c: 20:     PORTD = Comando;
   682  00A4  0873               	movf	Escribir_comandoLCD@Comando,w
   683  00A5  0088               	movwf	8	;volatile
   684  00A6                     l712:
   685                           
   686                           ;LCD.c: 22:     prender_ELCD();
   687  00A6  120A  118A  2055  120A  118A  	fcall	_prender_ELCD
   688  00AB                     l91:
   689  00AB  0008               	return
   690  00AC                     __end_of_Escribir_comandoLCD:
   691                           
   692                           	psect	text4
   693  0036                     __ptext4:	
   694 ;; *************** function _Escribir_stringLCD *****************
   695 ;; Defined at:
   696 ;;		line 46 in file "LCD.c"
   697 ;; Parameters:    Size  Location     Type
   698 ;;  d               1    wreg     PTR const unsigned char 
   699 ;;		 -> main@msg(12), 
   700 ;; Auto vars:     Size  Location     Type
   701 ;;  d               1    5[COMMON] PTR const unsigned char 
   702 ;;		 -> main@msg(12), 
   703 ;; Return value:  Size  Location     Type
   704 ;;                  1    wreg      void 
   705 ;; Registers used:
   706 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   707 ;; Tracked objects:
   708 ;;		On entry : 0/0
   709 ;;		On exit  : 0/0
   710 ;;		Unchanged: 0/0
   711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   712 ;;      Params:         0       0       0       0       0
   713 ;;      Locals:         1       0       0       0       0
   714 ;;      Temps:          1       0       0       0       0
   715 ;;      Totals:         2       0       0       0       0
   716 ;;Total ram usage:        2 bytes
   717 ;; Hardware stack levels used: 1
   718 ;; Hardware stack levels required when called: 3
   719 ;; This function calls:
   720 ;;		_Escribir_datosLCD
   721 ;; This function is called by:
   722 ;;		_main
   723 ;; This function uses a non-reentrant model
   724 ;;
   725                           
   726                           
   727                           ;psect for function _Escribir_stringLCD
   728  0036                     _Escribir_stringLCD:
   729                           
   730                           ;incstack = 0
   731                           ; Regs used in _Escribir_stringLCD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   732                           ;Escribir_stringLCD@d stored from wreg
   733  0036  00F5               	movwf	Escribir_stringLCD@d
   734  0037                     l836:
   735                           
   736                           ;LCD.c: 47:     while(*d){
   737  0037  2848               	goto	l842
   738  0038                     l838:
   739                           
   740                           ;LCD.c: 48:         Escribir_datosLCD(*d++);
   741  0038  0875               	movf	Escribir_stringLCD@d,w
   742  0039  0084               	movwf	4
   743  003A  120A  118A  207E  120A  118A  	fcall	stringdir
   744  003F  120A  118A  20AC  120A  118A  	fcall	_Escribir_datosLCD
   745  0044                     l840:
   746  0044  3001               	movlw	1
   747  0045  00F4               	movwf	??_Escribir_stringLCD
   748  0046  0874               	movf	??_Escribir_stringLCD,w
   749  0047  07F5               	addwf	Escribir_stringLCD@d,f
   750  0048                     l842:
   751                           
   752                           ;LCD.c: 47:     while(*d){
   753  0048  0875               	movf	Escribir_stringLCD@d,w
   754  0049  0084               	movwf	4
   755  004A  120A  118A  207E  120A  118A  	fcall	stringdir
   756  004F  3A00               	xorlw	0
   757  0050  1D03               	skipz
   758  0051  2853               	goto	u21
   759  0052  2854               	goto	u20
   760  0053                     u21:
   761  0053  2838               	goto	l838
   762  0054                     u20:
   763  0054                     l103:
   764  0054  0008               	return
   765  0055                     __end_of_Escribir_stringLCD:
   766                           
   767                           	psect	text5
   768  00AC                     __ptext5:	
   769 ;; *************** function _Escribir_datosLCD *****************
   770 ;; Defined at:
   771 ;;		line 25 in file "LCD.c"
   772 ;; Parameters:    Size  Location     Type
   773 ;;  LCDchar         1    wreg     unsigned char 
   774 ;; Auto vars:     Size  Location     Type
   775 ;;  LCDchar         1    3[COMMON] unsigned char 
   776 ;; Return value:  Size  Location     Type
   777 ;;                  1    wreg      void 
   778 ;; Registers used:
   779 ;;		wreg, status,2, status,0, pclath, cstack
   780 ;; Tracked objects:
   781 ;;		On entry : 0/0
   782 ;;		On exit  : 0/0
   783 ;;		Unchanged: 0/0
   784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   785 ;;      Params:         0       0       0       0       0
   786 ;;      Locals:         1       0       0       0       0
   787 ;;      Temps:          0       0       0       0       0
   788 ;;      Totals:         1       0       0       0       0
   789 ;;Total ram usage:        1 bytes
   790 ;; Hardware stack levels used: 1
   791 ;; Hardware stack levels required when called: 2
   792 ;; This function calls:
   793 ;;		_prender_ELCD
   794 ;; This function is called by:
   795 ;;		_Escribir_stringLCD
   796 ;; This function uses a non-reentrant model
   797 ;;
   798                           
   799                           
   800                           ;psect for function _Escribir_datosLCD
   801  00AC                     _Escribir_datosLCD:
   802                           
   803                           ;incstack = 0
   804                           ; Regs used in _Escribir_datosLCD: [wreg+status,2+status,0+pclath+cstack]
   805                           ;Escribir_datosLCD@LCDchar stored from wreg
   806  00AC  00F3               	movwf	Escribir_datosLCD@LCDchar
   807  00AD                     l714:
   808                           
   809                           ;LCD.c: 26:     RC0 = 1;
   810  00AD  1283               	bcf	3,5	;RP0=0, select bank0
   811  00AE  1303               	bcf	3,6	;RP1=0, select bank0
   812  00AF  1407               	bsf	7,0	;volatile
   813  00B0                     l716:
   814                           
   815                           ;LCD.c: 27:     PORTD = LCDchar;
   816  00B0  0873               	movf	Escribir_datosLCD@LCDchar,w
   817  00B1  0088               	movwf	8	;volatile
   818  00B2                     l718:
   819                           
   820                           ;LCD.c: 29:     prender_ELCD();
   821  00B2  120A  118A  2055  120A  118A  	fcall	_prender_ELCD
   822  00B7                     l94:
   823  00B7  0008               	return
   824  00B8                     __end_of_Escribir_datosLCD:
   825                           
   826                           	psect	text6
   827  0055                     __ptext6:	
   828 ;; *************** function _prender_ELCD *****************
   829 ;; Defined at:
   830 ;;		line 11 in file "LCD.c"
   831 ;; Parameters:    Size  Location     Type
   832 ;;		None
   833 ;; Auto vars:     Size  Location     Type
   834 ;;		None
   835 ;; Return value:  Size  Location     Type
   836 ;;                  1    wreg      void 
   837 ;; Registers used:
   838 ;;		wreg
   839 ;; Tracked objects:
   840 ;;		On entry : 0/0
   841 ;;		On exit  : 0/0
   842 ;;		Unchanged: 0/0
   843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   844 ;;      Params:         0       0       0       0       0
   845 ;;      Locals:         0       0       0       0       0
   846 ;;      Temps:          1       0       0       0       0
   847 ;;      Totals:         1       0       0       0       0
   848 ;;Total ram usage:        1 bytes
   849 ;; Hardware stack levels used: 1
   850 ;; Hardware stack levels required when called: 1
   851 ;; This function calls:
   852 ;;		Nothing
   853 ;; This function is called by:
   854 ;;		_Escribir_comandoLCD
   855 ;;		_Escribir_datosLCD
   856 ;; This function uses a non-reentrant model
   857 ;;
   858                           
   859                           
   860                           ;psect for function _prender_ELCD
   861  0055                     _prender_ELCD:
   862  0055                     l702:	
   863                           ;incstack = 0
   864                           ; Regs used in _prender_ELCD: [wreg]
   865                           
   866                           
   867                           ;LCD.c: 12:     RC1 = 1;
   868  0055  1283               	bcf	3,5	;RP0=0, select bank0
   869  0056  1303               	bcf	3,6	;RP1=0, select bank0
   870  0057  1487               	bsf	7,1	;volatile
   871  0058                     l704:
   872                           
   873                           ;LCD.c: 13:     _delay((unsigned long)((500)*(8000000/4000000.0)));
   874  0058  30C7               	movlw	199
   875  0059  00F2               	movwf	??_prender_ELCD
   876  005A                     u47:
   877  005A  285B               	nop2
   878  005B  0BF2               	decfsz	??_prender_ELCD,f
   879  005C  285A               	goto	u47
   880  005D  285E               	nop2
   881  005E  285F               	nop2
   882  005F                     l706:
   883                           
   884                           ;LCD.c: 14:     RC1 = 0;
   885  005F  1283               	bcf	3,5	;RP0=0, select bank0
   886  0060  1303               	bcf	3,6	;RP1=0, select bank0
   887  0061  1087               	bcf	7,1	;volatile
   888                           
   889                           ;LCD.c: 15:     _delay((unsigned long)((500)*(8000000/4000000.0)));
   890  0062  30C7               	movlw	199
   891  0063  00F2               	movwf	??_prender_ELCD
   892  0064                     u57:
   893  0064  2865               	nop2
   894  0065  0BF2               	decfsz	??_prender_ELCD,f
   895  0066  2864               	goto	u57
   896  0067  2868               	nop2
   897  0068  2869               	nop2
   898  0069                     l88:
   899  0069  0008               	return
   900  006A                     __end_of_prender_ELCD:
   901                           
   902                           	psect	text7
   903  00B8                     __ptext7:	
   904 ;; *************** function _isr *****************
   905 ;; Defined at:
   906 ;;		line 55 in file "LAB2.c"
   907 ;; Parameters:    Size  Location     Type
   908 ;;		None
   909 ;; Auto vars:     Size  Location     Type
   910 ;;		None
   911 ;; Return value:  Size  Location     Type
   912 ;;                  1    wreg      void 
   913 ;; Registers used:
   914 ;;		None
   915 ;; Tracked objects:
   916 ;;		On entry : 0/0
   917 ;;		On exit  : 0/0
   918 ;;		Unchanged: 0/0
   919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   920 ;;      Params:         0       0       0       0       0
   921 ;;      Locals:         0       0       0       0       0
   922 ;;      Temps:          2       0       0       0       0
   923 ;;      Totals:         2       0       0       0       0
   924 ;;Total ram usage:        2 bytes
   925 ;; Hardware stack levels used: 1
   926 ;; This function calls:
   927 ;;		Nothing
   928 ;; This function is called by:
   929 ;;		Interrupt level 1
   930 ;; This function uses a non-reentrant model
   931 ;;
   932                           
   933                           
   934                           ;psect for function _isr
   935  00B8                     _isr:
   936  00B8                     i1l55:
   937  00B8  0871               	movf	??_isr+1,w
   938  00B9  008A               	movwf	10
   939  00BA  0E70               	swapf	??_isr,w
   940  00BB  0083               	movwf	3
   941  00BC  0EFE               	swapf	btemp,f
   942  00BD  0E7E               	swapf	btemp,w
   943  00BE  0009               	retfie
   944  00BF                     __end_of_isr:
   945  007E                     btemp	set	126	;btemp
   946  007E                     wtemp0	set	126
   947                           
   948                           	psect	intentry
   949  0004                     __pintentry:	
   950                           ;incstack = 0
   951                           ; Regs used in _isr: []
   952                           
   953  0004                     interrupt_function:
   954  007E                     saved_w	set	btemp
   955  0004  00FE               	movwf	btemp
   956  0005  0E03               	swapf	3,w
   957  0006  00F0               	movwf	??_isr
   958  0007  080A               	movf	10,w
   959  0008  00F1               	movwf	??_isr+1
   960  0009  120A  118A  28B8   	ljmp	_isr
   961                           
   962                           	psect	config
   963                           
   964                           ;Config register CONFIG1 @ 0x2007
   965                           ;	Oscillator Selection bits
   966                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
   967                           ;	Watchdog Timer Enable bit
   968                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   969                           ;	Power-up Timer Enable bit
   970                           ;	PWRTE = OFF, PWRT disabled
   971                           ;	RE3/MCLR pin function select bit
   972                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
   973                           ;	Code Protection bit
   974                           ;	CP = OFF, Program memory code protection is disabled
   975                           ;	Data Code Protection bit
   976                           ;	CPD = OFF, Data memory code protection is disabled
   977                           ;	Brown Out Reset Selection bits
   978                           ;	BOREN = OFF, BOR disabled
   979                           ;	Internal External Switchover bit
   980                           ;	IESO = OFF, Internal/External Switchover mode is disabled
   981                           ;	Fail-Safe Clock Monitor Enabled bit
   982                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
   983                           ;	Low Voltage Programming Enable bit
   984                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   985                           ;	In-Circuit Debugger Mode bit
   986                           ;	DEBUG = 0x1, unprogrammed default
   987  2007                     	org	8199
   988  2007  20D4               	dw	8404
   989                           
   990                           ;Config register CONFIG2 @ 0x2008
   991                           ;	Brown-out Reset Selection bit
   992                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
   993                           ;	Flash Program Memory Self Write Enable bits
   994                           ;	WRT = OFF, Write protection off
   995  2008                     	org	8200
   996  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    12
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       6
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Escribir_stringLCD@d	PTR const unsigned char  size(1) Largest target is 12
		 -> main@msg(CODE[12]), 


Critical Paths under _main in COMMON

    _main->_Escribir_stringLCD
    _main->_Limpiar_pantallaLCD
    _Limpiar_pantallaLCD->_Escribir_comandoLCD
    _Iniciar_LCD->_Escribir_comandoLCD
    _Escribir_comandoLCD->_prender_ELCD
    _Escribir_stringLCD->_Escribir_datosLCD
    _Escribir_datosLCD->_prender_ELCD

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     123
                 _Escribir_stringLCD
                        _Iniciar_LCD
                _Limpiar_pantallaLCD
 ---------------------------------------------------------------------------------
 (1) _Limpiar_pantallaLCD                                  2     2      0      15
                                              4 COMMON     2     2      0
                _Escribir_comandoLCD
 ---------------------------------------------------------------------------------
 (1) _Iniciar_LCD                                          0     0      0      15
                _Escribir_comandoLCD
 ---------------------------------------------------------------------------------
 (2) _Escribir_comandoLCD                                  1     1      0      15
                                              3 COMMON     1     1      0
                       _prender_ELCD
 ---------------------------------------------------------------------------------
 (1) _Escribir_stringLCD                                   2     2      0      93
                                              4 COMMON     2     2      0
                  _Escribir_datosLCD
 ---------------------------------------------------------------------------------
 (2) _Escribir_datosLCD                                    1     1      0      15
                                              3 COMMON     1     1      0
                       _prender_ELCD
 ---------------------------------------------------------------------------------
 (3) _prender_ELCD                                         1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Escribir_stringLCD
     _Escribir_datosLCD
       _prender_ELCD
   _Iniciar_LCD
     _Escribir_comandoLCD
       _prender_ELCD
   _Limpiar_pantallaLCD
     _Escribir_comandoLCD

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       6       1       42.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Mon Jan 31 18:56:20 2022

                           pc 0002                            l62 007A                            l63 007A  
                          l91 00AB                            l94 00B7                            l88 0069  
                          l97 0035                            u20 0054                            u21 0053  
                          u37 009A                            u47 005A                            u57 0064  
                          fsr 0004                           l103 0054                           l106 009F  
                         l702 0055                           l710 00A4                           l704 0058  
                         l712 00A6                           l720 0013                           l706 005F  
                         l714 00AD                           l730 0023                           l722 0017  
                         l716 00B0                           l708 00A1                           l732 0029  
                         l724 0018                           l718 00B2                           l734 002F  
                         l726 001B                           l840 0044                           l728 001D  
                         l736 0090                           l842 0048                           l738 0096  
                         l836 0037                           l844 006A                           l838 0038  
                         l846 0074                           _RC0 0038                           _RC1 0039  
                         _isr 00B8                           fsr0 0004                          ?_isr 0070  
                        i1l55 00B8                          _TMR0 0001                 ??_Iniciar_LCD 0074  
                        _main 006A                          btemp 007E                          start 000C  
                       ??_isr 0070    __end_of_Escribir_stringLCD 0055                         ?_main 0070  
                       _ANSEL 0188                         _PORTA 0005                         _PORTC 0007  
                       _PORTD 0008                         _PORTE 0009                         _TRISA 0085  
                       _TRISB 0086                         _TRISC 0087                         _TRISD 0088  
                       _TRISE 0089           _Limpiar_pantallaLCD 0090                         pclath 000A  
                       status 0003                         wtemp0 007E               __end_ofmain@msg 0090  
             __initialization 000F           __end_of_Iniciar_LCD 0036                  __end_of_main 007E  
           _Escribir_datosLCD 00AC          ?_Limpiar_pantallaLCD 0070            ?_Escribir_datosLCD 0070  
                      ??_main 0076           ??_Escribir_datosLCD 0073                        _ANSELH 0189  
                      _TRISC0 0438                        _TRISC1 0439     __end_of_Escribir_datosLCD 00B8  
       ??_Limpiar_pantallaLCD 0074                        saved_w 007E       __end_of__initialization 000F  
                 _Iniciar_LCD 0013                __pcstackCOMMON 0070                _OPTION_REGbits 0081  
  __size_of_Escribir_datosLCD 000C                    __pmaintext 006A                    __pintentry 0004  
__size_of_Escribir_comandoLCD 000C      Escribir_datosLCD@LCDchar 0073            _Escribir_stringLCD 0036  
                  __stringtab 007E           ?_Escribir_stringLCD 0070                       __ptext1 0090  
                     __ptext2 0013                       __ptext3 00A0                       __ptext4 0036  
                     __ptext5 00AC                       __ptext6 0055                       __ptext7 00B8  
        ??_Escribir_stringLCD 0074                  __size_of_isr 0007                 ?_prender_ELCD 0070  
                     main@msg 0084          end_of_initialization 000F                ??_prender_ELCD 0072  
                ?_Iniciar_LCD 0070   __end_of_Limpiar_pantallaLCD 00A0           start_initialization 000F  
                 __end_of_isr 00BF           _Escribir_comandoLCD 00A0    Escribir_comandoLCD@Comando 0073  
        ?_Escribir_comandoLCD 0070                     ___latbits 0002          __end_of_prender_ELCD 006A  
       ??_Escribir_comandoLCD 0073                     __pstrings 007E             interrupt_function 0004  
                    _IOCBbits 0096                      _PIE1bits 008C          __size_of_Iniciar_LCD 0023  
                    _PIR1bits 000C                    _ADCON0bits 001F                   __stringbase 0083  
                  _ADCON1bits 009F   __size_of_Escribir_stringLCD 001F                      _WPUBbits 0095  
         Escribir_stringLCD@d 0075            __end_of__stringtab 0084         __size_of_prender_ELCD 0015  
               __size_of_main 0014  __size_of_Limpiar_pantallaLCD 0010                    _INTCONbits 000B  
                _prender_ELCD 0055                      intlevel1 0000                     stringcode 007E  
                  _OSCCONbits 008F                      stringdir 007E                      stringtab 007E  
 __end_of_Escribir_comandoLCD 00AC  
