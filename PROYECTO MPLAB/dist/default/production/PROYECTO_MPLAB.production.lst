

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Fri Feb 04 22:47:56 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    32                           	dabs	1,0x7E,2
    33  0000                     
    34                           ; Version 2.20
    35                           ; Generated 12/02/2020 GMT
    36                           ; 
    37                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F887 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     	;# 
    69  0001                     	;# 
    70  0002                     	;# 
    71  0003                     	;# 
    72  0004                     	;# 
    73  0005                     	;# 
    74  0006                     	;# 
    75  0007                     	;# 
    76  0008                     	;# 
    77  0009                     	;# 
    78  000A                     	;# 
    79  000B                     	;# 
    80  000C                     	;# 
    81  000D                     	;# 
    82  000E                     	;# 
    83  000E                     	;# 
    84  000F                     	;# 
    85  0010                     	;# 
    86  0011                     	;# 
    87  0012                     	;# 
    88  0013                     	;# 
    89  0014                     	;# 
    90  0015                     	;# 
    91  0015                     	;# 
    92  0016                     	;# 
    93  0017                     	;# 
    94  0018                     	;# 
    95  0019                     	;# 
    96  001A                     	;# 
    97  001B                     	;# 
    98  001B                     	;# 
    99  001C                     	;# 
   100  001D                     	;# 
   101  001E                     	;# 
   102  001F                     	;# 
   103  0081                     	;# 
   104  0085                     	;# 
   105  0086                     	;# 
   106  0087                     	;# 
   107  0088                     	;# 
   108  0089                     	;# 
   109  008C                     	;# 
   110  008D                     	;# 
   111  008E                     	;# 
   112  008F                     	;# 
   113  0090                     	;# 
   114  0091                     	;# 
   115  0092                     	;# 
   116  0093                     	;# 
   117  0093                     	;# 
   118  0093                     	;# 
   119  0094                     	;# 
   120  0095                     	;# 
   121  0096                     	;# 
   122  0097                     	;# 
   123  0098                     	;# 
   124  0099                     	;# 
   125  009A                     	;# 
   126  009B                     	;# 
   127  009C                     	;# 
   128  009D                     	;# 
   129  009E                     	;# 
   130  009F                     	;# 
   131  0105                     	;# 
   132  0107                     	;# 
   133  0108                     	;# 
   134  0109                     	;# 
   135  010C                     	;# 
   136  010C                     	;# 
   137  010D                     	;# 
   138  010E                     	;# 
   139  010F                     	;# 
   140  0185                     	;# 
   141  0187                     	;# 
   142  0188                     	;# 
   143  0189                     	;# 
   144  018C                     	;# 
   145  018D                     	;# 
   146  0000                     	;# 
   147  0001                     	;# 
   148  0002                     	;# 
   149  0003                     	;# 
   150  0004                     	;# 
   151  0005                     	;# 
   152  0006                     	;# 
   153  0007                     	;# 
   154  0008                     	;# 
   155  0009                     	;# 
   156  000A                     	;# 
   157  000B                     	;# 
   158  000C                     	;# 
   159  000D                     	;# 
   160  000E                     	;# 
   161  000E                     	;# 
   162  000F                     	;# 
   163  0010                     	;# 
   164  0011                     	;# 
   165  0012                     	;# 
   166  0013                     	;# 
   167  0014                     	;# 
   168  0015                     	;# 
   169  0015                     	;# 
   170  0016                     	;# 
   171  0017                     	;# 
   172  0018                     	;# 
   173  0019                     	;# 
   174  001A                     	;# 
   175  001B                     	;# 
   176  001B                     	;# 
   177  001C                     	;# 
   178  001D                     	;# 
   179  001E                     	;# 
   180  001F                     	;# 
   181  0081                     	;# 
   182  0085                     	;# 
   183  0086                     	;# 
   184  0087                     	;# 
   185  0088                     	;# 
   186  0089                     	;# 
   187  008C                     	;# 
   188  008D                     	;# 
   189  008E                     	;# 
   190  008F                     	;# 
   191  0090                     	;# 
   192  0091                     	;# 
   193  0092                     	;# 
   194  0093                     	;# 
   195  0093                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0095                     	;# 
   199  0096                     	;# 
   200  0097                     	;# 
   201  0098                     	;# 
   202  0099                     	;# 
   203  009A                     	;# 
   204  009B                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  009F                     	;# 
   209  0105                     	;# 
   210  0107                     	;# 
   211  0108                     	;# 
   212  0109                     	;# 
   213  010C                     	;# 
   214  010C                     	;# 
   215  010D                     	;# 
   216  010E                     	;# 
   217  010F                     	;# 
   218  0185                     	;# 
   219  0187                     	;# 
   220  0188                     	;# 
   221  0189                     	;# 
   222  018C                     	;# 
   223  018D                     	;# 
   224  0000                     	;# 
   225  0001                     	;# 
   226  0002                     	;# 
   227  0003                     	;# 
   228  0004                     	;# 
   229  0005                     	;# 
   230  0006                     	;# 
   231  0007                     	;# 
   232  0008                     	;# 
   233  0009                     	;# 
   234  000A                     	;# 
   235  000B                     	;# 
   236  000C                     	;# 
   237  000D                     	;# 
   238  000E                     	;# 
   239  000E                     	;# 
   240  000F                     	;# 
   241  0010                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0013                     	;# 
   245  0014                     	;# 
   246  0015                     	;# 
   247  0015                     	;# 
   248  0016                     	;# 
   249  0017                     	;# 
   250  0018                     	;# 
   251  0019                     	;# 
   252  001A                     	;# 
   253  001B                     	;# 
   254  001B                     	;# 
   255  001C                     	;# 
   256  001D                     	;# 
   257  001E                     	;# 
   258  001F                     	;# 
   259  0081                     	;# 
   260  0085                     	;# 
   261  0086                     	;# 
   262  0087                     	;# 
   263  0088                     	;# 
   264  0089                     	;# 
   265  008C                     	;# 
   266  008D                     	;# 
   267  008E                     	;# 
   268  008F                     	;# 
   269  0090                     	;# 
   270  0091                     	;# 
   271  0092                     	;# 
   272  0093                     	;# 
   273  0093                     	;# 
   274  0093                     	;# 
   275  0094                     	;# 
   276  0095                     	;# 
   277  0096                     	;# 
   278  0097                     	;# 
   279  0098                     	;# 
   280  0099                     	;# 
   281  009A                     	;# 
   282  009B                     	;# 
   283  009C                     	;# 
   284  009D                     	;# 
   285  009E                     	;# 
   286  009F                     	;# 
   287  0105                     	;# 
   288  0107                     	;# 
   289  0108                     	;# 
   290  0109                     	;# 
   291  010C                     	;# 
   292  010C                     	;# 
   293  010D                     	;# 
   294  010E                     	;# 
   295  010F                     	;# 
   296  0185                     	;# 
   297  0187                     	;# 
   298  0188                     	;# 
   299  0189                     	;# 
   300  018C                     	;# 
   301  018D                     	;# 
   302  0000                     	;# 
   303  0001                     	;# 
   304  0002                     	;# 
   305  0003                     	;# 
   306  0004                     	;# 
   307  0005                     	;# 
   308  0006                     	;# 
   309  0007                     	;# 
   310  0008                     	;# 
   311  0009                     	;# 
   312  000A                     	;# 
   313  000B                     	;# 
   314  000C                     	;# 
   315  000D                     	;# 
   316  000E                     	;# 
   317  000E                     	;# 
   318  000F                     	;# 
   319  0010                     	;# 
   320  0011                     	;# 
   321  0012                     	;# 
   322  0013                     	;# 
   323  0014                     	;# 
   324  0015                     	;# 
   325  0015                     	;# 
   326  0016                     	;# 
   327  0017                     	;# 
   328  0018                     	;# 
   329  0019                     	;# 
   330  001A                     	;# 
   331  001B                     	;# 
   332  001B                     	;# 
   333  001C                     	;# 
   334  001D                     	;# 
   335  001E                     	;# 
   336  001F                     	;# 
   337  0081                     	;# 
   338  0085                     	;# 
   339  0086                     	;# 
   340  0087                     	;# 
   341  0088                     	;# 
   342  0089                     	;# 
   343  008C                     	;# 
   344  008D                     	;# 
   345  008E                     	;# 
   346  008F                     	;# 
   347  0090                     	;# 
   348  0091                     	;# 
   349  0092                     	;# 
   350  0093                     	;# 
   351  0093                     	;# 
   352  0093                     	;# 
   353  0094                     	;# 
   354  0095                     	;# 
   355  0096                     	;# 
   356  0097                     	;# 
   357  0098                     	;# 
   358  0099                     	;# 
   359  009A                     	;# 
   360  009B                     	;# 
   361  009C                     	;# 
   362  009D                     	;# 
   363  009E                     	;# 
   364  009F                     	;# 
   365  0105                     	;# 
   366  0107                     	;# 
   367  0108                     	;# 
   368  0109                     	;# 
   369  010C                     	;# 
   370  010C                     	;# 
   371  010D                     	;# 
   372  010E                     	;# 
   373  010F                     	;# 
   374  0185                     	;# 
   375  0187                     	;# 
   376  0188                     	;# 
   377  0189                     	;# 
   378  018C                     	;# 
   379  018D                     	;# 
   380                           
   381                           	psect	strings
   382  0439                     __pstrings:
   383  0439                     stringtab:
   384  0439                     __stringtab:
   385                           
   386                           ;	String table - string pointers are 1 byte each
   387  0439  1BFF               	btfsc	btemp+1,7
   388  043A  2C43               	ljmp	stringcode
   389  043B  1383               	bcf	3,7
   390  043C  187F               	btfsc	btemp+1,0
   391  043D  1783               	bsf	3,7
   392  043E  0800               	movf	0,w
   393  043F  0A84               	incf	4,f
   394  0440  1903               	skipnz
   395  0441  0AFF               	incf	btemp+1,f
   396  0442  0008               	return
   397  0443                     stringcode:
   398  0443                     stringdir:
   399  0443  3004               	movlw	high stringdir
   400  0444  008A               	movwf	10
   401  0445  0804               	movf	4,w
   402  0446  0A84               	incf	4,f
   403  0447  0782               	addwf	2,f
   404  0448                     __stringbase:
   405  0448  3400               	retlw	0
   406  0449                     __end_of__stringtab:
   407  0449                     _dpowers:
   408  0449  3401               	retlw	1
   409  044A  3400               	retlw	0
   410  044B  340A               	retlw	10
   411  044C  3400               	retlw	0
   412  044D  3464               	retlw	100
   413  044E  3400               	retlw	0
   414  044F  34E8               	retlw	232
   415  0450  3403               	retlw	3
   416  0451  3410               	retlw	16
   417  0452  3427               	retlw	39
   418  0453                     __end_of_dpowers:
   419  001E                     _ADRESH	set	30
   420  0008                     _PORTD	set	8
   421  0018                     _RCSTAbits	set	24
   422  000B                     _INTCONbits	set	11
   423  0006                     _PORTB	set	6
   424  0009                     _PORTE	set	9
   425  0005                     _PORTA	set	5
   426  001F                     _ADCON0bits	set	31
   427  001A                     _RCREG	set	26
   428  000C                     _PIR1bits	set	12
   429  003A                     _RC2	set	58
   430  0038                     _RC0	set	56
   431  0039                     _RC1	set	57
   432  009A                     _SPBRGH	set	154
   433  0099                     _SPBRG	set	153
   434  0098                     _TXSTAbits	set	152
   435  008C                     _PIE1bits	set	140
   436  009F                     _ADCON1bits	set	159
   437  008F                     _OSCCONbits	set	143
   438  0089                     _TRISE	set	137
   439  0086                     _TRISB	set	134
   440  0085                     _TRISA	set	133
   441  0187                     _BAUDCTLbits	set	391
   442  0189                     _ANSELH	set	393
   443  0188                     _ANSEL	set	392
   444  0453                     STR_1:
   445  0453  3453               	retlw	83	;'S'
   446  0454  3431               	retlw	49	;'1'
   447  0455  343A               	retlw	58	;':'
   448  0456  3420               	retlw	32	;' '
   449  0457  3420               	retlw	32	;' '
   450  0458  3420               	retlw	32	;' '
   451  0459  3420               	retlw	32	;' '
   452  045A  3453               	retlw	83	;'S'
   453  045B  3432               	retlw	50	;'2'
   454  045C  343A               	retlw	58	;':'
   455  045D  3420               	retlw	32	;' '
   456  045E  3420               	retlw	32	;' '
   457  045F  3420               	retlw	32	;' '
   458  0460  3453               	retlw	83	;'S'
   459  0461  3433               	retlw	51	;'3'
   460  0462  343A               	retlw	58	;':'
   461  0463  3400               	retlw	0
   462  0464                     STR_2:
   463  0464  3425               	retlw	37	;'%'
   464  0465  3464               	retlw	100	;'d'
   465  0466  342E               	retlw	46	;'.'
   466  0467  3425               	retlw	37	;'%'
   467  0468  3464               	retlw	100	;'d'
   468  0469  3425               	retlw	37	;'%'
   469  046A  3464               	retlw	100	;'d'
   470  046B  3400               	retlw	0
   471  0469                     
   472                           	psect	cinit
   473  000F                     start_initialization:	
   474                           ; #config settings
   475                           
   476  000F                     __initialization:
   477                           
   478                           ; Clear objects allocated to COMMON
   479  000F  01F6               	clrf	__pbssCOMMON& (0+127)
   480  0010  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   481  0011  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   482  0012  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   483                           
   484                           ; Clear objects allocated to BANK0
   485  0013  1383               	bcf	3,7	;select IRP bank0
   486  0014  3045               	movlw	low __pbssBANK0
   487  0015  0084               	movwf	4
   488  0016  3069               	movlw	low (__pbssBANK0+36)
   489  0017  120A  118A  256D  120A  118A  	fcall	clear_ram0
   490  001C                     end_of_initialization:	
   491                           ;End of C runtime variable initialization code
   492                           
   493  001C                     __end_of__initialization:
   494  001C  0183               	clrf	3
   495  001D  120A  118A  297E   	ljmp	_main	;jump to C main() function
   496                           
   497                           	psect	bssCOMMON
   498  0076                     __pbssCOMMON:
   499  0076                     _dato:
   500  0076                     	ds	1
   501  0077                     _cen:
   502  0077                     	ds	1
   503  0078                     _dec:
   504  0078                     	ds	1
   505  0079                     _uni:
   506  0079                     	ds	1
   507                           
   508                           	psect	bssBANK0
   509  0045                     __pbssBANK0:
   510  0045                     _Cont_U:
   511  0045                     	ds	1
   512  0046                     _vol3:
   513  0046                     	ds	1
   514  0047                     _cont2:
   515  0047                     	ds	1
   516  0048                     _cont1:
   517  0048                     	ds	1
   518  0049                     _buffer3:
   519  0049                     	ds	10
   520  0053                     _buffer2:
   521  0053                     	ds	10
   522  005D                     _buffer1:
   523  005D                     	ds	10
   524  0067                     _vol2:
   525  0067                     	ds	1
   526  0068                     _vol1:
   527  0068                     	ds	1
   528                           
   529                           	psect	clrtext
   530  056D                     clear_ram0:	
   531                           ;	Called with FSR containing the base address, and
   532                           ;	W with the last address+1
   533                           
   534  056D  0064               	clrwdt	;clear the watchdog before getting into this loop
   535  056E                     clrloop0:
   536  056E  0180               	clrf	0	;clear RAM location pointed to by FSR
   537  056F  0A84               	incf	4,f	;increment pointer
   538  0570  0604               	xorwf	4,w	;XOR with final address
   539  0571  1903               	btfsc	3,2	;have we reached the end yet?
   540  0572  3400               	retlw	0	;all done for this memory range, return
   541  0573  0604               	xorwf	4,w	;XOR again to restore value
   542  0574  2D6E               	goto	clrloop0	;do the next byte
   543                           
   544                           	psect	cstackCOMMON
   545  0070                     __pcstackCOMMON:
   546  0070                     ?_ADC:
   547  0070                     ??_ADC:	
   548                           ; 1 bytes @ 0x0
   549                           
   550  0070                     ?_setup:	
   551                           ; 1 bytes @ 0x0
   552                           
   553  0070                     ?_conversion:	
   554                           ; 1 bytes @ 0x0
   555                           
   556  0070                     ?_conversion_char:	
   557                           ; 1 bytes @ 0x0
   558                           
   559  0070                     ?_dato_recibido:	
   560                           ; 1 bytes @ 0x0
   561                           
   562  0070                     ?_Iniciar_LCD:	
   563                           ; 1 bytes @ 0x0
   564                           
   565  0070                     ?_isr:	
   566                           ; 1 bytes @ 0x0
   567                           
   568  0070                     ?_main:	
   569                           ; 1 bytes @ 0x0
   570                           
   571  0070                     ?_prender_ELCD:	
   572                           ; 1 bytes @ 0x0
   573                           
   574  0070                     ?_Escribir_comandoLCD:	
   575                           ; 1 bytes @ 0x0
   576                           
   577  0070                     ?_Escribir_datosLCD:	
   578                           ; 1 bytes @ 0x0
   579                           
   580                           
   581                           ; 1 bytes @ 0x0
   582  0070                     	ds	1
   583  0071                     ??_isr:
   584                           
   585                           ; 1 bytes @ 0x1
   586  0071                     	ds	3
   587  0074                     ??_conversion:
   588  0074                     ??_prender_ELCD:	
   589                           ; 1 bytes @ 0x4
   590                           
   591  0074                     ??___awdiv:	
   592                           ; 1 bytes @ 0x4
   593                           
   594  0074                     ??___awmod:	
   595                           ; 1 bytes @ 0x4
   596                           
   597  0074                     ??___lwdiv:	
   598                           ; 1 bytes @ 0x4
   599                           
   600                           
   601                           ; 1 bytes @ 0x4
   602  0074                     	ds	1
   603  0075                     ?_divisor:
   604  0075                     ??_Escribir_comandoLCD:	
   605                           ; 1 bytes @ 0x5
   606                           
   607  0075                     ??_Escribir_datosLCD:	
   608                           ; 1 bytes @ 0x5
   609                           
   610  0075                     ??___lwmod:	
   611                           ; 1 bytes @ 0x5
   612                           
   613  0075                     divisor@dig:	
   614                           ; 1 bytes @ 0x5
   615                           
   616  0075                     Escribir_comandoLCD@Comando:	
   617                           ; 1 bytes @ 0x5
   618                           
   619  0075                     Escribir_datosLCD@LCDchar:	
   620                           ; 1 bytes @ 0x5
   621                           
   622                           
   623                           ; 1 bytes @ 0x5
   624  0075                     	ds	1
   625  0076                     ??_set_cursor:
   626  0076                     ??_Escribir_stringLCD:	
   627                           ; 1 bytes @ 0x6
   628                           
   629                           
   630                           	psect	cstackBANK0
   631  0020                     __pcstackBANK0:	
   632                           ; 1 bytes @ 0x6
   633                           
   634  0020                     ?_set_cursor:
   635  0020                     ?_Escribir_stringLCD:	
   636                           ; 1 bytes @ 0x0
   637                           
   638  0020                     ??_Iniciar_LCD:	
   639                           ; 1 bytes @ 0x0
   640                           
   641  0020                     ?___awdiv:	
   642                           ; 1 bytes @ 0x0
   643                           
   644  0020                     ?___awmod:	
   645                           ; 2 bytes @ 0x0
   646                           
   647  0020                     ?___lwdiv:	
   648                           ; 2 bytes @ 0x0
   649                           
   650  0020                     set_cursor@b:	
   651                           ; 2 bytes @ 0x0
   652                           
   653  0020                     Escribir_stringLCD@d:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0020                     ___awdiv@divisor:	
   657                           ; 2 bytes @ 0x0
   658                           
   659  0020                     ___awmod@divisor:	
   660                           ; 2 bytes @ 0x0
   661                           
   662  0020                     ___lwdiv@divisor:	
   663                           ; 2 bytes @ 0x0
   664                           
   665                           
   666                           ; 2 bytes @ 0x0
   667  0020                     	ds	1
   668  0021                     set_cursor@a:
   669                           
   670                           ; 1 bytes @ 0x1
   671  0021                     	ds	1
   672  0022                     ??_setup:
   673  0022                     ___awdiv@dividend:	
   674                           ; 1 bytes @ 0x2
   675                           
   676  0022                     ___awmod@dividend:	
   677                           ; 2 bytes @ 0x2
   678                           
   679  0022                     ___lwdiv@dividend:	
   680                           ; 2 bytes @ 0x2
   681                           
   682                           
   683                           ; 2 bytes @ 0x2
   684  0022                     	ds	2
   685  0024                     ___awdiv@counter:
   686  0024                     ___awmod@counter:	
   687                           ; 1 bytes @ 0x4
   688                           
   689  0024                     ___lwdiv@counter:	
   690                           ; 1 bytes @ 0x4
   691                           
   692                           
   693                           ; 1 bytes @ 0x4
   694  0024                     	ds	1
   695  0025                     ___awdiv@sign:
   696  0025                     ___awmod@sign:	
   697                           ; 1 bytes @ 0x5
   698                           
   699  0025                     ___lwdiv@quotient:	
   700                           ; 1 bytes @ 0x5
   701                           
   702                           
   703                           ; 2 bytes @ 0x5
   704  0025                     	ds	1
   705  0026                     ___awdiv@quotient:
   706                           
   707                           ; 2 bytes @ 0x6
   708  0026                     	ds	1
   709  0027                     ?___lwmod:
   710  0027                     ___lwmod@divisor:	
   711                           ; 2 bytes @ 0x7
   712                           
   713                           
   714                           ; 2 bytes @ 0x7
   715  0027                     	ds	1
   716  0028                     ??_divisor:
   717                           
   718                           ; 1 bytes @ 0x8
   719  0028                     	ds	1
   720  0029                     ___lwmod@dividend:
   721                           
   722                           ; 2 bytes @ 0x9
   723  0029                     	ds	1
   724  002A                     divisor@a:
   725                           
   726                           ; 1 bytes @ 0xA
   727  002A                     	ds	1
   728  002B                     ___lwmod@counter:
   729  002B                     divisor@b:	
   730                           ; 1 bytes @ 0xB
   731                           
   732                           
   733                           ; 2 bytes @ 0xB
   734  002B                     	ds	1
   735  002C                     ?_sprintf:
   736  002C                     sprintf@f:	
   737                           ; 2 bytes @ 0xC
   738                           
   739                           
   740                           ; 1 bytes @ 0xC
   741  002C                     	ds	1
   742  002D                     divisor@i:
   743                           
   744                           ; 2 bytes @ 0xD
   745  002D                     	ds	6
   746  0033                     ??_sprintf:
   747                           
   748                           ; 1 bytes @ 0x13
   749  0033                     	ds	3
   750  0036                     sprintf@ap:
   751                           
   752                           ; 1 bytes @ 0x16
   753  0036                     	ds	1
   754  0037                     sprintf@flag:
   755                           
   756                           ; 1 bytes @ 0x17
   757  0037                     	ds	1
   758  0038                     sprintf@prec:
   759                           
   760                           ; 1 bytes @ 0x18
   761  0038                     	ds	1
   762  0039                     sprintf@val:
   763                           
   764                           ; 2 bytes @ 0x19
   765  0039                     	ds	2
   766  003B                     sprintf@sp:
   767                           
   768                           ; 1 bytes @ 0x1B
   769  003B                     	ds	1
   770  003C                     sprintf@c:
   771                           
   772                           ; 1 bytes @ 0x1C
   773  003C                     	ds	1
   774  003D                     ??_conversion_char:
   775  003D                     ??_dato_recibido:	
   776                           ; 1 bytes @ 0x1D
   777                           
   778                           
   779                           ; 1 bytes @ 0x1D
   780  003D                     	ds	7
   781  0044                     ??_main:
   782                           
   783                           ; 1 bytes @ 0x24
   784  0044                     	ds	1
   785                           
   786                           	psect	maintext
   787  017E                     __pmaintext:	
   788 ;;
   789 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   790 ;;
   791 ;; *************** function _main *****************
   792 ;; Defined at:
   793 ;;		line 84 in file "LAB2.c"
   794 ;; Parameters:    Size  Location     Type
   795 ;;		None
   796 ;; Auto vars:     Size  Location     Type
   797 ;;		None
   798 ;; Return value:  Size  Location     Type
   799 ;;                  1    wreg      void 
   800 ;; Registers used:
   801 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   802 ;; Tracked objects:
   803 ;;		On entry : B00/0
   804 ;;		On exit  : 0/0
   805 ;;		Unchanged: 0/0
   806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   807 ;;      Params:         0       0       0       0       0
   808 ;;      Locals:         0       0       0       0       0
   809 ;;      Temps:          0       1       0       0       0
   810 ;;      Totals:         0       1       0       0       0
   811 ;;Total ram usage:        1 bytes
   812 ;; Hardware stack levels required when called: 6
   813 ;; This function calls:
   814 ;;		_Escribir_stringLCD
   815 ;;		_conversion
   816 ;;		_conversion_char
   817 ;;		_dato_recibido
   818 ;;		_set_cursor
   819 ;;		_setup
   820 ;; This function is called by:
   821 ;;		Startup code after reset
   822 ;; This function uses a non-reentrant model
   823 ;;
   824                           
   825                           
   826                           ;psect for function _main
   827  017E                     _main:
   828  017E                     l1938:	
   829                           ;incstack = 0
   830                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   831                           
   832                           
   833                           ;LAB2.c: 85:     setup();
   834  017E  120A  118A  2367  120A  118A  	fcall	_setup
   835  0183                     l1940:
   836                           
   837                           ;LAB2.c: 86:     ADCON0bits.GO = 1;
   838  0183  1283               	bcf	3,5	;RP0=0, select bank0
   839  0184  1303               	bcf	3,6	;RP1=0, select bank0
   840  0185  149F               	bsf	31,1	;volatile
   841  0186                     l102:	
   842                           ;LAB2.c: 87:     while(1){
   843                           
   844                           
   845                           ;LAB2.c: 89:         conversion();
   846  0186  120A  118A  249B  120A  118A  	fcall	_conversion
   847                           
   848                           ;LAB2.c: 92:         set_cursor(1,1);
   849  018B  1283               	bcf	3,5	;RP0=0, select bank0
   850  018C  1303               	bcf	3,6	;RP1=0, select bank0
   851  018D  01A0               	clrf	set_cursor@b
   852  018E  0AA0               	incf	set_cursor@b,f
   853  018F  3001               	movlw	1
   854  0190  120A  118A  24EF  120A  118A  	fcall	_set_cursor
   855  0195                     l1942:
   856                           
   857                           ;LAB2.c: 93:         Escribir_stringLCD("S1:    S2:   S3:");
   858  0195  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   859  0196  1283               	bcf	3,5	;RP0=0, select bank0
   860  0197  1303               	bcf	3,6	;RP1=0, select bank0
   861  0198  00A0               	movwf	Escribir_stringLCD@d
   862  0199  3080               	movlw	128
   863  019A  00A1               	movwf	Escribir_stringLCD@d+1
   864  019B  120A  118A  24C7  120A  118A  	fcall	_Escribir_stringLCD
   865  01A0                     l1944:
   866                           
   867                           ;LAB2.c: 95:         conversion_char();
   868  01A0  120A  118A  225A  120A  118A  	fcall	_conversion_char
   869                           
   870                           ;LAB2.c: 97:         set_cursor(2,1);
   871  01A5  1283               	bcf	3,5	;RP0=0, select bank0
   872  01A6  1303               	bcf	3,6	;RP1=0, select bank0
   873  01A7  01A0               	clrf	set_cursor@b
   874  01A8  0AA0               	incf	set_cursor@b,f
   875  01A9  3002               	movlw	2
   876  01AA  120A  118A  24EF  120A  118A  	fcall	_set_cursor
   877  01AF                     l1946:
   878                           
   879                           ;LAB2.c: 98:         Escribir_stringLCD(buffer1);
   880  01AF  305D               	movlw	(low (_buffer1| 0))& (0+255)
   881  01B0  1283               	bcf	3,5	;RP0=0, select bank0
   882  01B1  1303               	bcf	3,6	;RP1=0, select bank0
   883  01B2  00A0               	movwf	Escribir_stringLCD@d
   884  01B3  3000               	movlw	0
   885  01B4  00A1               	movwf	Escribir_stringLCD@d+1
   886  01B5  120A  118A  24C7  120A  118A  	fcall	_Escribir_stringLCD
   887  01BA                     l1948:
   888                           
   889                           ;LAB2.c: 99:         set_cursor(2,7);
   890  01BA  3007               	movlw	7
   891  01BB  1283               	bcf	3,5	;RP0=0, select bank0
   892  01BC  1303               	bcf	3,6	;RP1=0, select bank0
   893  01BD  00C4               	movwf	??_main
   894  01BE  0844               	movf	??_main,w
   895  01BF  00A0               	movwf	set_cursor@b
   896  01C0  3002               	movlw	2
   897  01C1  120A  118A  24EF  120A  118A  	fcall	_set_cursor
   898                           
   899                           ;LAB2.c: 100:         Escribir_stringLCD(buffer2);
   900  01C6  3053               	movlw	(low (_buffer2| 0))& (0+255)
   901  01C7  1283               	bcf	3,5	;RP0=0, select bank0
   902  01C8  1303               	bcf	3,6	;RP1=0, select bank0
   903  01C9  00A0               	movwf	Escribir_stringLCD@d
   904  01CA  3000               	movlw	0
   905  01CB  00A1               	movwf	Escribir_stringLCD@d+1
   906  01CC  120A  118A  24C7  120A  118A  	fcall	_Escribir_stringLCD
   907                           
   908                           ;LAB2.c: 103:         dato_recibido();
   909  01D1  120A  118A  2541  120A  118A  	fcall	_dato_recibido
   910  01D6                     l1950:
   911                           
   912                           ;LAB2.c: 105:         set_cursor(2,14);
   913  01D6  300E               	movlw	14
   914  01D7  1283               	bcf	3,5	;RP0=0, select bank0
   915  01D8  1303               	bcf	3,6	;RP1=0, select bank0
   916  01D9  00C4               	movwf	??_main
   917  01DA  0844               	movf	??_main,w
   918  01DB  00A0               	movwf	set_cursor@b
   919  01DC  3002               	movlw	2
   920  01DD  120A  118A  24EF  120A  118A  	fcall	_set_cursor
   921  01E2                     l1952:
   922                           
   923                           ;LAB2.c: 106:         Escribir_stringLCD(buffer3);
   924  01E2  3049               	movlw	(low (_buffer3| 0))& (0+255)
   925  01E3  1283               	bcf	3,5	;RP0=0, select bank0
   926  01E4  1303               	bcf	3,6	;RP1=0, select bank0
   927  01E5  00A0               	movwf	Escribir_stringLCD@d
   928  01E6  3000               	movlw	0
   929  01E7  00A1               	movwf	Escribir_stringLCD@d+1
   930  01E8  120A  118A  24C7  120A  118A  	fcall	_Escribir_stringLCD
   931  01ED  2986               	goto	l102
   932  01EE  120A  118A  280C   	ljmp	start
   933  01F1                     __end_of_main:
   934                           
   935                           	psect	text1
   936  0367                     __ptext1:	
   937 ;; *************** function _setup *****************
   938 ;; Defined at:
   939 ;;		line 111 in file "LAB2.c"
   940 ;; Parameters:    Size  Location     Type
   941 ;;		None
   942 ;; Auto vars:     Size  Location     Type
   943 ;;		None
   944 ;; Return value:  Size  Location     Type
   945 ;;                  1    wreg      void 
   946 ;; Registers used:
   947 ;;		wreg, status,2, status,0, pclath, cstack
   948 ;; Tracked objects:
   949 ;;		On entry : 0/0
   950 ;;		On exit  : 0/0
   951 ;;		Unchanged: 0/0
   952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   953 ;;      Params:         0       0       0       0       0
   954 ;;      Locals:         0       0       0       0       0
   955 ;;      Temps:          0       1       0       0       0
   956 ;;      Totals:         0       1       0       0       0
   957 ;;Total ram usage:        1 bytes
   958 ;; Hardware stack levels used: 1
   959 ;; Hardware stack levels required when called: 5
   960 ;; This function calls:
   961 ;;		_Iniciar_LCD
   962 ;; This function is called by:
   963 ;;		_main
   964 ;; This function uses a non-reentrant model
   965 ;;
   966                           
   967                           
   968                           ;psect for function _setup
   969  0367                     _setup:
   970  0367                     l1862:	
   971                           ;incstack = 0
   972                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   973                           
   974                           
   975                           ;LAB2.c: 114:     ANSEL = 0b0011;
   976  0367  3003               	movlw	3
   977  0368  1683               	bsf	3,5	;RP0=1, select bank3
   978  0369  1703               	bsf	3,6	;RP1=1, select bank3
   979  036A  0088               	movwf	8	;volatile
   980  036B                     l1864:
   981                           
   982                           ;LAB2.c: 115:     ANSELH = 0;
   983  036B  0189               	clrf	9	;volatile
   984  036C                     l1866:
   985                           
   986                           ;LAB2.c: 117:     TRISA = 0b0011;
   987  036C  3003               	movlw	3
   988  036D  1683               	bsf	3,5	;RP0=1, select bank1
   989  036E  1303               	bcf	3,6	;RP1=0, select bank1
   990  036F  0085               	movwf	5	;volatile
   991                           
   992                           ;LAB2.c: 118:     TRISB = 0;
   993  0370  0186               	clrf	6	;volatile
   994                           
   995                           ;LAB2.c: 119:     TRISE = 0;
   996  0371  0189               	clrf	9	;volatile
   997                           
   998                           ;LAB2.c: 121:     PORTA = 0;
   999  0372  1283               	bcf	3,5	;RP0=0, select bank0
  1000  0373  1303               	bcf	3,6	;RP1=0, select bank0
  1001  0374  0185               	clrf	5	;volatile
  1002                           
  1003                           ;LAB2.c: 122:     PORTE = 0;
  1004  0375  0189               	clrf	9	;volatile
  1005                           
  1006                           ;LAB2.c: 123:     PORTB = 0;
  1007  0376  0186               	clrf	6	;volatile
  1008  0377                     l1868:
  1009                           
  1010                           ;LAB2.c: 126:     OSCCONbits.IRCF = 0b0110;
  1011  0377  1683               	bsf	3,5	;RP0=1, select bank1
  1012  0378  1303               	bcf	3,6	;RP1=0, select bank1
  1013  0379  080F               	movf	15,w	;volatile
  1014  037A  398F               	andlw	-113
  1015  037B  3860               	iorlw	96
  1016  037C  008F               	movwf	15	;volatile
  1017  037D                     l1870:
  1018                           
  1019                           ;LAB2.c: 127:     OSCCONbits.SCS = 1;
  1020  037D  140F               	bsf	15,0	;volatile
  1021  037E                     l1872:
  1022                           
  1023                           ;LAB2.c: 130:     ADCON1bits.ADFM = 0;
  1024  037E  139F               	bcf	31,7	;volatile
  1025  037F                     l1874:
  1026                           
  1027                           ;LAB2.c: 131:     ADCON1bits.VCFG0 = 0;
  1028  037F  121F               	bcf	31,4	;volatile
  1029  0380                     l1876:
  1030                           
  1031                           ;LAB2.c: 132:     ADCON1bits.VCFG1 = 0;
  1032  0380  129F               	bcf	31,5	;volatile
  1033  0381                     l1878:
  1034                           
  1035                           ;LAB2.c: 134:     ADCON0bits.ADCS = 0b01;
  1036  0381  1283               	bcf	3,5	;RP0=0, select bank0
  1037  0382  1303               	bcf	3,6	;RP1=0, select bank0
  1038  0383  081F               	movf	31,w	;volatile
  1039  0384  393F               	andlw	-193
  1040  0385  3840               	iorlw	64
  1041  0386  009F               	movwf	31	;volatile
  1042  0387                     l1880:
  1043                           
  1044                           ;LAB2.c: 135:     ADCON0bits.CHS = 0;
  1045  0387  30C3               	movlw	-61
  1046  0388  059F               	andwf	31,f	;volatile
  1047  0389                     l1882:
  1048                           
  1049                           ;LAB2.c: 136:     ADCON0bits.ADON = 1;
  1050  0389  141F               	bsf	31,0	;volatile
  1051  038A                     l1884:
  1052                           
  1053                           ;LAB2.c: 137:     _delay((unsigned long)((50)*(4000000/4000000.0)));
  1054  038A  300F               	movlw	15
  1055  038B  1283               	bcf	3,5	;RP0=0, select bank0
  1056  038C  1303               	bcf	3,6	;RP1=0, select bank0
  1057  038D  00A2               	movwf	??_setup
  1058  038E                     u1427:
  1059  038E  0BA2               	decfsz	??_setup,f
  1060  038F  2B8E               	goto	u1427
  1061  0390  2B91               	nop2
  1062  0391                     l1886:
  1063                           
  1064                           ;LAB2.c: 140:     PIR1bits.ADIF = 0;
  1065  0391  1283               	bcf	3,5	;RP0=0, select bank0
  1066  0392  1303               	bcf	3,6	;RP1=0, select bank0
  1067  0393  130C               	bcf	12,6	;volatile
  1068  0394                     l1888:
  1069                           
  1070                           ;LAB2.c: 141:     PIE1bits.ADIE = 1;
  1071  0394  1683               	bsf	3,5	;RP0=1, select bank1
  1072  0395  1303               	bcf	3,6	;RP1=0, select bank1
  1073  0396  170C               	bsf	12,6	;volatile
  1074  0397                     l1890:
  1075                           
  1076                           ;LAB2.c: 142:     PIR1bits.RCIF = 0;
  1077  0397  1283               	bcf	3,5	;RP0=0, select bank0
  1078  0398  1303               	bcf	3,6	;RP1=0, select bank0
  1079  0399  128C               	bcf	12,5	;volatile
  1080  039A                     l1892:
  1081                           
  1082                           ;LAB2.c: 143:     PIE1bits.RCIE = 1;
  1083  039A  1683               	bsf	3,5	;RP0=1, select bank1
  1084  039B  1303               	bcf	3,6	;RP1=0, select bank1
  1085  039C  168C               	bsf	12,5	;volatile
  1086  039D                     l1894:
  1087                           
  1088                           ;LAB2.c: 144:     INTCONbits.PEIE = 1;
  1089  039D  170B               	bsf	11,6	;volatile
  1090  039E                     l1896:
  1091                           
  1092                           ;LAB2.c: 145:     INTCONbits.GIE = 1;
  1093  039E  178B               	bsf	11,7	;volatile
  1094  039F                     l1898:
  1095                           
  1096                           ;LAB2.c: 148:     TXSTAbits.SYNC = 0;
  1097  039F  1218               	bcf	24,4	;volatile
  1098  03A0                     l1900:
  1099                           
  1100                           ;LAB2.c: 149:     TXSTAbits.BRGH = 1;
  1101  03A0  1518               	bsf	24,2	;volatile
  1102  03A1                     l1902:
  1103                           
  1104                           ;LAB2.c: 151:     BAUDCTLbits.BRG16 = 0;
  1105  03A1  1683               	bsf	3,5	;RP0=1, select bank3
  1106  03A2  1703               	bsf	3,6	;RP1=1, select bank3
  1107  03A3  1187               	bcf	7,3	;volatile
  1108  03A4                     l1904:
  1109                           
  1110                           ;LAB2.c: 153:     SPBRG = 23;
  1111  03A4  3017               	movlw	23
  1112  03A5  1683               	bsf	3,5	;RP0=1, select bank1
  1113  03A6  1303               	bcf	3,6	;RP1=0, select bank1
  1114  03A7  0099               	movwf	25	;volatile
  1115  03A8                     l1906:
  1116                           
  1117                           ;LAB2.c: 154:     SPBRGH = 0;
  1118  03A8  019A               	clrf	26	;volatile
  1119  03A9                     l1908:
  1120                           
  1121                           ;LAB2.c: 156:     RCSTAbits.SPEN = 1;
  1122  03A9  1283               	bcf	3,5	;RP0=0, select bank0
  1123  03AA  1303               	bcf	3,6	;RP1=0, select bank0
  1124  03AB  1798               	bsf	24,7	;volatile
  1125  03AC                     l1910:
  1126                           
  1127                           ;LAB2.c: 157:     RCSTAbits.RX9 = 0;
  1128  03AC  1318               	bcf	24,6	;volatile
  1129  03AD                     l1912:
  1130                           
  1131                           ;LAB2.c: 158:     RCSTAbits.CREN = 1;
  1132  03AD  1618               	bsf	24,4	;volatile
  1133  03AE                     l1914:
  1134                           
  1135                           ;LAB2.c: 160:     TXSTAbits.TXEN = 1;
  1136  03AE  1683               	bsf	3,5	;RP0=1, select bank1
  1137  03AF  1303               	bcf	3,6	;RP1=0, select bank1
  1138  03B0  1698               	bsf	24,5	;volatile
  1139  03B1                     l1916:
  1140                           
  1141                           ;LAB2.c: 163:     Iniciar_LCD();
  1142  03B1  120A  118A  210A  120A  118A  	fcall	_Iniciar_LCD
  1143  03B6                     l108:
  1144  03B6  0008               	return
  1145  03B7                     __end_of_setup:
  1146                           
  1147                           	psect	text2
  1148  010A                     __ptext2:	
  1149 ;; *************** function _Iniciar_LCD *****************
  1150 ;; Defined at:
  1151 ;;		line 32 in file "LCD.c"
  1152 ;; Parameters:    Size  Location     Type
  1153 ;;		None
  1154 ;; Auto vars:     Size  Location     Type
  1155 ;;		None
  1156 ;; Return value:  Size  Location     Type
  1157 ;;                  1    wreg      void 
  1158 ;; Registers used:
  1159 ;;		wreg, status,2, status,0, pclath, cstack
  1160 ;; Tracked objects:
  1161 ;;		On entry : 0/0
  1162 ;;		On exit  : 0/0
  1163 ;;		Unchanged: 0/0
  1164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1165 ;;      Params:         0       0       0       0       0
  1166 ;;      Locals:         0       0       0       0       0
  1167 ;;      Temps:          0       2       0       0       0
  1168 ;;      Totals:         0       2       0       0       0
  1169 ;;Total ram usage:        2 bytes
  1170 ;; Hardware stack levels used: 1
  1171 ;; Hardware stack levels required when called: 4
  1172 ;; This function calls:
  1173 ;;		_Escribir_datosLCD
  1174 ;; This function is called by:
  1175 ;;		_setup
  1176 ;; This function uses a non-reentrant model
  1177 ;;
  1178                           
  1179                           
  1180                           ;psect for function _Iniciar_LCD
  1181  010A                     _Iniciar_LCD:
  1182  010A                     l1754:	
  1183                           ;incstack = 0
  1184                           ; Regs used in _Iniciar_LCD: [wreg+status,2+status,0+pclath+cstack]
  1185                           
  1186                           
  1187                           ;LCD.c: 33:     RC0 = 0;
  1188  010A  1283               	bcf	3,5	;RP0=0, select bank0
  1189  010B  1303               	bcf	3,6	;RP1=0, select bank0
  1190  010C  1007               	bcf	7,0	;volatile
  1191                           
  1192                           ;LCD.c: 34:     RC2 = 0;
  1193  010D  1107               	bcf	7,2	;volatile
  1194  010E                     l1756:
  1195                           
  1196                           ;LCD.c: 36:     _delay((unsigned long)((14)*(8000000/4000.0)));
  1197  010E  3025               	movlw	37
  1198  010F  1283               	bcf	3,5	;RP0=0, select bank0
  1199  0110  1303               	bcf	3,6	;RP1=0, select bank0
  1200  0111  00A1               	movwf	??_Iniciar_LCD+1
  1201  0112  305B               	movlw	91
  1202  0113  00A0               	movwf	??_Iniciar_LCD
  1203  0114                     u1437:
  1204  0114  0BA0               	decfsz	??_Iniciar_LCD,f
  1205  0115  2914               	goto	u1437
  1206  0116  0BA1               	decfsz	??_Iniciar_LCD+1,f
  1207  0117  2914               	goto	u1437
  1208  0118                     l1758:
  1209                           
  1210                           ;LCD.c: 37:     Escribir_datosLCD(0b00110000);
  1211  0118  3030               	movlw	48
  1212  0119  120A  118A  2561  120A  118A  	fcall	_Escribir_datosLCD
  1213  011E                     l1760:
  1214                           
  1215                           ;LCD.c: 38:     _delay((unsigned long)((4)*(8000000/4000.0)));
  1216  011E  300B               	movlw	11
  1217  011F  1283               	bcf	3,5	;RP0=0, select bank0
  1218  0120  1303               	bcf	3,6	;RP1=0, select bank0
  1219  0121  00A1               	movwf	??_Iniciar_LCD+1
  1220  0122  3061               	movlw	97
  1221  0123  00A0               	movwf	??_Iniciar_LCD
  1222  0124                     u1447:
  1223  0124  0BA0               	decfsz	??_Iniciar_LCD,f
  1224  0125  2924               	goto	u1447
  1225  0126  0BA1               	decfsz	??_Iniciar_LCD+1,f
  1226  0127  2924               	goto	u1447
  1227  0128  2929               	nop2
  1228                           
  1229                           ;LCD.c: 39:     Escribir_datosLCD(0b00110000);
  1230  0129  3030               	movlw	48
  1231  012A  120A  118A  2561  120A  118A  	fcall	_Escribir_datosLCD
  1232  012F                     l1762:
  1233                           
  1234                           ;LCD.c: 40:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  1235  012F  3041               	movlw	65
  1236  0130  1283               	bcf	3,5	;RP0=0, select bank0
  1237  0131  1303               	bcf	3,6	;RP1=0, select bank0
  1238  0132  00A0               	movwf	??_Iniciar_LCD
  1239  0133                     u1457:
  1240  0133  0BA0               	decfsz	??_Iniciar_LCD,f
  1241  0134  2933               	goto	u1457
  1242  0135  2936               	nop2
  1243  0136                     l1764:
  1244                           
  1245                           ;LCD.c: 41:     Escribir_datosLCD(0b00110000);
  1246  0136  3030               	movlw	48
  1247  0137  120A  118A  2561  120A  118A  	fcall	_Escribir_datosLCD
  1248                           
  1249                           ;LCD.c: 44:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  1250  013C  3041               	movlw	65
  1251  013D  1283               	bcf	3,5	;RP0=0, select bank0
  1252  013E  1303               	bcf	3,6	;RP1=0, select bank0
  1253  013F  00A0               	movwf	??_Iniciar_LCD
  1254  0140                     u1467:
  1255  0140  0BA0               	decfsz	??_Iniciar_LCD,f
  1256  0141  2940               	goto	u1467
  1257  0142  2943               	nop2
  1258  0143                     l1766:
  1259                           
  1260                           ;LCD.c: 45:     Escribir_datosLCD(0b00111000);
  1261  0143  3038               	movlw	56
  1262  0144  120A  118A  2561  120A  118A  	fcall	_Escribir_datosLCD
  1263  0149                     l1768:
  1264                           
  1265                           ;LCD.c: 46:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  1266  0149  3041               	movlw	65
  1267  014A  1283               	bcf	3,5	;RP0=0, select bank0
  1268  014B  1303               	bcf	3,6	;RP1=0, select bank0
  1269  014C  00A0               	movwf	??_Iniciar_LCD
  1270  014D                     u1477:
  1271  014D  0BA0               	decfsz	??_Iniciar_LCD,f
  1272  014E  294D               	goto	u1477
  1273  014F  2950               	nop2
  1274                           
  1275                           ;LCD.c: 47:     Escribir_datosLCD(0b00001000);
  1276  0150  3008               	movlw	8
  1277  0151  120A  118A  2561  120A  118A  	fcall	_Escribir_datosLCD
  1278  0156                     l1770:
  1279                           
  1280                           ;LCD.c: 48:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  1281  0156  3041               	movlw	65
  1282  0157  1283               	bcf	3,5	;RP0=0, select bank0
  1283  0158  1303               	bcf	3,6	;RP1=0, select bank0
  1284  0159  00A0               	movwf	??_Iniciar_LCD
  1285  015A                     u1487:
  1286  015A  0BA0               	decfsz	??_Iniciar_LCD,f
  1287  015B  295A               	goto	u1487
  1288  015C  295D               	nop2
  1289  015D                     l1772:
  1290                           
  1291                           ;LCD.c: 49:     Escribir_datosLCD(0b00000001);
  1292  015D  3001               	movlw	1
  1293  015E  120A  118A  2561  120A  118A  	fcall	_Escribir_datosLCD
  1294                           
  1295                           ;LCD.c: 50:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  1296  0163  3041               	movlw	65
  1297  0164  1283               	bcf	3,5	;RP0=0, select bank0
  1298  0165  1303               	bcf	3,6	;RP1=0, select bank0
  1299  0166  00A0               	movwf	??_Iniciar_LCD
  1300  0167                     u1497:
  1301  0167  0BA0               	decfsz	??_Iniciar_LCD,f
  1302  0168  2967               	goto	u1497
  1303  0169  296A               	nop2
  1304  016A                     l1774:
  1305                           
  1306                           ;LCD.c: 51:     Escribir_datosLCD(0b00000110);
  1307  016A  3006               	movlw	6
  1308  016B  120A  118A  2561  120A  118A  	fcall	_Escribir_datosLCD
  1309  0170                     l1776:
  1310                           
  1311                           ;LCD.c: 52:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  1312  0170  3041               	movlw	65
  1313  0171  1283               	bcf	3,5	;RP0=0, select bank0
  1314  0172  1303               	bcf	3,6	;RP1=0, select bank0
  1315  0173  00A0               	movwf	??_Iniciar_LCD
  1316  0174                     u1507:
  1317  0174  0BA0               	decfsz	??_Iniciar_LCD,f
  1318  0175  2974               	goto	u1507
  1319  0176  2977               	nop2
  1320                           
  1321                           ;LCD.c: 53:     Escribir_datosLCD(0b00001100);
  1322  0177  300C               	movlw	12
  1323  0178  120A  118A  2561  120A  118A  	fcall	_Escribir_datosLCD
  1324  017D                     l141:
  1325  017D  0008               	return
  1326  017E                     __end_of_Iniciar_LCD:
  1327                           
  1328                           	psect	text3
  1329  04EF                     __ptext3:	
  1330 ;; *************** function _set_cursor *****************
  1331 ;; Defined at:
  1332 ;;		line 68 in file "LCD.c"
  1333 ;; Parameters:    Size  Location     Type
  1334 ;;  a               1    wreg     unsigned char 
  1335 ;;  b               1    0[BANK0 ] unsigned char 
  1336 ;; Auto vars:     Size  Location     Type
  1337 ;;  a               1    1[BANK0 ] unsigned char 
  1338 ;; Return value:  Size  Location     Type
  1339 ;;                  1    wreg      void 
  1340 ;; Registers used:
  1341 ;;		wreg, status,2, status,0, pclath, cstack
  1342 ;; Tracked objects:
  1343 ;;		On entry : 0/0
  1344 ;;		On exit  : 0/0
  1345 ;;		Unchanged: 0/0
  1346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1347 ;;      Params:         0       1       0       0       0
  1348 ;;      Locals:         0       1       0       0       0
  1349 ;;      Temps:          0       0       0       0       0
  1350 ;;      Totals:         0       2       0       0       0
  1351 ;;Total ram usage:        2 bytes
  1352 ;; Hardware stack levels used: 1
  1353 ;; Hardware stack levels required when called: 4
  1354 ;; This function calls:
  1355 ;;		_Escribir_comandoLCD
  1356 ;; This function is called by:
  1357 ;;		_main
  1358 ;; This function uses a non-reentrant model
  1359 ;;
  1360                           
  1361                           
  1362                           ;psect for function _set_cursor
  1363  04EF                     _set_cursor:
  1364                           
  1365                           ;incstack = 0
  1366                           ; Regs used in _set_cursor: [wreg+status,2+status,0+pclath+cstack]
  1367                           ;set_cursor@a stored from wreg
  1368  04EF  1283               	bcf	3,5	;RP0=0, select bank0
  1369  04F0  1303               	bcf	3,6	;RP1=0, select bank0
  1370  04F1  00A1               	movwf	set_cursor@a
  1371  04F2                     l1918:
  1372                           
  1373                           ;LCD.c: 69:     if(a == 1){
  1374  04F2  0321               	decf	set_cursor@a,w
  1375  04F3  1D03               	btfss	3,2
  1376  04F4  2CF6               	goto	u1391
  1377  04F5  2CF7               	goto	u1390
  1378  04F6                     u1391:
  1379  04F6  2CFE               	goto	l1922
  1380  04F7                     u1390:
  1381  04F7                     l1920:
  1382                           
  1383                           ;LCD.c: 70:         Escribir_comandoLCD(0x80 + (b-1));
  1384  04F7  0820               	movf	set_cursor@b,w
  1385  04F8  3E7F               	addlw	127
  1386  04F9  120A  118A  2555  120A  118A  	fcall	_Escribir_comandoLCD
  1387  04FE                     l1922:
  1388                           
  1389                           ;LCD.c: 72:     if(a == 2){
  1390  04FE  3002               	movlw	2
  1391  04FF  1283               	bcf	3,5	;RP0=0, select bank0
  1392  0500  1303               	bcf	3,6	;RP1=0, select bank0
  1393  0501  0621               	xorwf	set_cursor@a,w
  1394  0502  1D03               	btfss	3,2
  1395  0503  2D05               	goto	u1401
  1396  0504  2D06               	goto	u1400
  1397  0505                     u1401:
  1398  0505  2D0D               	goto	l155
  1399  0506                     u1400:
  1400  0506                     l1924:
  1401                           
  1402                           ;LCD.c: 73:         Escribir_comandoLCD(0xC0 + (b-1));
  1403  0506  0820               	movf	set_cursor@b,w
  1404  0507  3EBF               	addlw	191
  1405  0508  120A  118A  2555  120A  118A  	fcall	_Escribir_comandoLCD
  1406  050D                     l155:
  1407  050D  0008               	return
  1408  050E                     __end_of_set_cursor:
  1409                           
  1410                           	psect	text4
  1411  0555                     __ptext4:	
  1412 ;; *************** function _Escribir_comandoLCD *****************
  1413 ;; Defined at:
  1414 ;;		line 18 in file "LCD.c"
  1415 ;; Parameters:    Size  Location     Type
  1416 ;;  Comando         1    wreg     unsigned char 
  1417 ;; Auto vars:     Size  Location     Type
  1418 ;;  Comando         1    5[COMMON] unsigned char 
  1419 ;; Return value:  Size  Location     Type
  1420 ;;                  1    wreg      void 
  1421 ;; Registers used:
  1422 ;;		wreg, status,2, status,0, pclath, cstack
  1423 ;; Tracked objects:
  1424 ;;		On entry : 0/0
  1425 ;;		On exit  : 0/0
  1426 ;;		Unchanged: 0/0
  1427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1428 ;;      Params:         0       0       0       0       0
  1429 ;;      Locals:         1       0       0       0       0
  1430 ;;      Temps:          0       0       0       0       0
  1431 ;;      Totals:         1       0       0       0       0
  1432 ;;Total ram usage:        1 bytes
  1433 ;; Hardware stack levels used: 1
  1434 ;; Hardware stack levels required when called: 3
  1435 ;; This function calls:
  1436 ;;		_prender_ELCD
  1437 ;; This function is called by:
  1438 ;;		_set_cursor
  1439 ;;		_Limpiar_pantallaLCD
  1440 ;;		_shift_right
  1441 ;;		_shift_left
  1442 ;; This function uses a non-reentrant model
  1443 ;;
  1444                           
  1445                           
  1446                           ;psect for function _Escribir_comandoLCD
  1447  0555                     _Escribir_comandoLCD:
  1448                           
  1449                           ;incstack = 0
  1450                           ; Regs used in _Escribir_comandoLCD: [wreg+status,2+status,0+pclath+cstack]
  1451                           ;Escribir_comandoLCD@Comando stored from wreg
  1452  0555  00F5               	movwf	Escribir_comandoLCD@Comando
  1453  0556                     l1856:
  1454                           
  1455                           ;LCD.c: 19:     RC0 = 0;
  1456  0556  1283               	bcf	3,5	;RP0=0, select bank0
  1457  0557  1303               	bcf	3,6	;RP1=0, select bank0
  1458  0558  1007               	bcf	7,0	;volatile
  1459  0559                     l1858:
  1460                           
  1461                           ;LCD.c: 20:     PORTD = Comando;
  1462  0559  0875               	movf	Escribir_comandoLCD@Comando,w
  1463  055A  0088               	movwf	8	;volatile
  1464  055B                     l1860:
  1465                           
  1466                           ;LCD.c: 22:     prender_ELCD();
  1467  055B  120A  118A  252C  120A  118A  	fcall	_prender_ELCD
  1468  0560                     l135:
  1469  0560  0008               	return
  1470  0561                     __end_of_Escribir_comandoLCD:
  1471                           
  1472                           	psect	text5
  1473  0541                     __ptext5:	
  1474 ;; *************** function _dato_recibido *****************
  1475 ;; Defined at:
  1476 ;;		line 183 in file "LAB2.c"
  1477 ;; Parameters:    Size  Location     Type
  1478 ;;		None
  1479 ;; Auto vars:     Size  Location     Type
  1480 ;;		None
  1481 ;; Return value:  Size  Location     Type
  1482 ;;                  1    wreg      void 
  1483 ;; Registers used:
  1484 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1485 ;; Tracked objects:
  1486 ;;		On entry : 0/0
  1487 ;;		On exit  : 0/0
  1488 ;;		Unchanged: 0/0
  1489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1490 ;;      Params:         0       0       0       0       0
  1491 ;;      Locals:         0       0       0       0       0
  1492 ;;      Temps:          0       3       0       0       0
  1493 ;;      Totals:         0       3       0       0       0
  1494 ;;Total ram usage:        3 bytes
  1495 ;; Hardware stack levels used: 1
  1496 ;; Hardware stack levels required when called: 4
  1497 ;; This function calls:
  1498 ;;		_sprintf
  1499 ;; This function is called by:
  1500 ;;		_main
  1501 ;; This function uses a non-reentrant model
  1502 ;;
  1503                           
  1504                           
  1505                           ;psect for function _dato_recibido
  1506  0541                     _dato_recibido:
  1507  0541                     l1936:	
  1508                           ;incstack = 0
  1509                           ; Regs used in _dato_recibido: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1510                           
  1511                           
  1512                           ;LAB2.c: 184:     sprintf(buffer3, "%d", Cont_U);
  1513  0541  3021               	movlw	(low (((STR_2+5)-__stringbase)| (0+32768)))& (0+255)
  1514  0542  1283               	bcf	3,5	;RP0=0, select bank0
  1515  0543  1303               	bcf	3,6	;RP1=0, select bank0
  1516  0544  00BD               	movwf	??_dato_recibido
  1517  0545  083D               	movf	??_dato_recibido,w
  1518  0546  00AC               	movwf	sprintf@f
  1519  0547  0845               	movf	_Cont_U,w
  1520  0548  00BE               	movwf	??_dato_recibido+1
  1521  0549  01BF               	clrf	??_dato_recibido+2
  1522  054A  083E               	movf	??_dato_recibido+1,w
  1523  054B  00AD               	movwf	?_sprintf+1
  1524  054C  083F               	movf	??_dato_recibido+2,w
  1525  054D  00AE               	movwf	?_sprintf+2
  1526  054E  3049               	movlw	(low (_buffer3| 0))& (0+255)
  1527  054F  120A  118A  2020  120A  118A  	fcall	_sprintf
  1528  0554                     l119:
  1529  0554  0008               	return
  1530  0555                     __end_of_dato_recibido:
  1531                           
  1532                           	psect	text6
  1533  025A                     __ptext6:	
  1534 ;; *************** function _conversion_char *****************
  1535 ;; Defined at:
  1536 ;;		line 167 in file "LAB2.c"
  1537 ;; Parameters:    Size  Location     Type
  1538 ;;		None
  1539 ;; Auto vars:     Size  Location     Type
  1540 ;;		None
  1541 ;; Return value:  Size  Location     Type
  1542 ;;                  1    wreg      void 
  1543 ;; Registers used:
  1544 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1545 ;; Tracked objects:
  1546 ;;		On entry : 0/0
  1547 ;;		On exit  : 0/0
  1548 ;;		Unchanged: 0/0
  1549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1550 ;;      Params:         0       0       0       0       0
  1551 ;;      Locals:         0       0       0       0       0
  1552 ;;      Temps:          0       7       0       0       0
  1553 ;;      Totals:         0       7       0       0       0
  1554 ;;Total ram usage:        7 bytes
  1555 ;; Hardware stack levels used: 1
  1556 ;; Hardware stack levels required when called: 4
  1557 ;; This function calls:
  1558 ;;		_divisor
  1559 ;;		_sprintf
  1560 ;; This function is called by:
  1561 ;;		_main
  1562 ;; This function uses a non-reentrant model
  1563 ;;
  1564                           
  1565                           
  1566                           ;psect for function _conversion_char
  1567  025A                     _conversion_char:
  1568  025A                     l1934:	
  1569                           ;incstack = 0
  1570                           ; Regs used in _conversion_char: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1571                           
  1572                           
  1573                           ;LAB2.c: 168:     divisor(cont1, vol1);
  1574  025A  3068               	movlw	(low (_vol1| 0))& (0+255)
  1575  025B  1283               	bcf	3,5	;RP0=0, select bank0
  1576  025C  1303               	bcf	3,6	;RP1=0, select bank0
  1577  025D  00BD               	movwf	??_conversion_char
  1578  025E  083D               	movf	??_conversion_char,w
  1579  025F  00F5               	movwf	divisor@dig
  1580  0260  0848               	movf	_cont1,w
  1581  0261  120A  118A  2310  120A  118A  	fcall	_divisor
  1582                           
  1583                           ;LAB2.c: 169:     sprintf(buffer1, "%d.%d%d", vol1[2], vol1[1], vol1[0]);
  1584  0266  301C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1585  0267  1283               	bcf	3,5	;RP0=0, select bank0
  1586  0268  1303               	bcf	3,6	;RP1=0, select bank0
  1587  0269  00BD               	movwf	??_conversion_char
  1588  026A  083D               	movf	??_conversion_char,w
  1589  026B  00AC               	movwf	sprintf@f
  1590  026C  086A               	movf	_vol1+2,w
  1591  026D  00BE               	movwf	??_conversion_char+1
  1592  026E  01BF               	clrf	??_conversion_char+2
  1593  026F  083E               	movf	??_conversion_char+1,w
  1594  0270  00AD               	movwf	?_sprintf+1
  1595  0271  083F               	movf	??_conversion_char+2,w
  1596  0272  00AE               	movwf	?_sprintf+2
  1597  0273  0869               	movf	_vol1+1,w
  1598  0274  00C0               	movwf	??_conversion_char+3
  1599  0275  01C1               	clrf	??_conversion_char+4
  1600  0276  0840               	movf	??_conversion_char+3,w
  1601  0277  00AF               	movwf	?_sprintf+3
  1602  0278  0841               	movf	??_conversion_char+4,w
  1603  0279  00B0               	movwf	?_sprintf+4
  1604  027A  0868               	movf	_vol1,w
  1605  027B  00C2               	movwf	??_conversion_char+5
  1606  027C  01C3               	clrf	??_conversion_char+6
  1607  027D  0842               	movf	??_conversion_char+5,w
  1608  027E  00B1               	movwf	?_sprintf+5
  1609  027F  0843               	movf	??_conversion_char+6,w
  1610  0280  00B2               	movwf	?_sprintf+6
  1611  0281  305D               	movlw	(low (_buffer1| 0))& (0+255)
  1612  0282  120A  118A  2020  120A  118A  	fcall	_sprintf
  1613                           
  1614                           ;LAB2.c: 171:     divisor(cont2, vol2);
  1615  0287  3067               	movlw	(low (_vol2| 0))& (0+255)
  1616  0288  1283               	bcf	3,5	;RP0=0, select bank0
  1617  0289  1303               	bcf	3,6	;RP1=0, select bank0
  1618  028A  00BD               	movwf	??_conversion_char
  1619  028B  083D               	movf	??_conversion_char,w
  1620  028C  00F5               	movwf	divisor@dig
  1621  028D  0847               	movf	_cont2,w
  1622  028E  120A  118A  2310  120A  118A  	fcall	_divisor
  1623                           
  1624                           ;LAB2.c: 172:     sprintf(buffer2, "%d.%d%d", vol2[2], vol2[1], vol2[0]);
  1625  0293  301C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1626  0294  1283               	bcf	3,5	;RP0=0, select bank0
  1627  0295  1303               	bcf	3,6	;RP1=0, select bank0
  1628  0296  00BD               	movwf	??_conversion_char
  1629  0297  083D               	movf	??_conversion_char,w
  1630  0298  00AC               	movwf	sprintf@f
  1631  0299  0869               	movf	_vol2+2,w
  1632  029A  00BE               	movwf	??_conversion_char+1
  1633  029B  01BF               	clrf	??_conversion_char+2
  1634  029C  083E               	movf	??_conversion_char+1,w
  1635  029D  00AD               	movwf	?_sprintf+1
  1636  029E  083F               	movf	??_conversion_char+2,w
  1637  029F  00AE               	movwf	?_sprintf+2
  1638  02A0  0868               	movf	_vol2+1,w
  1639  02A1  00C0               	movwf	??_conversion_char+3
  1640  02A2  01C1               	clrf	??_conversion_char+4
  1641  02A3  0840               	movf	??_conversion_char+3,w
  1642  02A4  00AF               	movwf	?_sprintf+3
  1643  02A5  0841               	movf	??_conversion_char+4,w
  1644  02A6  00B0               	movwf	?_sprintf+4
  1645  02A7  0867               	movf	_vol2,w
  1646  02A8  00C2               	movwf	??_conversion_char+5
  1647  02A9  01C3               	clrf	??_conversion_char+6
  1648  02AA  0842               	movf	??_conversion_char+5,w
  1649  02AB  00B1               	movwf	?_sprintf+5
  1650  02AC  0843               	movf	??_conversion_char+6,w
  1651  02AD  00B2               	movwf	?_sprintf+6
  1652  02AE  3053               	movlw	(low (_buffer2| 0))& (0+255)
  1653  02AF  120A  118A  2020  120A  118A  	fcall	_sprintf
  1654  02B4                     l111:
  1655  02B4  0008               	return
  1656  02B5                     __end_of_conversion_char:
  1657                           
  1658                           	psect	text7
  1659  0020                     __ptext7:	
  1660 ;; *************** function _sprintf *****************
  1661 ;; Defined at:
  1662 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c"
  1663 ;; Parameters:    Size  Location     Type
  1664 ;;  sp              1    wreg     PTR unsigned char 
  1665 ;;		 -> buffer3(10), buffer2(10), buffer1(10), 
  1666 ;;  f               1   12[BANK0 ] PTR const unsigned char 
  1667 ;;		 -> STR_4(3), STR_3(8), STR_2(8), 
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;  sp              1   27[BANK0 ] PTR unsigned char 
  1670 ;;		 -> buffer3(10), buffer2(10), buffer1(10), 
  1671 ;;  tmpval          4    0        struct .
  1672 ;;  val             2   25[BANK0 ] unsigned int 
  1673 ;;  cp              2    0        PTR const unsigned char 
  1674 ;;  len             2    0        unsigned int 
  1675 ;;  c               1   28[BANK0 ] unsigned char 
  1676 ;;  prec            1   24[BANK0 ] char 
  1677 ;;  flag            1   23[BANK0 ] unsigned char 
  1678 ;;  ap              1   22[BANK0 ] PTR void [1]
  1679 ;;		 -> ?_sprintf(2), 
  1680 ;; Return value:  Size  Location     Type
  1681 ;;                  2   12[BANK0 ] int 
  1682 ;; Registers used:
  1683 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1684 ;; Tracked objects:
  1685 ;;		On entry : 0/0
  1686 ;;		On exit  : 0/0
  1687 ;;		Unchanged: 0/0
  1688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1689 ;;      Params:         0       7       0       0       0
  1690 ;;      Locals:         0       7       0       0       0
  1691 ;;      Temps:          0       3       0       0       0
  1692 ;;      Totals:         0      17       0       0       0
  1693 ;;Total ram usage:       17 bytes
  1694 ;; Hardware stack levels used: 1
  1695 ;; Hardware stack levels required when called: 3
  1696 ;; This function calls:
  1697 ;;		___lwdiv
  1698 ;;		___lwmod
  1699 ;; This function is called by:
  1700 ;;		_conversion_char
  1701 ;;		_dato_recibido
  1702 ;; This function uses a non-reentrant model
  1703 ;;
  1704                           
  1705                           
  1706                           ;psect for function _sprintf
  1707  0020                     _sprintf:
  1708                           
  1709                           ;incstack = 0
  1710                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1711                           ;sprintf@sp stored from wreg
  1712  0020  1283               	bcf	3,5	;RP0=0, select bank0
  1713  0021  1303               	bcf	3,6	;RP1=0, select bank0
  1714  0022  00BB               	movwf	sprintf@sp
  1715  0023                     l1794:
  1716                           
  1717                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  1718  0023  302D               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1719  0024  00B3               	movwf	??_sprintf
  1720  0025  0833               	movf	??_sprintf,w
  1721  0026  00B6               	movwf	sprintf@ap
  1722                           
  1723                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1724  0027  28F3               	goto	l1846
  1725  0028                     l1796:
  1726                           
  1727                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1728  0028  3025               	movlw	37
  1729  0029  063C               	xorwf	sprintf@c,w
  1730  002A  1903               	btfsc	3,2
  1731  002B  282D               	goto	u1321
  1732  002C  282E               	goto	u1320
  1733  002D                     u1321:
  1734  002D  283A               	goto	l1802
  1735  002E                     u1320:
  1736  002E                     l1798:
  1737                           
  1738                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1739  002E  083C               	movf	sprintf@c,w
  1740  002F  00B3               	movwf	??_sprintf
  1741  0030  083B               	movf	sprintf@sp,w
  1742  0031  0084               	movwf	4
  1743  0032  0833               	movf	??_sprintf,w
  1744  0033  1383               	bcf	3,7	;select IRP bank0
  1745  0034  0080               	movwf	0
  1746  0035                     l1800:
  1747  0035  3001               	movlw	1
  1748  0036  00B3               	movwf	??_sprintf
  1749  0037  0833               	movf	??_sprintf,w
  1750  0038  07BB               	addwf	sprintf@sp,f
  1751                           
  1752                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 559:    continue;
  1753  0039  28F3               	goto	l1846
  1754  003A                     l1802:
  1755                           
  1756                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1757  003A  01B7               	clrf	sprintf@flag
  1758  003B                     l1806:	
  1759                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  1760                           
  1761  003B  3001               	movlw	1
  1762  003C  07AC               	addwf	sprintf@f,f
  1763  003D  30FF               	movlw	-1
  1764  003E  072C               	addwf	sprintf@f,w
  1765  003F  0084               	movwf	4
  1766  0040  120A  118A  2443  120A  118A  	fcall	stringdir
  1767  0045  00BC               	movwf	sprintf@c
  1768  0046  00B3               	movwf	??_sprintf
  1769  0047  01B4               	clrf	??_sprintf+1
  1770                           
  1771                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1772                           ; Switch size 1, requested type "simple"
  1773                           ; Number of cases is 1, Range of values is 0 to 0
  1774                           ; switch strategies available:
  1775                           ; Name         Instructions Cycles
  1776                           ; simple_byte            4     3 (average)
  1777                           ; direct_byte           11     8 (fixed)
  1778                           ; jumptable            260     6 (fixed)
  1779                           ;	Chosen strategy is simple_byte
  1780  0048  0834               	movf	??_sprintf+1,w
  1781  0049  3A00               	xorlw	0	; case 0
  1782  004A  1903               	skipnz
  1783  004B  284D               	goto	l1982
  1784  004C  28F3               	goto	l1846
  1785  004D                     l1982:
  1786                           
  1787                           ; Switch size 1, requested type "simple"
  1788                           ; Number of cases is 3, Range of values is 0 to 105
  1789                           ; switch strategies available:
  1790                           ; Name         Instructions Cycles
  1791                           ; simple_byte           10     6 (average)
  1792                           ; jumptable            260     6 (fixed)
  1793                           ;	Chosen strategy is simple_byte
  1794  004D  0833               	movf	??_sprintf,w
  1795  004E  3A00               	xorlw	0	; case 0
  1796  004F  1903               	skipnz
  1797  0050  2905               	goto	l1848
  1798  0051  3A64               	xorlw	100	; case 100
  1799  0052  1903               	skipnz
  1800  0053  2858               	goto	l1808
  1801  0054  3A0D               	xorlw	13	; case 105
  1802  0055  1903               	skipnz
  1803  0056  2858               	goto	l1808
  1804  0057  28F3               	goto	l1846
  1805  0058                     l1808:
  1806                           
  1807                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1808  0058  0836               	movf	sprintf@ap,w
  1809  0059  0084               	movwf	4
  1810  005A  1383               	bcf	3,7	;select IRP bank0
  1811  005B  0800               	movf	0,w
  1812  005C  00B9               	movwf	sprintf@val
  1813  005D  0A84               	incf	4,f
  1814  005E  0800               	movf	0,w
  1815  005F  00BA               	movwf	sprintf@val+1
  1816  0060                     l1810:
  1817  0060  3002               	movlw	2
  1818  0061  00B3               	movwf	??_sprintf
  1819  0062  0833               	movf	??_sprintf,w
  1820  0063  07B6               	addwf	sprintf@ap,f
  1821  0064                     l1812:
  1822                           
  1823                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1824  0064  1FBA               	btfss	sprintf@val+1,7
  1825  0065  2867               	goto	u1331
  1826  0066  2868               	goto	u1330
  1827  0067                     u1331:
  1828  0067  2871               	goto	l1818
  1829  0068                     u1330:
  1830  0068                     l1814:
  1831                           
  1832                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1833  0068  3003               	movlw	3
  1834  0069  00B3               	movwf	??_sprintf
  1835  006A  0833               	movf	??_sprintf,w
  1836  006B  04B7               	iorwf	sprintf@flag,f
  1837  006C                     l1816:
  1838                           
  1839                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1840  006C  09B9               	comf	sprintf@val,f
  1841  006D  09BA               	comf	sprintf@val+1,f
  1842  006E  0AB9               	incf	sprintf@val,f
  1843  006F  1903               	skipnz
  1844  0070  0ABA               	incf	sprintf@val+1,f
  1845  0071                     l1818:
  1846                           
  1847                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1848  0071  01BC               	clrf	sprintf@c
  1849  0072  0ABC               	incf	sprintf@c,f
  1850  0073                     l1824:
  1851                           
  1852                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1853  0073  083C               	movf	sprintf@c,w
  1854  0074  00B3               	movwf	??_sprintf
  1855  0075  0733               	addwf	??_sprintf,w
  1856  0076  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1857  0077  0084               	movwf	4
  1858  0078  120A  118A  2443  120A  118A  	fcall	stringdir
  1859  007D  00B4               	movwf	??_sprintf+1
  1860  007E  120A  118A  2443  120A  118A  	fcall	stringdir
  1861  0083  00B5               	movwf	??_sprintf+2
  1862  0084  0835               	movf	??_sprintf+2,w
  1863  0085  023A               	subwf	sprintf@val+1,w
  1864  0086  1D03               	skipz
  1865  0087  288A               	goto	u1345
  1866  0088  0834               	movf	??_sprintf+1,w
  1867  0089  0239               	subwf	sprintf@val,w
  1868  008A                     u1345:
  1869  008A  1803               	skipnc
  1870  008B  288D               	goto	u1341
  1871  008C  288E               	goto	u1340
  1872  008D                     u1341:
  1873  008D  288F               	goto	l1828
  1874  008E                     u1340:
  1875  008E  2899               	goto	l1830
  1876  008F                     l1828:
  1877  008F  3001               	movlw	1
  1878  0090  00B3               	movwf	??_sprintf
  1879  0091  0833               	movf	??_sprintf,w
  1880  0092  07BC               	addwf	sprintf@c,f
  1881  0093  3005               	movlw	5
  1882  0094  063C               	xorwf	sprintf@c,w
  1883  0095  1D03               	btfss	3,2
  1884  0096  2898               	goto	u1351
  1885  0097  2899               	goto	u1350
  1886  0098                     u1351:
  1887  0098  2873               	goto	l1824
  1888  0099                     u1350:
  1889  0099                     l1830:
  1890                           
  1891                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  1892  0099  0837               	movf	sprintf@flag,w
  1893  009A  3903               	andlw	3
  1894  009B  1903               	btfsc	3,2
  1895  009C  289E               	goto	u1361
  1896  009D  289F               	goto	u1360
  1897  009E                     u1361:
  1898  009E  28AA               	goto	l1836
  1899  009F                     u1360:
  1900  009F                     l1832:
  1901                           
  1902                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1903  009F  302D               	movlw	45
  1904  00A0  00B3               	movwf	??_sprintf
  1905  00A1  083B               	movf	sprintf@sp,w
  1906  00A2  0084               	movwf	4
  1907  00A3  0833               	movf	??_sprintf,w
  1908  00A4  1383               	bcf	3,7	;select IRP bank0
  1909  00A5  0080               	movwf	0
  1910  00A6                     l1834:
  1911  00A6  3001               	movlw	1
  1912  00A7  00B3               	movwf	??_sprintf
  1913  00A8  0833               	movf	??_sprintf,w
  1914  00A9  07BB               	addwf	sprintf@sp,f
  1915  00AA                     l1836:
  1916                           
  1917                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1918  00AA  083C               	movf	sprintf@c,w
  1919  00AB  00B3               	movwf	??_sprintf
  1920  00AC  0833               	movf	??_sprintf,w
  1921  00AD  00B8               	movwf	sprintf@prec
  1922                           
  1923                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1924  00AE  28EA               	goto	l1844
  1925  00AF                     l1838:
  1926                           
  1927                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1928  00AF  300A               	movlw	10
  1929  00B0  00A7               	movwf	___lwmod@divisor
  1930  00B1  3000               	movlw	0
  1931  00B2  00A8               	movwf	___lwmod@divisor+1
  1932  00B3  0838               	movf	sprintf@prec,w
  1933  00B4  00B3               	movwf	??_sprintf
  1934  00B5  0733               	addwf	??_sprintf,w
  1935  00B6  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1936  00B7  0084               	movwf	4
  1937  00B8  120A  118A  2443  120A  118A  	fcall	stringdir
  1938  00BD  00A0               	movwf	___lwdiv@divisor
  1939  00BE  120A  118A  2443  120A  118A  	fcall	stringdir
  1940  00C3  00A1               	movwf	___lwdiv@divisor+1
  1941  00C4  083A               	movf	sprintf@val+1,w
  1942  00C5  00A3               	movwf	___lwdiv@dividend+1
  1943  00C6  0839               	movf	sprintf@val,w
  1944  00C7  00A2               	movwf	___lwdiv@dividend
  1945  00C8  120A  118A  23B7  120A  118A  	fcall	___lwdiv
  1946  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  1947  00CE  1303               	bcf	3,6	;RP1=0, select bank0
  1948  00CF  0821               	movf	?___lwdiv+1,w
  1949  00D0  00AA               	movwf	___lwmod@dividend+1
  1950  00D1  0820               	movf	?___lwdiv,w
  1951  00D2  00A9               	movwf	___lwmod@dividend
  1952  00D3  120A  118A  23FD  120A  118A  	fcall	___lwmod
  1953  00D8  1283               	bcf	3,5	;RP0=0, select bank0
  1954  00D9  1303               	bcf	3,6	;RP1=0, select bank0
  1955  00DA  0827               	movf	?___lwmod,w
  1956  00DB  3E30               	addlw	48
  1957  00DC  00B4               	movwf	??_sprintf+1
  1958  00DD  0834               	movf	??_sprintf+1,w
  1959  00DE  00BC               	movwf	sprintf@c
  1960  00DF                     l1840:
  1961                           
  1962                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1963  00DF  083C               	movf	sprintf@c,w
  1964  00E0  00B3               	movwf	??_sprintf
  1965  00E1  083B               	movf	sprintf@sp,w
  1966  00E2  0084               	movwf	4
  1967  00E3  0833               	movf	??_sprintf,w
  1968  00E4  1383               	bcf	3,7	;select IRP bank0
  1969  00E5  0080               	movwf	0
  1970  00E6                     l1842:
  1971  00E6  3001               	movlw	1
  1972  00E7  00B3               	movwf	??_sprintf
  1973  00E8  0833               	movf	??_sprintf,w
  1974  00E9  07BB               	addwf	sprintf@sp,f
  1975  00EA                     l1844:
  1976                           
  1977                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1978  00EA  30FF               	movlw	255
  1979  00EB  00B3               	movwf	??_sprintf
  1980  00EC  0833               	movf	??_sprintf,w
  1981  00ED  07B8               	addwf	sprintf@prec,f
  1982  00EE  0A38               	incf	sprintf@prec,w
  1983  00EF  1D03               	btfss	3,2
  1984  00F0  28F2               	goto	u1371
  1985  00F1  28F3               	goto	u1370
  1986  00F2                     u1371:
  1987  00F2  28AF               	goto	l1838
  1988  00F3                     u1370:
  1989  00F3                     l1846:
  1990                           
  1991                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1992  00F3  3001               	movlw	1
  1993  00F4  07AC               	addwf	sprintf@f,f
  1994  00F5  30FF               	movlw	-1
  1995  00F6  072C               	addwf	sprintf@f,w
  1996  00F7  0084               	movwf	4
  1997  00F8  120A  118A  2443  120A  118A  	fcall	stringdir
  1998  00FD  00B3               	movwf	??_sprintf
  1999  00FE  0833               	movf	??_sprintf,w
  2000  00FF  00BC               	movwf	sprintf@c
  2001  0100  083C               	movf	sprintf@c,w
  2002  0101  1D03               	btfss	3,2
  2003  0102  2904               	goto	u1381
  2004  0103  2905               	goto	u1380
  2005  0104                     u1381:
  2006  0104  2828               	goto	l1796
  2007  0105                     u1380:
  2008  0105                     l1848:
  2009                           
  2010                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  2011  0105  083B               	movf	sprintf@sp,w
  2012  0106  0084               	movwf	4
  2013  0107  1383               	bcf	3,7	;select IRP bank0
  2014  0108  0180               	clrf	0
  2015  0109                     l300:
  2016  0109  0008               	return
  2017  010A                     __end_of_sprintf:
  2018                           
  2019                           	psect	text8
  2020  03FD                     __ptext8:	
  2021 ;; *************** function ___lwmod *****************
  2022 ;; Defined at:
  2023 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  2024 ;; Parameters:    Size  Location     Type
  2025 ;;  divisor         2    7[BANK0 ] unsigned int 
  2026 ;;  dividend        2    9[BANK0 ] unsigned int 
  2027 ;; Auto vars:     Size  Location     Type
  2028 ;;  counter         1   11[BANK0 ] unsigned char 
  2029 ;; Return value:  Size  Location     Type
  2030 ;;                  2    7[BANK0 ] unsigned int 
  2031 ;; Registers used:
  2032 ;;		wreg, status,2, status,0
  2033 ;; Tracked objects:
  2034 ;;		On entry : 0/0
  2035 ;;		On exit  : 0/0
  2036 ;;		Unchanged: 0/0
  2037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2038 ;;      Params:         0       4       0       0       0
  2039 ;;      Locals:         0       1       0       0       0
  2040 ;;      Temps:          1       0       0       0       0
  2041 ;;      Totals:         1       5       0       0       0
  2042 ;;Total ram usage:        6 bytes
  2043 ;; Hardware stack levels used: 1
  2044 ;; Hardware stack levels required when called: 2
  2045 ;; This function calls:
  2046 ;;		Nothing
  2047 ;; This function is called by:
  2048 ;;		_sprintf
  2049 ;; This function uses a non-reentrant model
  2050 ;;
  2051                           
  2052                           
  2053                           ;psect for function ___lwmod
  2054  03FD                     ___lwmod:
  2055  03FD                     l1342:	
  2056                           ;incstack = 0
  2057                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2058                           
  2059  03FD  1283               	bcf	3,5	;RP0=0, select bank0
  2060  03FE  1303               	bcf	3,6	;RP1=0, select bank0
  2061  03FF  0827               	movf	___lwmod@divisor,w
  2062  0400  0428               	iorwf	___lwmod@divisor+1,w
  2063  0401  1903               	btfsc	3,2
  2064  0402  2C04               	goto	u791
  2065  0403  2C05               	goto	u790
  2066  0404                     u791:
  2067  0404  2C34               	goto	l1360
  2068  0405                     u790:
  2069  0405                     l1344:
  2070  0405  01AB               	clrf	___lwmod@counter
  2071  0406  0AAB               	incf	___lwmod@counter,f
  2072  0407  2C13               	goto	l1350
  2073  0408                     l1346:
  2074  0408  3001               	movlw	1
  2075  0409                     u805:
  2076  0409  1003               	clrc
  2077  040A  0DA7               	rlf	___lwmod@divisor,f
  2078  040B  0DA8               	rlf	___lwmod@divisor+1,f
  2079  040C  3EFF               	addlw	-1
  2080  040D  1D03               	skipz
  2081  040E  2C09               	goto	u805
  2082  040F                     l1348:
  2083  040F  3001               	movlw	1
  2084  0410  00F5               	movwf	??___lwmod
  2085  0411  0875               	movf	??___lwmod,w
  2086  0412  07AB               	addwf	___lwmod@counter,f
  2087  0413                     l1350:
  2088  0413  1FA8               	btfss	___lwmod@divisor+1,7
  2089  0414  2C16               	goto	u811
  2090  0415  2C17               	goto	u810
  2091  0416                     u811:
  2092  0416  2C08               	goto	l1346
  2093  0417                     u810:
  2094  0417                     l1352:
  2095  0417  0828               	movf	___lwmod@divisor+1,w
  2096  0418  022A               	subwf	___lwmod@dividend+1,w
  2097  0419  1D03               	skipz
  2098  041A  2C1D               	goto	u825
  2099  041B  0827               	movf	___lwmod@divisor,w
  2100  041C  0229               	subwf	___lwmod@dividend,w
  2101  041D                     u825:
  2102  041D  1C03               	skipc
  2103  041E  2C20               	goto	u821
  2104  041F  2C21               	goto	u820
  2105  0420                     u821:
  2106  0420  2C27               	goto	l1356
  2107  0421                     u820:
  2108  0421                     l1354:
  2109  0421  0827               	movf	___lwmod@divisor,w
  2110  0422  02A9               	subwf	___lwmod@dividend,f
  2111  0423  0828               	movf	___lwmod@divisor+1,w
  2112  0424  1C03               	skipc
  2113  0425  03AA               	decf	___lwmod@dividend+1,f
  2114  0426  02AA               	subwf	___lwmod@dividend+1,f
  2115  0427                     l1356:
  2116  0427  3001               	movlw	1
  2117  0428                     u835:
  2118  0428  1003               	clrc
  2119  0429  0CA8               	rrf	___lwmod@divisor+1,f
  2120  042A  0CA7               	rrf	___lwmod@divisor,f
  2121  042B  3EFF               	addlw	-1
  2122  042C  1D03               	skipz
  2123  042D  2C28               	goto	u835
  2124  042E                     l1358:
  2125  042E  3001               	movlw	1
  2126  042F  02AB               	subwf	___lwmod@counter,f
  2127  0430  1D03               	btfss	3,2
  2128  0431  2C33               	goto	u841
  2129  0432  2C34               	goto	u840
  2130  0433                     u841:
  2131  0433  2C17               	goto	l1352
  2132  0434                     u840:
  2133  0434                     l1360:
  2134  0434  082A               	movf	___lwmod@dividend+1,w
  2135  0435  00A8               	movwf	?___lwmod+1
  2136  0436  0829               	movf	___lwmod@dividend,w
  2137  0437  00A7               	movwf	?___lwmod
  2138  0438                     l586:
  2139  0438  0008               	return
  2140  0439                     __end_of___lwmod:
  2141                           
  2142                           	psect	text9
  2143  03B7                     __ptext9:	
  2144 ;; *************** function ___lwdiv *****************
  2145 ;; Defined at:
  2146 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  2147 ;; Parameters:    Size  Location     Type
  2148 ;;  divisor         2    0[BANK0 ] unsigned int 
  2149 ;;  dividend        2    2[BANK0 ] unsigned int 
  2150 ;; Auto vars:     Size  Location     Type
  2151 ;;  quotient        2    5[BANK0 ] unsigned int 
  2152 ;;  counter         1    4[BANK0 ] unsigned char 
  2153 ;; Return value:  Size  Location     Type
  2154 ;;                  2    0[BANK0 ] unsigned int 
  2155 ;; Registers used:
  2156 ;;		wreg, status,2, status,0
  2157 ;; Tracked objects:
  2158 ;;		On entry : 0/0
  2159 ;;		On exit  : 0/0
  2160 ;;		Unchanged: 0/0
  2161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2162 ;;      Params:         0       4       0       0       0
  2163 ;;      Locals:         0       3       0       0       0
  2164 ;;      Temps:          1       0       0       0       0
  2165 ;;      Totals:         1       7       0       0       0
  2166 ;;Total ram usage:        8 bytes
  2167 ;; Hardware stack levels used: 1
  2168 ;; Hardware stack levels required when called: 2
  2169 ;; This function calls:
  2170 ;;		Nothing
  2171 ;; This function is called by:
  2172 ;;		_sprintf
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           
  2177                           ;psect for function ___lwdiv
  2178  03B7                     ___lwdiv:
  2179  03B7                     l1728:	
  2180                           ;incstack = 0
  2181                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2182                           
  2183  03B7  1283               	bcf	3,5	;RP0=0, select bank0
  2184  03B8  1303               	bcf	3,6	;RP1=0, select bank0
  2185  03B9  01A5               	clrf	___lwdiv@quotient
  2186  03BA  01A6               	clrf	___lwdiv@quotient+1
  2187  03BB                     l1730:
  2188  03BB  0820               	movf	___lwdiv@divisor,w
  2189  03BC  0421               	iorwf	___lwdiv@divisor+1,w
  2190  03BD  1903               	btfsc	3,2
  2191  03BE  2BC0               	goto	u1241
  2192  03BF  2BC1               	goto	u1240
  2193  03C0                     u1241:
  2194  03C0  2BF8               	goto	l1750
  2195  03C1                     u1240:
  2196  03C1                     l1732:
  2197  03C1  01A4               	clrf	___lwdiv@counter
  2198  03C2  0AA4               	incf	___lwdiv@counter,f
  2199  03C3  2BCF               	goto	l1738
  2200  03C4                     l1734:
  2201  03C4  3001               	movlw	1
  2202  03C5                     u1255:
  2203  03C5  1003               	clrc
  2204  03C6  0DA0               	rlf	___lwdiv@divisor,f
  2205  03C7  0DA1               	rlf	___lwdiv@divisor+1,f
  2206  03C8  3EFF               	addlw	-1
  2207  03C9  1D03               	skipz
  2208  03CA  2BC5               	goto	u1255
  2209  03CB                     l1736:
  2210  03CB  3001               	movlw	1
  2211  03CC  00F4               	movwf	??___lwdiv
  2212  03CD  0874               	movf	??___lwdiv,w
  2213  03CE  07A4               	addwf	___lwdiv@counter,f
  2214  03CF                     l1738:
  2215  03CF  1FA1               	btfss	___lwdiv@divisor+1,7
  2216  03D0  2BD2               	goto	u1261
  2217  03D1  2BD3               	goto	u1260
  2218  03D2                     u1261:
  2219  03D2  2BC4               	goto	l1734
  2220  03D3                     u1260:
  2221  03D3                     l1740:
  2222  03D3  3001               	movlw	1
  2223  03D4                     u1275:
  2224  03D4  1003               	clrc
  2225  03D5  0DA5               	rlf	___lwdiv@quotient,f
  2226  03D6  0DA6               	rlf	___lwdiv@quotient+1,f
  2227  03D7  3EFF               	addlw	-1
  2228  03D8  1D03               	skipz
  2229  03D9  2BD4               	goto	u1275
  2230  03DA  0821               	movf	___lwdiv@divisor+1,w
  2231  03DB  0223               	subwf	___lwdiv@dividend+1,w
  2232  03DC  1D03               	skipz
  2233  03DD  2BE0               	goto	u1285
  2234  03DE  0820               	movf	___lwdiv@divisor,w
  2235  03DF  0222               	subwf	___lwdiv@dividend,w
  2236  03E0                     u1285:
  2237  03E0  1C03               	skipc
  2238  03E1  2BE3               	goto	u1281
  2239  03E2  2BE4               	goto	u1280
  2240  03E3                     u1281:
  2241  03E3  2BEB               	goto	l1746
  2242  03E4                     u1280:
  2243  03E4                     l1742:
  2244  03E4  0820               	movf	___lwdiv@divisor,w
  2245  03E5  02A2               	subwf	___lwdiv@dividend,f
  2246  03E6  0821               	movf	___lwdiv@divisor+1,w
  2247  03E7  1C03               	skipc
  2248  03E8  03A3               	decf	___lwdiv@dividend+1,f
  2249  03E9  02A3               	subwf	___lwdiv@dividend+1,f
  2250  03EA                     l1744:
  2251  03EA  1425               	bsf	___lwdiv@quotient,0
  2252  03EB                     l1746:
  2253  03EB  3001               	movlw	1
  2254  03EC                     u1295:
  2255  03EC  1003               	clrc
  2256  03ED  0CA1               	rrf	___lwdiv@divisor+1,f
  2257  03EE  0CA0               	rrf	___lwdiv@divisor,f
  2258  03EF  3EFF               	addlw	-1
  2259  03F0  1D03               	skipz
  2260  03F1  2BEC               	goto	u1295
  2261  03F2                     l1748:
  2262  03F2  3001               	movlw	1
  2263  03F3  02A4               	subwf	___lwdiv@counter,f
  2264  03F4  1D03               	btfss	3,2
  2265  03F5  2BF7               	goto	u1301
  2266  03F6  2BF8               	goto	u1300
  2267  03F7                     u1301:
  2268  03F7  2BD3               	goto	l1740
  2269  03F8                     u1300:
  2270  03F8                     l1750:
  2271  03F8  0826               	movf	___lwdiv@quotient+1,w
  2272  03F9  00A1               	movwf	?___lwdiv+1
  2273  03FA  0825               	movf	___lwdiv@quotient,w
  2274  03FB  00A0               	movwf	?___lwdiv
  2275  03FC                     l576:
  2276  03FC  0008               	return
  2277  03FD                     __end_of___lwdiv:
  2278                           
  2279                           	psect	text10
  2280  0310                     __ptext10:	
  2281 ;; *************** function _divisor *****************
  2282 ;; Defined at:
  2283 ;;		line 175 in file "LAB2.c"
  2284 ;; Parameters:    Size  Location     Type
  2285 ;;  a               1    wreg     unsigned char 
  2286 ;;  dig             1    5[COMMON] PTR unsigned char 
  2287 ;;		 -> vol2(1), vol1(1), 
  2288 ;; Auto vars:     Size  Location     Type
  2289 ;;  a               1   10[BANK0 ] unsigned char 
  2290 ;;  i               2   13[BANK0 ] int 
  2291 ;;  b               2   11[BANK0 ] int 
  2292 ;; Return value:  Size  Location     Type
  2293 ;;                  1    wreg      void 
  2294 ;; Registers used:
  2295 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2296 ;; Tracked objects:
  2297 ;;		On entry : 0/0
  2298 ;;		On exit  : 0/0
  2299 ;;		Unchanged: 0/0
  2300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2301 ;;      Params:         1       0       0       0       0
  2302 ;;      Locals:         0       5       0       0       0
  2303 ;;      Temps:          0       2       0       0       0
  2304 ;;      Totals:         1       7       0       0       0
  2305 ;;Total ram usage:        8 bytes
  2306 ;; Hardware stack levels used: 1
  2307 ;; Hardware stack levels required when called: 3
  2308 ;; This function calls:
  2309 ;;		___awdiv
  2310 ;;		___awmod
  2311 ;; This function is called by:
  2312 ;;		_conversion_char
  2313 ;; This function uses a non-reentrant model
  2314 ;;
  2315                           
  2316                           
  2317                           ;psect for function _divisor
  2318  0310                     _divisor:
  2319                           
  2320                           ;incstack = 0
  2321                           ; Regs used in _divisor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2322                           ;divisor@a stored from wreg
  2323  0310  1283               	bcf	3,5	;RP0=0, select bank0
  2324  0311  1303               	bcf	3,6	;RP1=0, select bank0
  2325  0312  00AA               	movwf	divisor@a
  2326  0313                     l1780:
  2327                           
  2328                           ;LAB2.c: 176:     int b = 2*a;
  2329  0313  082A               	movf	divisor@a,w
  2330  0314  00A8               	movwf	??_divisor
  2331  0315  01A9               	clrf	??_divisor+1
  2332  0316  1003               	clrc
  2333  0317  0D28               	rlf	??_divisor,w
  2334  0318  00AB               	movwf	divisor@b
  2335  0319  0D29               	rlf	??_divisor+1,w
  2336  031A  00AC               	movwf	divisor@b+1
  2337  031B                     l1782:
  2338                           
  2339                           ;LAB2.c: 177:     for(int i = 0; i<3 ; i++){
  2340  031B  01AD               	clrf	divisor@i
  2341  031C  01AE               	clrf	divisor@i+1
  2342  031D                     l1788:
  2343                           
  2344                           ;LAB2.c: 178:         dig[i] = b % 10;
  2345  031D  300A               	movlw	10
  2346  031E  1283               	bcf	3,5	;RP0=0, select bank0
  2347  031F  1303               	bcf	3,6	;RP1=0, select bank0
  2348  0320  00A0               	movwf	___awmod@divisor
  2349  0321  3000               	movlw	0
  2350  0322  00A1               	movwf	___awmod@divisor+1
  2351  0323  082C               	movf	divisor@b+1,w
  2352  0324  00A3               	movwf	___awmod@dividend+1
  2353  0325  082B               	movf	divisor@b,w
  2354  0326  00A2               	movwf	___awmod@dividend
  2355  0327  120A  118A  22B5  120A  118A  	fcall	___awmod
  2356  032C  1283               	bcf	3,5	;RP0=0, select bank0
  2357  032D  1303               	bcf	3,6	;RP1=0, select bank0
  2358  032E  0820               	movf	?___awmod,w
  2359  032F  00A8               	movwf	??_divisor
  2360  0330  082D               	movf	divisor@i,w
  2361  0331  0775               	addwf	divisor@dig,w
  2362  0332  00A9               	movwf	??_divisor+1
  2363  0333  0829               	movf	??_divisor+1,w
  2364  0334  0084               	movwf	4
  2365  0335  0828               	movf	??_divisor,w
  2366  0336  1383               	bcf	3,7	;select IRP bank0
  2367  0337  0080               	movwf	0
  2368                           
  2369                           ;LAB2.c: 179:         b = (b - dig[i])/10;
  2370  0338  300A               	movlw	10
  2371  0339  00A0               	movwf	___awdiv@divisor
  2372  033A  3000               	movlw	0
  2373  033B  00A1               	movwf	___awdiv@divisor+1
  2374  033C  082D               	movf	divisor@i,w
  2375  033D  0775               	addwf	divisor@dig,w
  2376  033E  00A8               	movwf	??_divisor
  2377  033F  0828               	movf	??_divisor,w
  2378  0340  0084               	movwf	4
  2379  0341  0800               	movf	0,w
  2380  0342  022B               	subwf	divisor@b,w
  2381  0343  00A2               	movwf	___awdiv@dividend
  2382  0344  082C               	movf	divisor@b+1,w
  2383  0345  1C03               	skipc
  2384  0346  032C               	decf	divisor@b+1,w
  2385  0347  00A3               	movwf	___awdiv@dividend+1
  2386  0348  120A  118A  21F1  120A  118A  	fcall	___awdiv
  2387  034D  1283               	bcf	3,5	;RP0=0, select bank0
  2388  034E  1303               	bcf	3,6	;RP1=0, select bank0
  2389  034F  0821               	movf	?___awdiv+1,w
  2390  0350  00AC               	movwf	divisor@b+1
  2391  0351  0820               	movf	?___awdiv,w
  2392  0352  00AB               	movwf	divisor@b
  2393  0353                     l1790:
  2394                           
  2395                           ;LAB2.c: 180:     }
  2396  0353  3001               	movlw	1
  2397  0354  07AD               	addwf	divisor@i,f
  2398  0355  1803               	skipnc
  2399  0356  0AAE               	incf	divisor@i+1,f
  2400  0357  3000               	movlw	0
  2401  0358  07AE               	addwf	divisor@i+1,f
  2402  0359                     l1792:
  2403  0359  082E               	movf	divisor@i+1,w
  2404  035A  3A80               	xorlw	128
  2405  035B  00FF               	movwf	btemp+1
  2406  035C  3080               	movlw	128
  2407  035D  027F               	subwf	btemp+1,w
  2408  035E  1D03               	skipz
  2409  035F  2B62               	goto	u1315
  2410  0360  3003               	movlw	3
  2411  0361  022D               	subwf	divisor@i,w
  2412  0362                     u1315:
  2413  0362  1C03               	skipc
  2414  0363  2B65               	goto	u1311
  2415  0364  2B66               	goto	u1310
  2416  0365                     u1311:
  2417  0365  2B1D               	goto	l1788
  2418  0366                     u1310:
  2419  0366                     l116:
  2420  0366  0008               	return
  2421  0367                     __end_of_divisor:
  2422                           
  2423                           	psect	text11
  2424  02B5                     __ptext11:	
  2425 ;; *************** function ___awmod *****************
  2426 ;; Defined at:
  2427 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awmod.c"
  2428 ;; Parameters:    Size  Location     Type
  2429 ;;  divisor         2    0[BANK0 ] int 
  2430 ;;  dividend        2    2[BANK0 ] int 
  2431 ;; Auto vars:     Size  Location     Type
  2432 ;;  sign            1    5[BANK0 ] unsigned char 
  2433 ;;  counter         1    4[BANK0 ] unsigned char 
  2434 ;; Return value:  Size  Location     Type
  2435 ;;                  2    0[BANK0 ] int 
  2436 ;; Registers used:
  2437 ;;		wreg, status,2, status,0
  2438 ;; Tracked objects:
  2439 ;;		On entry : 0/0
  2440 ;;		On exit  : 0/0
  2441 ;;		Unchanged: 0/0
  2442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2443 ;;      Params:         0       4       0       0       0
  2444 ;;      Locals:         0       2       0       0       0
  2445 ;;      Temps:          1       0       0       0       0
  2446 ;;      Totals:         1       6       0       0       0
  2447 ;;Total ram usage:        7 bytes
  2448 ;; Hardware stack levels used: 1
  2449 ;; Hardware stack levels required when called: 2
  2450 ;; This function calls:
  2451 ;;		Nothing
  2452 ;; This function is called by:
  2453 ;;		_divisor
  2454 ;; This function uses a non-reentrant model
  2455 ;;
  2456                           
  2457                           
  2458                           ;psect for function ___awmod
  2459  02B5                     ___awmod:
  2460  02B5                     l1690:	
  2461                           ;incstack = 0
  2462                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2463                           
  2464  02B5  1283               	bcf	3,5	;RP0=0, select bank0
  2465  02B6  1303               	bcf	3,6	;RP1=0, select bank0
  2466  02B7  01A5               	clrf	___awmod@sign
  2467  02B8                     l1692:
  2468  02B8  1FA3               	btfss	___awmod@dividend+1,7
  2469  02B9  2ABB               	goto	u1151
  2470  02BA  2ABC               	goto	u1150
  2471  02BB                     u1151:
  2472  02BB  2AC3               	goto	l1698
  2473  02BC                     u1150:
  2474  02BC                     l1694:
  2475  02BC  09A2               	comf	___awmod@dividend,f
  2476  02BD  09A3               	comf	___awmod@dividend+1,f
  2477  02BE  0AA2               	incf	___awmod@dividend,f
  2478  02BF  1903               	skipnz
  2479  02C0  0AA3               	incf	___awmod@dividend+1,f
  2480  02C1                     l1696:
  2481  02C1  01A5               	clrf	___awmod@sign
  2482  02C2  0AA5               	incf	___awmod@sign,f
  2483  02C3                     l1698:
  2484  02C3  1FA1               	btfss	___awmod@divisor+1,7
  2485  02C4  2AC6               	goto	u1161
  2486  02C5  2AC7               	goto	u1160
  2487  02C6                     u1161:
  2488  02C6  2ACC               	goto	l1702
  2489  02C7                     u1160:
  2490  02C7                     l1700:
  2491  02C7  09A0               	comf	___awmod@divisor,f
  2492  02C8  09A1               	comf	___awmod@divisor+1,f
  2493  02C9  0AA0               	incf	___awmod@divisor,f
  2494  02CA  1903               	skipnz
  2495  02CB  0AA1               	incf	___awmod@divisor+1,f
  2496  02CC                     l1702:
  2497  02CC  0820               	movf	___awmod@divisor,w
  2498  02CD  0421               	iorwf	___awmod@divisor+1,w
  2499  02CE  1903               	btfsc	3,2
  2500  02CF  2AD1               	goto	u1171
  2501  02D0  2AD2               	goto	u1170
  2502  02D1                     u1171:
  2503  02D1  2B01               	goto	l1720
  2504  02D2                     u1170:
  2505  02D2                     l1704:
  2506  02D2  01A4               	clrf	___awmod@counter
  2507  02D3  0AA4               	incf	___awmod@counter,f
  2508  02D4  2AE0               	goto	l1710
  2509  02D5                     l1706:
  2510  02D5  3001               	movlw	1
  2511  02D6                     u1185:
  2512  02D6  1003               	clrc
  2513  02D7  0DA0               	rlf	___awmod@divisor,f
  2514  02D8  0DA1               	rlf	___awmod@divisor+1,f
  2515  02D9  3EFF               	addlw	-1
  2516  02DA  1D03               	skipz
  2517  02DB  2AD6               	goto	u1185
  2518  02DC                     l1708:
  2519  02DC  3001               	movlw	1
  2520  02DD  00F4               	movwf	??___awmod
  2521  02DE  0874               	movf	??___awmod,w
  2522  02DF  07A4               	addwf	___awmod@counter,f
  2523  02E0                     l1710:
  2524  02E0  1FA1               	btfss	___awmod@divisor+1,7
  2525  02E1  2AE3               	goto	u1191
  2526  02E2  2AE4               	goto	u1190
  2527  02E3                     u1191:
  2528  02E3  2AD5               	goto	l1706
  2529  02E4                     u1190:
  2530  02E4                     l1712:
  2531  02E4  0821               	movf	___awmod@divisor+1,w
  2532  02E5  0223               	subwf	___awmod@dividend+1,w
  2533  02E6  1D03               	skipz
  2534  02E7  2AEA               	goto	u1205
  2535  02E8  0820               	movf	___awmod@divisor,w
  2536  02E9  0222               	subwf	___awmod@dividend,w
  2537  02EA                     u1205:
  2538  02EA  1C03               	skipc
  2539  02EB  2AED               	goto	u1201
  2540  02EC  2AEE               	goto	u1200
  2541  02ED                     u1201:
  2542  02ED  2AF4               	goto	l1716
  2543  02EE                     u1200:
  2544  02EE                     l1714:
  2545  02EE  0820               	movf	___awmod@divisor,w
  2546  02EF  02A2               	subwf	___awmod@dividend,f
  2547  02F0  0821               	movf	___awmod@divisor+1,w
  2548  02F1  1C03               	skipc
  2549  02F2  03A3               	decf	___awmod@dividend+1,f
  2550  02F3  02A3               	subwf	___awmod@dividend+1,f
  2551  02F4                     l1716:
  2552  02F4  3001               	movlw	1
  2553  02F5                     u1215:
  2554  02F5  1003               	clrc
  2555  02F6  0CA1               	rrf	___awmod@divisor+1,f
  2556  02F7  0CA0               	rrf	___awmod@divisor,f
  2557  02F8  3EFF               	addlw	-1
  2558  02F9  1D03               	skipz
  2559  02FA  2AF5               	goto	u1215
  2560  02FB                     l1718:
  2561  02FB  3001               	movlw	1
  2562  02FC  02A4               	subwf	___awmod@counter,f
  2563  02FD  1D03               	btfss	3,2
  2564  02FE  2B00               	goto	u1221
  2565  02FF  2B01               	goto	u1220
  2566  0300                     u1221:
  2567  0300  2AE4               	goto	l1712
  2568  0301                     u1220:
  2569  0301                     l1720:
  2570  0301  0825               	movf	___awmod@sign,w
  2571  0302  1903               	btfsc	3,2
  2572  0303  2B05               	goto	u1231
  2573  0304  2B06               	goto	u1230
  2574  0305                     u1231:
  2575  0305  2B0B               	goto	l1724
  2576  0306                     u1230:
  2577  0306                     l1722:
  2578  0306  09A2               	comf	___awmod@dividend,f
  2579  0307  09A3               	comf	___awmod@dividend+1,f
  2580  0308  0AA2               	incf	___awmod@dividend,f
  2581  0309  1903               	skipnz
  2582  030A  0AA3               	incf	___awmod@dividend+1,f
  2583  030B                     l1724:
  2584  030B  0823               	movf	___awmod@dividend+1,w
  2585  030C  00A1               	movwf	?___awmod+1
  2586  030D  0822               	movf	___awmod@dividend,w
  2587  030E  00A0               	movwf	?___awmod
  2588  030F                     l470:
  2589  030F  0008               	return
  2590  0310                     __end_of___awmod:
  2591                           
  2592                           	psect	text12
  2593  01F1                     __ptext12:	
  2594 ;; *************** function ___awdiv *****************
  2595 ;; Defined at:
  2596 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awdiv.c"
  2597 ;; Parameters:    Size  Location     Type
  2598 ;;  divisor         2    0[BANK0 ] int 
  2599 ;;  dividend        2    2[BANK0 ] int 
  2600 ;; Auto vars:     Size  Location     Type
  2601 ;;  quotient        2    6[BANK0 ] int 
  2602 ;;  sign            1    5[BANK0 ] unsigned char 
  2603 ;;  counter         1    4[BANK0 ] unsigned char 
  2604 ;; Return value:  Size  Location     Type
  2605 ;;                  2    0[BANK0 ] int 
  2606 ;; Registers used:
  2607 ;;		wreg, status,2, status,0
  2608 ;; Tracked objects:
  2609 ;;		On entry : 0/0
  2610 ;;		On exit  : 0/0
  2611 ;;		Unchanged: 0/0
  2612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2613 ;;      Params:         0       4       0       0       0
  2614 ;;      Locals:         0       4       0       0       0
  2615 ;;      Temps:          1       0       0       0       0
  2616 ;;      Totals:         1       8       0       0       0
  2617 ;;Total ram usage:        9 bytes
  2618 ;; Hardware stack levels used: 1
  2619 ;; Hardware stack levels required when called: 2
  2620 ;; This function calls:
  2621 ;;		Nothing
  2622 ;; This function is called by:
  2623 ;;		_divisor
  2624 ;; This function uses a non-reentrant model
  2625 ;;
  2626                           
  2627                           
  2628                           ;psect for function ___awdiv
  2629  01F1                     ___awdiv:
  2630  01F1                     l1646:	
  2631                           ;incstack = 0
  2632                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2633                           
  2634  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  2635  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  2636  01F3  01A5               	clrf	___awdiv@sign
  2637  01F4                     l1648:
  2638  01F4  1FA1               	btfss	___awdiv@divisor+1,7
  2639  01F5  29F7               	goto	u1051
  2640  01F6  29F8               	goto	u1050
  2641  01F7                     u1051:
  2642  01F7  29FF               	goto	l1654
  2643  01F8                     u1050:
  2644  01F8                     l1650:
  2645  01F8  09A0               	comf	___awdiv@divisor,f
  2646  01F9  09A1               	comf	___awdiv@divisor+1,f
  2647  01FA  0AA0               	incf	___awdiv@divisor,f
  2648  01FB  1903               	skipnz
  2649  01FC  0AA1               	incf	___awdiv@divisor+1,f
  2650  01FD                     l1652:
  2651  01FD  01A5               	clrf	___awdiv@sign
  2652  01FE  0AA5               	incf	___awdiv@sign,f
  2653  01FF                     l1654:
  2654  01FF  1FA3               	btfss	___awdiv@dividend+1,7
  2655  0200  2A02               	goto	u1061
  2656  0201  2A03               	goto	u1060
  2657  0202                     u1061:
  2658  0202  2A0C               	goto	l1660
  2659  0203                     u1060:
  2660  0203                     l1656:
  2661  0203  09A2               	comf	___awdiv@dividend,f
  2662  0204  09A3               	comf	___awdiv@dividend+1,f
  2663  0205  0AA2               	incf	___awdiv@dividend,f
  2664  0206  1903               	skipnz
  2665  0207  0AA3               	incf	___awdiv@dividend+1,f
  2666  0208                     l1658:
  2667  0208  3001               	movlw	1
  2668  0209  00F4               	movwf	??___awdiv
  2669  020A  0874               	movf	??___awdiv,w
  2670  020B  06A5               	xorwf	___awdiv@sign,f
  2671  020C                     l1660:
  2672  020C  01A6               	clrf	___awdiv@quotient
  2673  020D  01A7               	clrf	___awdiv@quotient+1
  2674  020E                     l1662:
  2675  020E  0820               	movf	___awdiv@divisor,w
  2676  020F  0421               	iorwf	___awdiv@divisor+1,w
  2677  0210  1903               	btfsc	3,2
  2678  0211  2A13               	goto	u1071
  2679  0212  2A14               	goto	u1070
  2680  0213                     u1071:
  2681  0213  2A4B               	goto	l1682
  2682  0214                     u1070:
  2683  0214                     l1664:
  2684  0214  01A4               	clrf	___awdiv@counter
  2685  0215  0AA4               	incf	___awdiv@counter,f
  2686  0216  2A22               	goto	l1670
  2687  0217                     l1666:
  2688  0217  3001               	movlw	1
  2689  0218                     u1085:
  2690  0218  1003               	clrc
  2691  0219  0DA0               	rlf	___awdiv@divisor,f
  2692  021A  0DA1               	rlf	___awdiv@divisor+1,f
  2693  021B  3EFF               	addlw	-1
  2694  021C  1D03               	skipz
  2695  021D  2A18               	goto	u1085
  2696  021E                     l1668:
  2697  021E  3001               	movlw	1
  2698  021F  00F4               	movwf	??___awdiv
  2699  0220  0874               	movf	??___awdiv,w
  2700  0221  07A4               	addwf	___awdiv@counter,f
  2701  0222                     l1670:
  2702  0222  1FA1               	btfss	___awdiv@divisor+1,7
  2703  0223  2A25               	goto	u1091
  2704  0224  2A26               	goto	u1090
  2705  0225                     u1091:
  2706  0225  2A17               	goto	l1666
  2707  0226                     u1090:
  2708  0226                     l1672:
  2709  0226  3001               	movlw	1
  2710  0227                     u1105:
  2711  0227  1003               	clrc
  2712  0228  0DA6               	rlf	___awdiv@quotient,f
  2713  0229  0DA7               	rlf	___awdiv@quotient+1,f
  2714  022A  3EFF               	addlw	-1
  2715  022B  1D03               	skipz
  2716  022C  2A27               	goto	u1105
  2717  022D  0821               	movf	___awdiv@divisor+1,w
  2718  022E  0223               	subwf	___awdiv@dividend+1,w
  2719  022F  1D03               	skipz
  2720  0230  2A33               	goto	u1115
  2721  0231  0820               	movf	___awdiv@divisor,w
  2722  0232  0222               	subwf	___awdiv@dividend,w
  2723  0233                     u1115:
  2724  0233  1C03               	skipc
  2725  0234  2A36               	goto	u1111
  2726  0235  2A37               	goto	u1110
  2727  0236                     u1111:
  2728  0236  2A3E               	goto	l1678
  2729  0237                     u1110:
  2730  0237                     l1674:
  2731  0237  0820               	movf	___awdiv@divisor,w
  2732  0238  02A2               	subwf	___awdiv@dividend,f
  2733  0239  0821               	movf	___awdiv@divisor+1,w
  2734  023A  1C03               	skipc
  2735  023B  03A3               	decf	___awdiv@dividend+1,f
  2736  023C  02A3               	subwf	___awdiv@dividend+1,f
  2737  023D                     l1676:
  2738  023D  1426               	bsf	___awdiv@quotient,0
  2739  023E                     l1678:
  2740  023E  3001               	movlw	1
  2741  023F                     u1125:
  2742  023F  1003               	clrc
  2743  0240  0CA1               	rrf	___awdiv@divisor+1,f
  2744  0241  0CA0               	rrf	___awdiv@divisor,f
  2745  0242  3EFF               	addlw	-1
  2746  0243  1D03               	skipz
  2747  0244  2A3F               	goto	u1125
  2748  0245                     l1680:
  2749  0245  3001               	movlw	1
  2750  0246  02A4               	subwf	___awdiv@counter,f
  2751  0247  1D03               	btfss	3,2
  2752  0248  2A4A               	goto	u1131
  2753  0249  2A4B               	goto	u1130
  2754  024A                     u1131:
  2755  024A  2A26               	goto	l1672
  2756  024B                     u1130:
  2757  024B                     l1682:
  2758  024B  0825               	movf	___awdiv@sign,w
  2759  024C  1903               	btfsc	3,2
  2760  024D  2A4F               	goto	u1141
  2761  024E  2A50               	goto	u1140
  2762  024F                     u1141:
  2763  024F  2A55               	goto	l1686
  2764  0250                     u1140:
  2765  0250                     l1684:
  2766  0250  09A6               	comf	___awdiv@quotient,f
  2767  0251  09A7               	comf	___awdiv@quotient+1,f
  2768  0252  0AA6               	incf	___awdiv@quotient,f
  2769  0253  1903               	skipnz
  2770  0254  0AA7               	incf	___awdiv@quotient+1,f
  2771  0255                     l1686:
  2772  0255  0827               	movf	___awdiv@quotient+1,w
  2773  0256  00A1               	movwf	?___awdiv+1
  2774  0257  0826               	movf	___awdiv@quotient,w
  2775  0258  00A0               	movwf	?___awdiv
  2776  0259                     l457:
  2777  0259  0008               	return
  2778  025A                     __end_of___awdiv:
  2779                           
  2780                           	psect	text13
  2781  049B                     __ptext13:	
  2782 ;; *************** function _conversion *****************
  2783 ;; Defined at:
  2784 ;;		line 21 in file "ADC.c"
  2785 ;; Parameters:    Size  Location     Type
  2786 ;;		None
  2787 ;; Auto vars:     Size  Location     Type
  2788 ;;		None
  2789 ;; Return value:  Size  Location     Type
  2790 ;;                  1    wreg      void 
  2791 ;; Registers used:
  2792 ;;		wreg, status,2, status,0
  2793 ;; Tracked objects:
  2794 ;;		On entry : 0/0
  2795 ;;		On exit  : 0/0
  2796 ;;		Unchanged: 0/0
  2797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2798 ;;      Params:         0       0       0       0       0
  2799 ;;      Locals:         0       0       0       0       0
  2800 ;;      Temps:          1       0       0       0       0
  2801 ;;      Totals:         1       0       0       0       0
  2802 ;;Total ram usage:        1 bytes
  2803 ;; Hardware stack levels used: 1
  2804 ;; Hardware stack levels required when called: 2
  2805 ;; This function calls:
  2806 ;;		Nothing
  2807 ;; This function is called by:
  2808 ;;		_main
  2809 ;; This function uses a non-reentrant model
  2810 ;;
  2811                           
  2812                           
  2813                           ;psect for function _conversion
  2814  049B                     _conversion:
  2815  049B                     l1536:	
  2816                           ;incstack = 0
  2817                           ; Regs used in _conversion: [wreg+status,2+status,0]
  2818                           
  2819                           
  2820                           ;ADC.c: 22:     if(ADCON0bits.GO == 0){
  2821  049B  1283               	bcf	3,5	;RP0=0, select bank0
  2822  049C  1303               	bcf	3,6	;RP1=0, select bank0
  2823  049D  189F               	btfsc	31,1	;volatile
  2824  049E  2CA0               	goto	u951
  2825  049F  2CA1               	goto	u950
  2826  04A0                     u951:
  2827  04A0  2CC6               	goto	l190
  2828  04A1                     u950:
  2829  04A1                     l1538:
  2830                           
  2831                           ;ADC.c: 23:         if(ADCON0bits.CHS == 1){
  2832  04A1  0C1F               	rrf	31,w	;volatile
  2833  04A2  00F4               	movwf	??_conversion
  2834  04A3  0C74               	rrf	??_conversion,w
  2835  04A4  390F               	andlw	15
  2836  04A5  3A01               	xorlw	1
  2837  04A6  1D03               	skipz
  2838  04A7  2CA9               	goto	u961
  2839  04A8  2CAA               	goto	u960
  2840  04A9                     u961:
  2841  04A9  2CB1               	goto	l1544
  2842  04AA                     u960:
  2843  04AA                     l1540:
  2844                           
  2845                           ;ADC.c: 24:             ADCON0bits.CHS = 0;
  2846  04AA  30C3               	movlw	-61
  2847  04AB  059F               	andwf	31,f	;volatile
  2848  04AC                     l1542:
  2849                           
  2850                           ;ADC.c: 25:             _delay((unsigned long)((50)*(8000000/4000000.0)));
  2851  04AC  3021               	movlw	33
  2852  04AD  00F4               	movwf	??_conversion
  2853  04AE                     u1517:
  2854  04AE  0BF4               	decfsz	??_conversion,f
  2855  04AF  2CAE               	goto	u1517
  2856                           
  2857                           ;ADC.c: 26:         }
  2858  04B0  2CBF               	goto	l1550
  2859  04B1                     l1544:
  2860  04B1  0C1F               	rrf	31,w	;volatile
  2861  04B2  00F4               	movwf	??_conversion
  2862  04B3  0C74               	rrf	??_conversion,w
  2863  04B4  390F               	andlw	15
  2864  04B5  3A00               	xorlw	0
  2865  04B6  1D03               	skipz
  2866  04B7  2CB9               	goto	u971
  2867  04B8  2CBA               	goto	u970
  2868  04B9                     u971:
  2869  04B9  2CBF               	goto	l1550
  2870  04BA                     u970:
  2871  04BA                     l1546:
  2872                           
  2873                           ;ADC.c: 28:             ADCON0bits.CHS = 1;
  2874  04BA  081F               	movf	31,w	;volatile
  2875  04BB  39C3               	andlw	-61
  2876  04BC  3804               	iorlw	4
  2877  04BD  009F               	movwf	31	;volatile
  2878  04BE  2CAC               	goto	l1542
  2879  04BF                     l1550:
  2880                           
  2881                           ;ADC.c: 31:         _delay((unsigned long)((50)*(8000000/4000000.0)));
  2882  04BF  3021               	movlw	33
  2883  04C0  00F4               	movwf	??_conversion
  2884  04C1                     u1527:
  2885  04C1  0BF4               	decfsz	??_conversion,f
  2886  04C2  2CC1               	goto	u1527
  2887  04C3                     l1552:
  2888                           
  2889                           ;ADC.c: 32:         ADCON0bits.GO = 1;
  2890  04C3  1283               	bcf	3,5	;RP0=0, select bank0
  2891  04C4  1303               	bcf	3,6	;RP1=0, select bank0
  2892  04C5  149F               	bsf	31,1	;volatile
  2893  04C6                     l190:
  2894  04C6  0008               	return
  2895  04C7                     __end_of_conversion:
  2896                           
  2897                           	psect	text14
  2898  04C7                     __ptext14:	
  2899 ;; *************** function _Escribir_stringLCD *****************
  2900 ;; Defined at:
  2901 ;;		line 57 in file "LCD.c"
  2902 ;; Parameters:    Size  Location     Type
  2903 ;;  d               2    0[BANK0 ] PTR const unsigned char 
  2904 ;;		 -> buffer3(10), buffer2(10), buffer1(10), STR_1(17), 
  2905 ;; Auto vars:     Size  Location     Type
  2906 ;;		None
  2907 ;; Return value:  Size  Location     Type
  2908 ;;                  1    wreg      void 
  2909 ;; Registers used:
  2910 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2911 ;; Tracked objects:
  2912 ;;		On entry : 0/0
  2913 ;;		On exit  : 0/0
  2914 ;;		Unchanged: 0/0
  2915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2916 ;;      Params:         0       2       0       0       0
  2917 ;;      Locals:         0       0       0       0       0
  2918 ;;      Temps:          0       0       0       0       0
  2919 ;;      Totals:         0       2       0       0       0
  2920 ;;Total ram usage:        2 bytes
  2921 ;; Hardware stack levels used: 1
  2922 ;; Hardware stack levels required when called: 4
  2923 ;; This function calls:
  2924 ;;		_Escribir_datosLCD
  2925 ;; This function is called by:
  2926 ;;		_main
  2927 ;; This function uses a non-reentrant model
  2928 ;;
  2929                           
  2930                           
  2931                           ;psect for function _Escribir_stringLCD
  2932  04C7                     _Escribir_stringLCD:
  2933  04C7                     l1926:	
  2934                           ;incstack = 0
  2935                           ; Regs used in _Escribir_stringLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2936                           
  2937                           
  2938                           ;LCD.c: 58:     while(*d){
  2939  04C7  2CDE               	goto	l1932
  2940  04C8                     l1928:
  2941                           
  2942                           ;LCD.c: 59:         Escribir_datosLCD(*d++);
  2943  04C8  0821               	movf	Escribir_stringLCD@d+1,w
  2944  04C9  00FF               	movwf	btemp+1
  2945  04CA  0820               	movf	Escribir_stringLCD@d,w
  2946  04CB  0084               	movwf	4
  2947  04CC  120A  118A  2439  120A  118A  	fcall	stringtab
  2948  04D1  120A  118A  2561  120A  118A  	fcall	_Escribir_datosLCD
  2949  04D6                     l1930:
  2950  04D6  3001               	movlw	1
  2951  04D7  1283               	bcf	3,5	;RP0=0, select bank0
  2952  04D8  1303               	bcf	3,6	;RP1=0, select bank0
  2953  04D9  07A0               	addwf	Escribir_stringLCD@d,f
  2954  04DA  1803               	skipnc
  2955  04DB  0AA1               	incf	Escribir_stringLCD@d+1,f
  2956  04DC  3000               	movlw	0
  2957  04DD  07A1               	addwf	Escribir_stringLCD@d+1,f
  2958  04DE                     l1932:
  2959                           
  2960                           ;LCD.c: 58:     while(*d){
  2961  04DE  1283               	bcf	3,5	;RP0=0, select bank0
  2962  04DF  1303               	bcf	3,6	;RP1=0, select bank0
  2963  04E0  0821               	movf	Escribir_stringLCD@d+1,w
  2964  04E1  00FF               	movwf	btemp+1
  2965  04E2  0820               	movf	Escribir_stringLCD@d,w
  2966  04E3  0084               	movwf	4
  2967  04E4  120A  118A  2439  120A  118A  	fcall	stringtab
  2968  04E9  3A00               	xorlw	0
  2969  04EA  1D03               	skipz
  2970  04EB  2CED               	goto	u1411
  2971  04EC  2CEE               	goto	u1410
  2972  04ED                     u1411:
  2973  04ED  2CC8               	goto	l1928
  2974  04EE                     u1410:
  2975  04EE                     l147:
  2976  04EE  0008               	return
  2977  04EF                     __end_of_Escribir_stringLCD:
  2978                           
  2979                           	psect	text15
  2980  0561                     __ptext15:	
  2981 ;; *************** function _Escribir_datosLCD *****************
  2982 ;; Defined at:
  2983 ;;		line 25 in file "LCD.c"
  2984 ;; Parameters:    Size  Location     Type
  2985 ;;  LCDchar         1    wreg     unsigned char 
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;  LCDchar         1    5[COMMON] unsigned char 
  2988 ;; Return value:  Size  Location     Type
  2989 ;;                  1    wreg      void 
  2990 ;; Registers used:
  2991 ;;		wreg, status,2, status,0, pclath, cstack
  2992 ;; Tracked objects:
  2993 ;;		On entry : 0/0
  2994 ;;		On exit  : 0/0
  2995 ;;		Unchanged: 0/0
  2996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2997 ;;      Params:         0       0       0       0       0
  2998 ;;      Locals:         1       0       0       0       0
  2999 ;;      Temps:          0       0       0       0       0
  3000 ;;      Totals:         1       0       0       0       0
  3001 ;;Total ram usage:        1 bytes
  3002 ;; Hardware stack levels used: 1
  3003 ;; Hardware stack levels required when called: 3
  3004 ;; This function calls:
  3005 ;;		_prender_ELCD
  3006 ;; This function is called by:
  3007 ;;		_Iniciar_LCD
  3008 ;;		_Escribir_stringLCD
  3009 ;; This function uses a non-reentrant model
  3010 ;;
  3011                           
  3012                           
  3013                           ;psect for function _Escribir_datosLCD
  3014  0561                     _Escribir_datosLCD:
  3015                           
  3016                           ;incstack = 0
  3017                           ; Regs used in _Escribir_datosLCD: [wreg+status,2+status,0+pclath+cstack]
  3018                           ;Escribir_datosLCD@LCDchar stored from wreg
  3019  0561  00F5               	movwf	Escribir_datosLCD@LCDchar
  3020  0562                     l1640:
  3021                           
  3022                           ;LCD.c: 26:     RC0 = 1;
  3023  0562  1283               	bcf	3,5	;RP0=0, select bank0
  3024  0563  1303               	bcf	3,6	;RP1=0, select bank0
  3025  0564  1407               	bsf	7,0	;volatile
  3026  0565                     l1642:
  3027                           
  3028                           ;LCD.c: 27:     PORTD = LCDchar;
  3029  0565  0875               	movf	Escribir_datosLCD@LCDchar,w
  3030  0566  0088               	movwf	8	;volatile
  3031  0567                     l1644:
  3032                           
  3033                           ;LCD.c: 29:     prender_ELCD();
  3034  0567  120A  118A  252C  120A  118A  	fcall	_prender_ELCD
  3035  056C                     l138:
  3036  056C  0008               	return
  3037  056D                     __end_of_Escribir_datosLCD:
  3038                           
  3039                           	psect	text16
  3040  052C                     __ptext16:	
  3041 ;; *************** function _prender_ELCD *****************
  3042 ;; Defined at:
  3043 ;;		line 11 in file "LCD.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;		None
  3046 ;; Auto vars:     Size  Location     Type
  3047 ;;		None
  3048 ;; Return value:  Size  Location     Type
  3049 ;;                  1    wreg      void 
  3050 ;; Registers used:
  3051 ;;		wreg
  3052 ;; Tracked objects:
  3053 ;;		On entry : 0/0
  3054 ;;		On exit  : 0/0
  3055 ;;		Unchanged: 0/0
  3056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3057 ;;      Params:         0       0       0       0       0
  3058 ;;      Locals:         0       0       0       0       0
  3059 ;;      Temps:          1       0       0       0       0
  3060 ;;      Totals:         1       0       0       0       0
  3061 ;;Total ram usage:        1 bytes
  3062 ;; Hardware stack levels used: 1
  3063 ;; Hardware stack levels required when called: 2
  3064 ;; This function calls:
  3065 ;;		Nothing
  3066 ;; This function is called by:
  3067 ;;		_Escribir_comandoLCD
  3068 ;;		_Escribir_datosLCD
  3069 ;; This function uses a non-reentrant model
  3070 ;;
  3071                           
  3072                           
  3073                           ;psect for function _prender_ELCD
  3074  052C                     _prender_ELCD:
  3075  052C                     l1634:	
  3076                           ;incstack = 0
  3077                           ; Regs used in _prender_ELCD: [wreg]
  3078                           
  3079                           
  3080                           ;LCD.c: 12:     RC1 = 1;
  3081  052C  1283               	bcf	3,5	;RP0=0, select bank0
  3082  052D  1303               	bcf	3,6	;RP1=0, select bank0
  3083  052E  1487               	bsf	7,1	;volatile
  3084  052F                     l1636:
  3085                           
  3086                           ;LCD.c: 13:     _delay((unsigned long)((500)*(8000000/4000000.0)));
  3087  052F  30C7               	movlw	199
  3088  0530  00F4               	movwf	??_prender_ELCD
  3089  0531                     u1537:
  3090  0531  2D32               	nop2
  3091  0532  0BF4               	decfsz	??_prender_ELCD,f
  3092  0533  2D31               	goto	u1537
  3093  0534  2D35               	nop2
  3094  0535  2D36               	nop2
  3095  0536                     l1638:
  3096                           
  3097                           ;LCD.c: 14:     RC1 = 0;
  3098  0536  1283               	bcf	3,5	;RP0=0, select bank0
  3099  0537  1303               	bcf	3,6	;RP1=0, select bank0
  3100  0538  1087               	bcf	7,1	;volatile
  3101                           
  3102                           ;LCD.c: 15:     _delay((unsigned long)((500)*(8000000/4000000.0)));
  3103  0539  30C7               	movlw	199
  3104  053A  00F4               	movwf	??_prender_ELCD
  3105  053B                     u1547:
  3106  053B  2D3C               	nop2
  3107  053C  0BF4               	decfsz	??_prender_ELCD,f
  3108  053D  2D3B               	goto	u1547
  3109  053E  2D3F               	nop2
  3110  053F  2D40               	nop2
  3111  0540                     l132:
  3112  0540  0008               	return
  3113  0541                     __end_of_prender_ELCD:
  3114                           
  3115                           	psect	text17
  3116  046C                     __ptext17:	
  3117 ;; *************** function _isr *****************
  3118 ;; Defined at:
  3119 ;;		line 65 in file "LAB2.c"
  3120 ;; Parameters:    Size  Location     Type
  3121 ;;		None
  3122 ;; Auto vars:     Size  Location     Type
  3123 ;;		None
  3124 ;; Return value:  Size  Location     Type
  3125 ;;                  1    wreg      void 
  3126 ;; Registers used:
  3127 ;;		wreg, status,2, status,0, pclath, cstack
  3128 ;; Tracked objects:
  3129 ;;		On entry : 0/0
  3130 ;;		On exit  : 0/0
  3131 ;;		Unchanged: 0/0
  3132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3133 ;;      Params:         0       0       0       0       0
  3134 ;;      Locals:         0       0       0       0       0
  3135 ;;      Temps:          3       0       0       0       0
  3136 ;;      Totals:         3       0       0       0       0
  3137 ;;Total ram usage:        3 bytes
  3138 ;; Hardware stack levels used: 1
  3139 ;; Hardware stack levels required when called: 1
  3140 ;; This function calls:
  3141 ;;		_ADC
  3142 ;; This function is called by:
  3143 ;;		Interrupt level 1
  3144 ;; This function uses a non-reentrant model
  3145 ;;
  3146                           
  3147                           
  3148                           ;psect for function _isr
  3149  046C                     _isr:
  3150  046C                     i1l1574:
  3151                           
  3152                           ;LAB2.c: 66:     if(PIR1bits.ADIF){
  3153  046C  1283               	bcf	3,5	;RP0=0, select bank0
  3154  046D  1303               	bcf	3,6	;RP1=0, select bank0
  3155  046E  1F0C               	btfss	12,6	;volatile
  3156  046F  2C71               	goto	u101_21
  3157  0470  2C72               	goto	u101_20
  3158  0471                     u101_21:
  3159  0471  2C7A               	goto	i1l1580
  3160  0472                     u101_20:
  3161  0472                     i1l1576:
  3162                           
  3163                           ;LAB2.c: 67:         ADC();
  3164  0472  120A  118A  250E  120A  118A  	fcall	_ADC
  3165  0477                     i1l1578:
  3166                           
  3167                           ;LAB2.c: 68:         PIR1bits.ADIF = 0;
  3168  0477  1283               	bcf	3,5	;RP0=0, select bank0
  3169  0478  1303               	bcf	3,6	;RP1=0, select bank0
  3170  0479  130C               	bcf	12,6	;volatile
  3171  047A                     i1l1580:
  3172                           
  3173                           ;LAB2.c: 70:     if(PIR1bits.RCIF){
  3174  047A  1E8C               	btfss	12,5	;volatile
  3175  047B  2C7D               	goto	u102_21
  3176  047C  2C7E               	goto	u102_20
  3177  047D                     u102_21:
  3178  047D  2C94               	goto	i1l97
  3179  047E                     u102_20:
  3180  047E                     i1l1582:
  3181                           
  3182                           ;LAB2.c: 71:         dato = RCREG;
  3183  047E  081A               	movf	26,w	;volatile
  3184  047F  00F1               	movwf	??_isr
  3185  0480  0871               	movf	??_isr,w
  3186  0481  00F6               	movwf	_dato
  3187  0482                     i1l1584:
  3188                           
  3189                           ;LAB2.c: 72:         if(dato == 75){
  3190  0482  304B               	movlw	75
  3191  0483  0676               	xorwf	_dato,w
  3192  0484  1D03               	btfss	3,2
  3193  0485  2C87               	goto	u103_21
  3194  0486  2C88               	goto	u103_20
  3195  0487                     u103_21:
  3196  0487  2C8C               	goto	i1l95
  3197  0488                     u103_20:
  3198  0488                     i1l1586:
  3199                           
  3200                           ;LAB2.c: 73:             Cont_U++;
  3201  0488  3001               	movlw	1
  3202  0489  00F1               	movwf	??_isr
  3203  048A  0871               	movf	??_isr,w
  3204  048B  07C5               	addwf	_Cont_U,f
  3205  048C                     i1l95:	
  3206                           ;LAB2.c: 74:         }
  3207                           
  3208                           
  3209                           ;LAB2.c: 75:         if(dato == 77){
  3210  048C  304D               	movlw	77
  3211  048D  0676               	xorwf	_dato,w
  3212  048E  1D03               	btfss	3,2
  3213  048F  2C91               	goto	u104_21
  3214  0490  2C92               	goto	u104_20
  3215  0491                     u104_21:
  3216  0491  2C94               	goto	i1l97
  3217  0492                     u104_20:
  3218  0492                     i1l1588:
  3219                           
  3220                           ;LAB2.c: 76:             Cont_U--;
  3221  0492  3001               	movlw	1
  3222  0493  02C5               	subwf	_Cont_U,f
  3223  0494                     i1l97:
  3224  0494  0873               	movf	??_isr+2,w
  3225  0495  008A               	movwf	10
  3226  0496  0E72               	swapf	??_isr+1,w
  3227  0497  0083               	movwf	3
  3228  0498  0EFE               	swapf	btemp,f
  3229  0499  0E7E               	swapf	btemp,w
  3230  049A  0009               	retfie
  3231  049B                     __end_of_isr:
  3232                           
  3233                           	psect	intentry
  3234  0004                     __pintentry:	
  3235                           ;incstack = 0
  3236                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  3237                           
  3238  0004                     interrupt_function:
  3239  007E                     saved_w	set	btemp
  3240  0004  00FE               	movwf	btemp
  3241  0005  0E03               	swapf	3,w
  3242  0006  00F2               	movwf	??_isr+1
  3243  0007  080A               	movf	10,w
  3244  0008  00F3               	movwf	??_isr+2
  3245  0009  120A  118A  2C6C   	ljmp	_isr
  3246                           
  3247                           	psect	text18
  3248  050E                     __ptext18:	
  3249 ;; *************** function _ADC *****************
  3250 ;; Defined at:
  3251 ;;		line 11 in file "ADC.c"
  3252 ;; Parameters:    Size  Location     Type
  3253 ;;		None
  3254 ;; Auto vars:     Size  Location     Type
  3255 ;;		None
  3256 ;; Return value:  Size  Location     Type
  3257 ;;                  1    wreg      void 
  3258 ;; Registers used:
  3259 ;;		wreg, status,2, status,0
  3260 ;; Tracked objects:
  3261 ;;		On entry : 0/0
  3262 ;;		On exit  : 0/0
  3263 ;;		Unchanged: 0/0
  3264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3265 ;;      Params:         0       0       0       0       0
  3266 ;;      Locals:         0       0       0       0       0
  3267 ;;      Temps:          1       0       0       0       0
  3268 ;;      Totals:         1       0       0       0       0
  3269 ;;Total ram usage:        1 bytes
  3270 ;; Hardware stack levels used: 1
  3271 ;; This function calls:
  3272 ;;		Nothing
  3273 ;; This function is called by:
  3274 ;;		_isr
  3275 ;; This function uses a non-reentrant model
  3276 ;;
  3277                           
  3278                           
  3279                           ;psect for function _ADC
  3280  050E                     _ADC:
  3281  050E                     i1l1472:	
  3282                           ;incstack = 0
  3283                           ; Regs used in _ADC: [wreg+status,2+status,0]
  3284                           
  3285                           
  3286                           ;ADC.c: 12:     if(ADCON0bits.CHS == 0){
  3287  050E  1283               	bcf	3,5	;RP0=0, select bank0
  3288  050F  1303               	bcf	3,6	;RP1=0, select bank0
  3289  0510  0C1F               	rrf	31,w	;volatile
  3290  0511  00F0               	movwf	??_ADC
  3291  0512  0C70               	rrf	??_ADC,w
  3292  0513  390F               	andlw	15
  3293  0514  3A00               	xorlw	0
  3294  0515  1D03               	skipz
  3295  0516  2D18               	goto	u93_21
  3296  0517  2D19               	goto	u93_20
  3297  0518                     u93_21:
  3298  0518  2D1E               	goto	i1l1476
  3299  0519                     u93_20:
  3300  0519                     i1l1474:
  3301                           
  3302                           ;ADC.c: 13:         cont1 = ADRESH;
  3303  0519  081E               	movf	30,w	;volatile
  3304  051A  00F0               	movwf	??_ADC
  3305  051B  0870               	movf	??_ADC,w
  3306  051C  00C8               	movwf	_cont1
  3307                           
  3308                           ;ADC.c: 14:     }
  3309  051D  2D2B               	goto	i1l183
  3310  051E                     i1l1476:
  3311  051E  0C1F               	rrf	31,w	;volatile
  3312  051F  00F0               	movwf	??_ADC
  3313  0520  0C70               	rrf	??_ADC,w
  3314  0521  390F               	andlw	15
  3315  0522  3A01               	xorlw	1
  3316  0523  1D03               	skipz
  3317  0524  2D26               	goto	u94_21
  3318  0525  2D27               	goto	u94_20
  3319  0526                     u94_21:
  3320  0526  2D2B               	goto	i1l183
  3321  0527                     u94_20:
  3322  0527                     i1l1478:
  3323                           
  3324                           ;ADC.c: 16:         cont2 = ADRESH;
  3325  0527  081E               	movf	30,w	;volatile
  3326  0528  00F0               	movwf	??_ADC
  3327  0529  0870               	movf	??_ADC,w
  3328  052A  00C7               	movwf	_cont2
  3329  052B                     i1l183:
  3330  052B  0008               	return
  3331  052C                     __end_of_ADC:
  3332  007E                     btemp	set	126	;btemp
  3333  007E                     wtemp0	set	126
  3334                           
  3335                           	psect	config
  3336                           
  3337                           ;Config register CONFIG1 @ 0x2007
  3338                           ;	Oscillator Selection bits
  3339                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  3340                           ;	Watchdog Timer Enable bit
  3341                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  3342                           ;	Power-up Timer Enable bit
  3343                           ;	PWRTE = OFF, PWRT disabled
  3344                           ;	RE3/MCLR pin function select bit
  3345                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  3346                           ;	Code Protection bit
  3347                           ;	CP = OFF, Program memory code protection is disabled
  3348                           ;	Data Code Protection bit
  3349                           ;	CPD = OFF, Data memory code protection is disabled
  3350                           ;	Brown Out Reset Selection bits
  3351                           ;	BOREN = OFF, BOR disabled
  3352                           ;	Internal External Switchover bit
  3353                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  3354                           ;	Fail-Safe Clock Monitor Enabled bit
  3355                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  3356                           ;	Low Voltage Programming Enable bit
  3357                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  3358                           ;	In-Circuit Debugger Mode bit
  3359                           ;	DEBUG = 0x1, unprogrammed default
  3360  2007                     	org	8199
  3361  2007  20D4               	dw	8404
  3362                           
  3363                           ;Config register CONFIG2 @ 0x2008
  3364                           ;	Brown-out Reset Selection bit
  3365                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  3366                           ;	Flash Program Memory Self Write Enable bits
  3367                           ;	WRT = OFF, Write protection off
  3368  2008                     	org	8200
  3369  2008  3FFF               	dw	16383

Data Sizes:
    Strings     25
    Constant    10
    Data        0
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     37      73
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_4(CODE[3]), STR_3(CODE[8]), STR_2(CODE[8]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> buffer3(BANK0[10]), buffer2(BANK0[10]), buffer1(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Escribir_stringLCD@d	PTR const unsigned char  size(2) Largest target is 17
		 -> buffer3(BANK0[10]), buffer2(BANK0[10]), buffer1(BANK0[10]), STR_1(CODE[17]), 

    divisor@dig	PTR unsigned char  size(1) Largest target is 1
		 -> vol2(BANK0[1]), vol1(BANK0[1]), 


Critical Paths under _main in COMMON

    _Iniciar_LCD->_Escribir_datosLCD
    _set_cursor->_Escribir_comandoLCD
    _Escribir_comandoLCD->_prender_ELCD
    _conversion_char->_divisor
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _divisor->___awdiv
    _divisor->___awmod
    _Escribir_stringLCD->_Escribir_datosLCD
    _Escribir_datosLCD->_prender_ELCD

Critical Paths under _isr in COMMON

    _isr->_ADC

Critical Paths under _main in BANK0

    _main->_conversion_char
    _setup->_Iniciar_LCD
    _dato_recibido->_sprintf
    _conversion_char->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _divisor->___awdiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    6323
                                             36 BANK0      1     1      0
                 _Escribir_stringLCD
                         _conversion
                    _conversion_char
                      _dato_recibido
                         _set_cursor
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                1     1      0      31
                                              2 BANK0      1     1      0
                        _Iniciar_LCD
 ---------------------------------------------------------------------------------
 (2) _Iniciar_LCD                                          2     2      0      31
                                              0 BANK0      2     2      0
                  _Escribir_datosLCD
 ---------------------------------------------------------------------------------
 (1) _set_cursor                                           2     1      1     515
                                              0 BANK0      2     1      1
                _Escribir_comandoLCD
 ---------------------------------------------------------------------------------
 (2) _Escribir_comandoLCD                                  1     1      0      31
                                              5 COMMON     1     1      0
                       _prender_ELCD
 ---------------------------------------------------------------------------------
 (1) _dato_recibido                                        3     3      0    1806
                                             29 BANK0      3     3      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _conversion_char                                      7     7      0    3515
                                             29 BANK0      7     7      0
                            _divisor
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             25    18      7    1806
                                             12 BANK0     17    10      7
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              5 COMMON     1     1      0
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     421
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _divisor                                              8     7      1    1709
                                              5 COMMON     1     0      1
                                              8 BANK0      7     7      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     613
                                              4 COMMON     1     1      0
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     625
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _conversion                                           1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Escribir_stringLCD                                   2     0      2     456
                                              0 BANK0      2     0      2
                  _Escribir_datosLCD
 ---------------------------------------------------------------------------------
 (3) _Escribir_datosLCD                                    1     1      0      31
                                              5 COMMON     1     1      0
                       _prender_ELCD
 ---------------------------------------------------------------------------------
 (4) _prender_ELCD                                         1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  3     3      0       0
                                              1 COMMON     3     3      0
                                _ADC
 ---------------------------------------------------------------------------------
 (6) _ADC                                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Escribir_stringLCD
     _Escribir_datosLCD
       _prender_ELCD
   _conversion
   _conversion_char
     _divisor
       ___awdiv
       ___awmod
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _dato_recibido
     _sprintf
   _set_cursor
     _Escribir_comandoLCD
       _prender_ELCD
   _setup
     _Iniciar_LCD
       _Escribir_datosLCD

 _isr (ROOT)
   _ADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      53       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      49       5       91.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      53      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Fri Feb 04 22:47:56 2022

                           pc 0002                  ___awdiv@sign 0025                            fsr 0004  
                         l102 0186                           l111 02B4                           l132 0540  
                         l116 0366                           l300 0109                           l108 03B6  
                         l141 017D                           l119 0554                           l135 0560  
                         l138 056C                           l147 04EE                           l155 050D  
                         l190 04C6                           _ADC 050E                           l470 030F  
                         l457 0259                           l576 03FC                           l586 0438  
                         _RC0 0038                           _RC1 0039                           _RC2 003A  
                         u810 0417                           u811 0416                           u820 0421  
                         u821 0420                           u805 0409                           u840 0434  
                         u841 0433                           u825 041D                           u835 0428  
                         u950 04A1                           u790 0405                           u951 04A0  
                         u791 0404                           u960 04AA                           u961 04A9  
                         u970 04BA                           u971 04B9                           _dec 0078  
                         _cen 0077                           _isr 046C                           fsr0 0004  
                         _uni 0079                           indf 0000                  ___awmod@sign 0025  
                        ?_ADC 0070                          l1350 0413                          l1342 03FD  
                        l1352 0417                          l1344 0405                          l1360 0434  
                        l1354 0421                          l1346 0408                          l1540 04AA  
                        l1700 02C7                          l1356 0427                          l1348 040F  
                        l1550 04BF                          l1542 04AC                          l1710 02E0  
                        l1702 02CC                          l1358 042E                          l1640 0562  
                        l1552 04C3                          l1544 04B1                          l1536 049B  
                        l1712 02E4                          l1704 02D2                          l1720 0301  
                        l1800 0035                          l1634 052C                          l1642 0565  
                        l1546 04BA                          l1538 04A1                          l1650 01F8  
                        l1722 0306                          l1714 02EE                          l1706 02D5  
                        l1730 03BB                          l1810 0060                          l1802 003A  
                        l1636 052F                          l1644 0567                          l1660 020C  
                        l1652 01FD                          l1724 030B                          l1716 02F4  
                        l1708 02DC                          l1740 03D3                          l1732 03C1  
                        l1812 0064                          l1900 03A0                          l1638 0536  
                        l1670 0222                          l1662 020E                          l1654 01FF  
                        l1646 01F1                          l1718 02FB                          l1742 03E4  
                        l1734 03C4                          l1750 03F8                          l1830 0099  
                        l1814 0068                          l1806 003B                          l1910 03AC  
                        l1902 03A1                          l1680 0245                          l1672 0226  
                        l1664 0214                          l1656 0203                          l1648 01F4  
                        l1744 03EA                          l1736 03CB                          l1728 03B7  
                        l1840 00DF                          l1832 009F                          l1824 0073  
                        l1816 006C                          l1808 0058                          l1920 04F7  
                        l1760 011E                          l1912 03AD                          l1904 03A4  
                        l1930 04D6                          l1674 0237                          l1666 0217  
                        l1682 024B                          l1658 0208                          l1690 02B5  
                        l1746 03EB                          l1738 03CF                          l1842 00E6  
                        l1834 00A6                          l1818 0071                          l1922 04FE  
                        l1770 0156                          l1762 012F                          l1754 010A  
                        l1914 03AE                          l1906 03A8                          l1932 04DE  
                        l1684 0250                          l1676 023D                          l1668 021E  
                        l1692 02B8                          l1780 0313                          l1748 03F2  
                        l1844 00EA                          l1836 00AA                          l1828 008F  
                        l1860 055B                          l1924 0506                          l1772 015D  
                        l1764 0136                          l1756 010E                          l1916 03B1  
                        l1908 03A9                          l1940 0183                          l1926 04C7  
                        l1686 0255                          l1678 023E                          l1694 02BC  
                        l1790 0353                          l1782 031B                          l1838 00AF  
                        l1846 00F3                          l1934 025A                          l1918 04F2  
                        l1774 016A                          l1766 0143                          l1758 0118  
                        l1870 037D                          l1862 0367                          l1950 01D6  
                        l1942 0195                          l1928 04C8                          l1696 02C1  
                        l1792 0359                          l1848 0105                          l1936 0541  
                        l1856 0556                          l1776 0170                          l1768 0149  
                        l1880 0387                          l1872 037E                          l1864 036B  
                        l1952 01E2                          l1944 01A0                          l1698 02C3  
                        l1794 0023                          l1858 0559                          l1890 0397  
                        l1882 0389                          l1874 037F                          l1866 036C  
                        l1946 01AF                          l1938 017E                          l1788 031D  
                        l1796 0028                          l1892 039A                          l1884 038A  
                        l1876 0380                          l1868 0377                          l1948 01BA  
                        l1982 004D                          l1798 002E                          l1894 039D  
                        l1886 0391                          l1878 0381                          l1896 039E  
                        l1888 0394                          l1898 039F                          ?_isr 0070  
                        STR_1 0453                          STR_2 0464                          STR_3 0464  
                        STR_4 0469                          u1110 0237                          u1111 0236  
                        u1200 02EE                          u1105 0227                          u1201 02ED  
                        u1130 024B                          u1050 01F8                          u1131 024A  
                        u1115 0233                          u1051 01F7                          u1140 0250  
                        u1060 0203                          u1220 0301                          u1300 03F8  
                        u1141 024F                          u1125 023F                          u1061 0202  
                        u1221 0300                          u1205 02EA                          u1301 03F7  
                        u1070 0214                          u1230 0306                          u1150 02BC  
                        u1310 0366                          u1071 0213                          u1231 0305  
                        u1215 02F5                          u1151 02BB                          u1311 0365  
                        u1160 02C7                          u1240 03C1                          u1320 002E  
                        u1400 0506                          u1161 02C6                          u1241 03C0  
                        u1321 002D                          u1401 0505                          u1410 04EE  
                        u1090 0226                          u1170 02D2                          u1330 0068  
                        u1411 04ED                          u1091 0225                          u1171 02D1  
                        u1315 0362                          u1331 0067                          u1260 03D3  
                        u1340 008E                          u1085 0218                          u1261 03D2  
                        u1341 008D                          u1190 02E4                          u1350 0099  
                        u1191 02E3                          u1255 03C5                          u1351 0098  
                        u1280 03E4                          u1360 009F                          u1185 02D6  
                        u1281 03E3                          u1361 009E                          u1345 008A  
                        u1370 00F3                          u1275 03D4                          u1371 00F2  
                        u1507 0174                          u1427 038E                          u1380 0105  
                        u1517 04AE                          u1285 03E0                          u1381 0104  
                        u1437 0114                          u1390 04F7                          u1527 04C1  
                        u1295 03EC                          u1391 04F6                          u1447 0124  
                        u1537 0531                          u1457 0133                          u1547 053B  
                        u1467 0140                          u1477 014D                          u1487 015A  
                        u1497 0167                          i1l95 048C                          i1l97 0494  
               ??_Iniciar_LCD 0020                          _dato 0076                          _main 017E  
                        _vol1 0068                          _vol2 0067                          _vol3 0046  
                        btemp 007E                          start 000C                         ??_ADC 0070  
                       ??_isr 0071    __end_of_Escribir_stringLCD 04EF                         ?_main 0070  
             __end_of___awdiv 025A               __end_of___awmod 0310                         _ANSEL 0188  
             ___awdiv@divisor 0020               __end_of___lwdiv 03FD                         i1l183 052B  
             __end_of___lwmod 0439               ___awdiv@counter 0024                         _RCREG 001A  
                       _SPBRG 0099                         _PORTA 0005                         _PORTB 0006  
                       _PORTD 0008                         _PORTE 0009                         _TRISA 0085  
                       _TRISB 0086                         _TRISE 0089                         u93_20 0519  
                       u93_21 0518                         u94_20 0527                         u94_21 0526  
             __end_of_divisor 0367                         _cont1 0048                         _cont2 0047  
             __end_of_dpowers 0453                         _setup 0367                         pclath 000A  
           ??_conversion_char 003D                         status 0003                         wtemp0 007E  
             __end_of_sprintf 010A               __initialization 000F           __end_of_Iniciar_LCD 017E  
                __end_of_main 01F1             _Escribir_datosLCD 0561            ?_Escribir_datosLCD 0070  
                      ??_main 0044           ??_Escribir_datosLCD 0075                        _ADRESH 001E  
            ___awdiv@dividend 0022                        ?_setup 0070                        _ANSELH 0189  
                      u101_20 0472                        u101_21 0471                        u102_20 047E  
                      u102_21 047D                        u103_20 0488                        u103_21 0487  
                      u104_20 0492                        u104_21 0491                        i1l1472 050E  
                      i1l1474 0519                        i1l1476 051E                        i1l1580 047A  
                      i1l1478 0527                        i1l1582 047E                        i1l1574 046C  
                      i1l1584 0482                        i1l1576 0472                        i1l1586 0488  
                      i1l1578 0477                        i1l1588 0492                        _SPBRGH 009A  
                      _Cont_U 0045     __end_of_Escribir_datosLCD 056D                     ??___awdiv 0074  
                   ??___awmod 0074         __end_of_dato_recibido 0555                     ??___lwdiv 0074  
                   ??___lwmod 0075              ___awdiv@quotient 0026               ___awmod@divisor 0020  
             ___awmod@counter 0024                     ??_divisor 0028                        saved_w 007E  
                   ??_sprintf 0033       __end_of__initialization 001C                   _Iniciar_LCD 010A  
              __pcstackCOMMON 0070                 __end_of_setup 03B7                       ??_setup 0022  
                  __pbssBANK0 0045    __size_of_Escribir_datosLCD 000C                    __pmaintext 017E  
                  __pintentry 0004  __size_of_Escribir_comandoLCD 000C      Escribir_datosLCD@LCDchar 0075  
             _conversion_char 025A            _Escribir_stringLCD 04C7                    __stringtab 0439  
                  _conversion 049B           ?_Escribir_stringLCD 0020                       ___awdiv 01F1  
                     ___awmod 02B5                       ___lwdiv 03B7                       ___lwmod 03FD  
                     __ptext1 0367                       __ptext2 010A                       __ptext3 04EF  
                     __ptext4 0555                       __ptext5 0541                       __ptext6 025A  
                     __ptext7 0020                       __ptext8 03FD                       __ptext9 03B7  
                     _buffer1 005D                       _buffer2 0053                       _buffer3 0049  
                __size_of_ADC 001E                       _divisor 0310          ??_Escribir_stringLCD 0076  
                     _dpowers 0449                  __size_of_isr 002F              ___awmod@dividend 0022  
               ?_prender_ELCD 0070                   set_cursor@a 0021                   set_cursor@b 0020  
                     _sprintf 0020                       clrloop0 056E          end_of_initialization 001C  
                  _set_cursor 04EF                     _RCSTAbits 0018       __end_of_conversion_char 02B5  
              ??_prender_ELCD 0074                  ?_Iniciar_LCD 0070                   ?_conversion 0070  
                   _TXSTAbits 0098                    divisor@dig 0075                   _BAUDCTLbits 0187  
         start_initialization 000F                   __end_of_ADC 052C                   __end_of_isr 049B  
      __size_of_dato_recibido 0014           _Escribir_comandoLCD 0555    Escribir_comandoLCD@Comando 0075  
                 ?_set_cursor 0020              ?_conversion_char 0070          ?_Escribir_comandoLCD 0070  
         __size_of_conversion 002C                   __pbssCOMMON 0076                     ___latbits 0002  
               __pcstackBANK0 0020                   sprintf@flag 0037                   sprintf@prec 0038  
        __end_of_prender_ELCD 0541              ___lwdiv@dividend 0022                      ?___awdiv 0020  
                    ?___awmod 0020                      ?___lwdiv 0020                      ?___lwmod 0027  
       ??_Escribir_comandoLCD 0075                 _dato_recibido 0541                     __pstrings 0439  
                    ?_divisor 0075              ___lwdiv@quotient 0025           __size_of_set_cursor 001F  
                    ?_sprintf 002C                __size_of_setup 0050             interrupt_function 0004  
                   clear_ram0 056D                      _PIE1bits 008C          __size_of_Iniciar_LCD 0074  
                    _PIR1bits 000C                ?_dato_recibido 0070                    _ADCON0bits 001F  
                 __stringbase 0448                    _ADCON1bits 009F   __size_of_Escribir_stringLCD 0028  
                ??_conversion 0074           Escribir_stringLCD@d 0020              __size_of___awdiv 0069  
            __size_of___awmod 005B              __size_of___lwdiv 0046              __size_of___lwmod 003C  
          __end_of__stringtab 0449                    sprintf@val 0039              __size_of_divisor 0057  
          __end_of_conversion 04C7               ___lwdiv@divisor 0020               ___lwdiv@counter 0024  
                    __ptext10 0310                      __ptext11 02B5                      __ptext12 01F1  
                    __ptext13 049B                      __ptext14 04C7                      __ptext15 0561  
                    __ptext16 052C                      __ptext17 046C                      __ptext18 050E  
            __size_of_sprintf 00EA         __size_of_prender_ELCD 0015                 __size_of_main 0073  
                ??_set_cursor 0076               ??_dato_recibido 003D                      divisor@a 002A  
                    divisor@b 002B                      divisor@i 002D                    _INTCONbits 000B  
                _prender_ELCD 052C            __end_of_set_cursor 050E                      intlevel1 0000  
                   sprintf@ap 0036                     sprintf@sp 003B              ___lwmod@dividend 0029  
                   stringcode 0443                    _OSCCONbits 008F                      sprintf@c 003C  
                    sprintf@f 002C               ___lwmod@divisor 0027               ___lwmod@counter 002B  
    __size_of_conversion_char 005B                      stringdir 0443                      stringtab 0439  
 __end_of_Escribir_comandoLCD 0561  
