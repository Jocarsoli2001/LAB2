

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Wed Feb 02 11:56:32 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,merge=1,delta=2
    15                           	psect	text8,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 2.20
    21                           ; Generated 12/02/2020 GMT
    22                           ; 
    23                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F887 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000D                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0013                     	;# 
    75  0014                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001B                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  001D                     	;# 
    87  001E                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0086                     	;# 
    92  0087                     	;# 
    93  0088                     	;# 
    94  0089                     	;# 
    95  008C                     	;# 
    96  008D                     	;# 
    97  008E                     	;# 
    98  008F                     	;# 
    99  0090                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0093                     	;# 
   105  0094                     	;# 
   106  0095                     	;# 
   107  0096                     	;# 
   108  0097                     	;# 
   109  0098                     	;# 
   110  0099                     	;# 
   111  009A                     	;# 
   112  009B                     	;# 
   113  009C                     	;# 
   114  009D                     	;# 
   115  009E                     	;# 
   116  009F                     	;# 
   117  0105                     	;# 
   118  0107                     	;# 
   119  0108                     	;# 
   120  0109                     	;# 
   121  010C                     	;# 
   122  010C                     	;# 
   123  010D                     	;# 
   124  010E                     	;# 
   125  010F                     	;# 
   126  0185                     	;# 
   127  0187                     	;# 
   128  0188                     	;# 
   129  0189                     	;# 
   130  018C                     	;# 
   131  018D                     	;# 
   132  0000                     	;# 
   133  0001                     	;# 
   134  0002                     	;# 
   135  0003                     	;# 
   136  0004                     	;# 
   137  0005                     	;# 
   138  0006                     	;# 
   139  0007                     	;# 
   140  0008                     	;# 
   141  0009                     	;# 
   142  000A                     	;# 
   143  000B                     	;# 
   144  000C                     	;# 
   145  000D                     	;# 
   146  000E                     	;# 
   147  000E                     	;# 
   148  000F                     	;# 
   149  0010                     	;# 
   150  0011                     	;# 
   151  0012                     	;# 
   152  0013                     	;# 
   153  0014                     	;# 
   154  0015                     	;# 
   155  0015                     	;# 
   156  0016                     	;# 
   157  0017                     	;# 
   158  0018                     	;# 
   159  0019                     	;# 
   160  001A                     	;# 
   161  001B                     	;# 
   162  001B                     	;# 
   163  001C                     	;# 
   164  001D                     	;# 
   165  001E                     	;# 
   166  001F                     	;# 
   167  0081                     	;# 
   168  0085                     	;# 
   169  0086                     	;# 
   170  0087                     	;# 
   171  0088                     	;# 
   172  0089                     	;# 
   173  008C                     	;# 
   174  008D                     	;# 
   175  008E                     	;# 
   176  008F                     	;# 
   177  0090                     	;# 
   178  0091                     	;# 
   179  0092                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0093                     	;# 
   183  0094                     	;# 
   184  0095                     	;# 
   185  0096                     	;# 
   186  0097                     	;# 
   187  0098                     	;# 
   188  0099                     	;# 
   189  009A                     	;# 
   190  009B                     	;# 
   191  009C                     	;# 
   192  009D                     	;# 
   193  009E                     	;# 
   194  009F                     	;# 
   195  0105                     	;# 
   196  0107                     	;# 
   197  0108                     	;# 
   198  0109                     	;# 
   199  010C                     	;# 
   200  010C                     	;# 
   201  010D                     	;# 
   202  010E                     	;# 
   203  010F                     	;# 
   204  0185                     	;# 
   205  0187                     	;# 
   206  0188                     	;# 
   207  0189                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  0000                     	;# 
   211  0001                     	;# 
   212  0002                     	;# 
   213  0003                     	;# 
   214  0004                     	;# 
   215  0005                     	;# 
   216  0006                     	;# 
   217  0007                     	;# 
   218  0008                     	;# 
   219  0009                     	;# 
   220  000A                     	;# 
   221  000B                     	;# 
   222  000C                     	;# 
   223  000D                     	;# 
   224  000E                     	;# 
   225  000E                     	;# 
   226  000F                     	;# 
   227  0010                     	;# 
   228  0011                     	;# 
   229  0012                     	;# 
   230  0013                     	;# 
   231  0014                     	;# 
   232  0015                     	;# 
   233  0015                     	;# 
   234  0016                     	;# 
   235  0017                     	;# 
   236  0018                     	;# 
   237  0019                     	;# 
   238  001A                     	;# 
   239  001B                     	;# 
   240  001B                     	;# 
   241  001C                     	;# 
   242  001D                     	;# 
   243  001E                     	;# 
   244  001F                     	;# 
   245  0081                     	;# 
   246  0085                     	;# 
   247  0086                     	;# 
   248  0087                     	;# 
   249  0088                     	;# 
   250  0089                     	;# 
   251  008C                     	;# 
   252  008D                     	;# 
   253  008E                     	;# 
   254  008F                     	;# 
   255  0090                     	;# 
   256  0091                     	;# 
   257  0092                     	;# 
   258  0093                     	;# 
   259  0093                     	;# 
   260  0093                     	;# 
   261  0094                     	;# 
   262  0095                     	;# 
   263  0096                     	;# 
   264  0097                     	;# 
   265  0098                     	;# 
   266  0099                     	;# 
   267  009A                     	;# 
   268  009B                     	;# 
   269  009C                     	;# 
   270  009D                     	;# 
   271  009E                     	;# 
   272  009F                     	;# 
   273  0105                     	;# 
   274  0107                     	;# 
   275  0108                     	;# 
   276  0109                     	;# 
   277  010C                     	;# 
   278  010C                     	;# 
   279  010D                     	;# 
   280  010E                     	;# 
   281  010F                     	;# 
   282  0185                     	;# 
   283  0187                     	;# 
   284  0188                     	;# 
   285  0189                     	;# 
   286  018C                     	;# 
   287  018D                     	;# 
   288  000C                     _PIR1bits	set	12
   289  001F                     _ADCON0bits	set	31
   290  0001                     _TMR0	set	1
   291  000B                     _INTCONbits	set	11
   292  0009                     _PORTE	set	9
   293  0007                     _PORTC	set	7
   294  0008                     _PORTD	set	8
   295  0005                     _PORTA	set	5
   296  0038                     _RC0	set	56
   297  0039                     _RC1	set	57
   298  008C                     _PIE1bits	set	140
   299  009F                     _ADCON1bits	set	159
   300  008F                     _OSCCONbits	set	143
   301  0096                     _IOCBbits	set	150
   302  0095                     _WPUBbits	set	149
   303  0081                     _OPTION_REGbits	set	129
   304  0089                     _TRISE	set	137
   305  0088                     _TRISD	set	136
   306  0087                     _TRISC	set	135
   307  0086                     _TRISB	set	134
   308  0085                     _TRISA	set	133
   309  0438                     _TRISC0	set	1080
   310  0439                     _TRISC1	set	1081
   311  0189                     _ANSELH	set	393
   312  0188                     _ANSEL	set	392
   313                           
   314                           	psect	strings
   315  008D                     __pstrings:
   316  008D                     stringtab:
   317  008D                     __stringtab:
   318  008D                     stringcode:	
   319                           ;	String table - string pointers are 1 byte each
   320                           
   321  008D                     stringdir:
   322  008D  3000               	movlw	high stringdir
   323  008E  008A               	movwf	10
   324  008F  0804               	movf	4,w
   325  0090  0A84               	incf	4,f
   326  0091  0782               	addwf	2,f
   327  0092                     __stringbase:
   328  0092  3400               	retlw	0
   329  0093                     __end_of__stringtab:
   330  0093                     STR_3:
   331  0093  344C               	retlw	76	;'L'
   332  0094  346C               	retlw	108	;'l'
   333  0095  3465               	retlw	101	;'e'
   334  0096  3467               	retlw	103	;'g'
   335  0097  3475               	retlw	117	;'u'
   336  0098  3465               	retlw	101	;'e'
   337  0099  3421               	retlw	33	;'!'
   338  009A  3421               	retlw	33	;'!'
   339  009B  3421               	retlw	33	;'!'
   340  009C  3400               	retlw	0
   341  009D                     STR_1:
   342  009D  3448               	retlw	72	;'H'
   343  009E  346F               	retlw	111	;'o'
   344  009F  346C               	retlw	108	;'l'
   345  00A0  3461               	retlw	97	;'a'
   346  00A1  3473               	retlw	115	;'s'
   347  00A2  3420               	retlw	32	;' '
   348  00A3  3478               	retlw	120	;'x'
   349  00A4  3431               	retlw	49	;'1'
   350  00A5  3400               	retlw	0
   351  00A6                     STR_2:
   352  00A6  3448               	retlw	72	;'H'
   353  00A7  346F               	retlw	111	;'o'
   354  00A8  346C               	retlw	108	;'l'
   355  00A9  3461               	retlw	97	;'a'
   356  00AA  3473               	retlw	115	;'s'
   357  00AB  3400               	retlw	0
   358                           
   359                           	psect	cinit
   360  000F                     start_initialization:	
   361                           ; #config settings
   362                           
   363  000F                     __initialization:
   364  000F                     end_of_initialization:	
   365                           ;End of C runtime variable initialization code
   366                           
   367  000F                     __end_of__initialization:
   368  000F  0183               	clrf	3
   369  0010  120A  118A  2813   	ljmp	_main	;jump to C main() function
   370                           
   371                           	psect	cstackCOMMON
   372  0070                     __pcstackCOMMON:
   373  0070                     ?_Iniciar_LCD:
   374  0070                     ?_Limpiar_pantallaLCD:	
   375                           ; 1 bytes @ 0x0
   376                           
   377  0070                     ?_Escribir_stringLCD:	
   378                           ; 1 bytes @ 0x0
   379                           
   380  0070                     ?_isr:	
   381                           ; 1 bytes @ 0x0
   382                           
   383  0070                     ??_isr:	
   384                           ; 1 bytes @ 0x0
   385                           
   386  0070                     ?_main:	
   387                           ; 1 bytes @ 0x0
   388                           
   389  0070                     ?_prender_ELCD:	
   390                           ; 1 bytes @ 0x0
   391                           
   392  0070                     ?_Escribir_comandoLCD:	
   393                           ; 1 bytes @ 0x0
   394                           
   395  0070                     ?_Escribir_datosLCD:	
   396                           ; 1 bytes @ 0x0
   397                           
   398                           
   399                           ; 1 bytes @ 0x0
   400  0070                     	ds	2
   401  0072                     ??_prender_ELCD:
   402                           
   403                           ; 1 bytes @ 0x2
   404  0072                     	ds	1
   405  0073                     ??_Escribir_comandoLCD:
   406  0073                     ??_Escribir_datosLCD:	
   407                           ; 1 bytes @ 0x3
   408                           
   409  0073                     Escribir_comandoLCD@Comando:	
   410                           ; 1 bytes @ 0x3
   411                           
   412  0073                     Escribir_datosLCD@LCDchar:	
   413                           ; 1 bytes @ 0x3
   414                           
   415                           
   416                           ; 1 bytes @ 0x3
   417  0073                     	ds	1
   418  0074                     ??_Iniciar_LCD:
   419  0074                     ??_Limpiar_pantallaLCD:	
   420                           ; 1 bytes @ 0x4
   421                           
   422  0074                     ?_set_cursor:	
   423                           ; 1 bytes @ 0x4
   424                           
   425  0074                     ??_Escribir_stringLCD:	
   426                           ; 1 bytes @ 0x4
   427                           
   428  0074                     set_cursor@b:	
   429                           ; 1 bytes @ 0x4
   430                           
   431                           
   432                           ; 1 bytes @ 0x4
   433  0074                     	ds	1
   434  0075                     ??_set_cursor:
   435  0075                     Escribir_stringLCD@d:	
   436                           ; 1 bytes @ 0x5
   437                           
   438  0075                     set_cursor@a:	
   439                           ; 1 bytes @ 0x5
   440                           
   441                           
   442                           ; 1 bytes @ 0x5
   443  0075                     	ds	1
   444  0076                     ??_main:
   445                           
   446                           ; 1 bytes @ 0x6
   447  0076                     	ds	3
   448                           
   449                           	psect	maintext
   450  0013                     __pmaintext:	
   451 ;;
   452 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   453 ;;
   454 ;; *************** function _main *****************
   455 ;; Defined at:
   456 ;;		line 60 in file "LAB2.c"
   457 ;; Parameters:    Size  Location     Type
   458 ;;		None
   459 ;; Auto vars:     Size  Location     Type
   460 ;;		None
   461 ;; Return value:  Size  Location     Type
   462 ;;                  1    wreg      void 
   463 ;; Registers used:
   464 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   465 ;; Tracked objects:
   466 ;;		On entry : B00/0
   467 ;;		On exit  : 0/0
   468 ;;		Unchanged: 0/0
   469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   470 ;;      Params:         0       0       0       0       0
   471 ;;      Locals:         0       0       0       0       0
   472 ;;      Temps:          3       0       0       0       0
   473 ;;      Totals:         3       0       0       0       0
   474 ;;Total ram usage:        3 bytes
   475 ;; Hardware stack levels required when called: 4
   476 ;; This function calls:
   477 ;;		_Escribir_stringLCD
   478 ;;		_Iniciar_LCD
   479 ;;		_Limpiar_pantallaLCD
   480 ;;		_set_cursor
   481 ;; This function is called by:
   482 ;;		Startup code after reset
   483 ;; This function uses a non-reentrant model
   484 ;;
   485                           
   486                           
   487                           ;psect for function _main
   488  0013                     _main:
   489  0013                     l869:	
   490                           ;incstack = 0
   491                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   492                           
   493                           
   494                           ;LAB2.c: 61:     Iniciar_LCD();
   495  0013  120A  118A  206A  120A  118A  	fcall	_Iniciar_LCD
   496  0018                     l62:	
   497                           ;LAB2.c: 62:     while(1){
   498                           
   499                           
   500                           ;LAB2.c: 64:         Limpiar_pantallaLCD();
   501  0018  120A  118A  20FB  120A  118A  	fcall	_Limpiar_pantallaLCD
   502                           
   503                           ;LAB2.c: 65:         set_cursor(1,1);
   504  001D  01F4               	clrf	set_cursor@b
   505  001E  0AF4               	incf	set_cursor@b,f
   506  001F  3001               	movlw	1
   507  0020  120A  118A  20CB  120A  118A  	fcall	_set_cursor
   508  0025                     l871:
   509                           
   510                           ;LAB2.c: 66:         Escribir_stringLCD("Holas x1");
   511  0025  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   512  0026  120A  118A  20AC  120A  118A  	fcall	_Escribir_stringLCD
   513  002B                     l873:
   514                           
   515                           ;LAB2.c: 67:         set_cursor(2,1);
   516  002B  01F4               	clrf	set_cursor@b
   517  002C  0AF4               	incf	set_cursor@b,f
   518  002D  3002               	movlw	2
   519  002E  120A  118A  20CB  120A  118A  	fcall	_set_cursor
   520                           
   521                           ;LAB2.c: 68:         Escribir_stringLCD("Holas");
   522  0033  3014               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   523  0034  120A  118A  20AC  120A  118A  	fcall	_Escribir_stringLCD
   524  0039                     l875:
   525                           
   526                           ;LAB2.c: 69:         _delay((unsigned long)((200)*(4000000/4000.0)));
   527  0039  3002               	movlw	2
   528  003A  00F8               	movwf	??_main+2
   529  003B  3004               	movlw	4
   530  003C  00F7               	movwf	??_main+1
   531  003D  30BA               	movlw	186
   532  003E  00F6               	movwf	??_main
   533  003F                     u77:
   534  003F  0BF6               	decfsz	??_main,f
   535  0040  283F               	goto	u77
   536  0041  0BF7               	decfsz	??_main+1,f
   537  0042  283F               	goto	u77
   538  0043  0BF8               	decfsz	??_main+2,f
   539  0044  283F               	goto	u77
   540  0045  0000               	nop
   541  0046                     l877:
   542                           
   543                           ;LAB2.c: 71:         Limpiar_pantallaLCD();
   544  0046  120A  118A  20FB  120A  118A  	fcall	_Limpiar_pantallaLCD
   545  004B                     l879:
   546                           
   547                           ;LAB2.c: 72:         set_cursor(1,1);
   548  004B  01F4               	clrf	set_cursor@b
   549  004C  0AF4               	incf	set_cursor@b,f
   550  004D  3001               	movlw	1
   551  004E  120A  118A  20CB  120A  118A  	fcall	_set_cursor
   552  0053                     l881:
   553                           
   554                           ;LAB2.c: 73:         Escribir_stringLCD("Llegue!!!");
   555  0053  3001               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   556  0054  120A  118A  20AC  120A  118A  	fcall	_Escribir_stringLCD
   557                           
   558                           ;LAB2.c: 74:         _delay((unsigned long)((200)*(4000000/4000.0)));
   559  0059  3002               	movlw	2
   560  005A  00F8               	movwf	??_main+2
   561  005B  3004               	movlw	4
   562  005C  00F7               	movwf	??_main+1
   563  005D  30BA               	movlw	186
   564  005E  00F6               	movwf	??_main
   565  005F                     u87:
   566  005F  0BF6               	decfsz	??_main,f
   567  0060  285F               	goto	u87
   568  0061  0BF7               	decfsz	??_main+1,f
   569  0062  285F               	goto	u87
   570  0063  0BF8               	decfsz	??_main+2,f
   571  0064  285F               	goto	u87
   572  0065  0000               	nop
   573  0066  2818               	goto	l62
   574  0067  120A  118A  280C   	ljmp	start
   575  006A                     __end_of_main:
   576                           
   577                           	psect	text1
   578  00CB                     __ptext1:	
   579 ;; *************** function _set_cursor *****************
   580 ;; Defined at:
   581 ;;		line 57 in file "LCD.c"
   582 ;; Parameters:    Size  Location     Type
   583 ;;  a               1    wreg     unsigned char 
   584 ;;  b               1    4[COMMON] unsigned char 
   585 ;; Auto vars:     Size  Location     Type
   586 ;;  a               1    5[COMMON] unsigned char 
   587 ;; Return value:  Size  Location     Type
   588 ;;                  1    wreg      void 
   589 ;; Registers used:
   590 ;;		wreg, status,2, status,0, pclath, cstack
   591 ;; Tracked objects:
   592 ;;		On entry : 0/0
   593 ;;		On exit  : 0/0
   594 ;;		Unchanged: 0/0
   595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   596 ;;      Params:         1       0       0       0       0
   597 ;;      Locals:         1       0       0       0       0
   598 ;;      Temps:          0       0       0       0       0
   599 ;;      Totals:         2       0       0       0       0
   600 ;;Total ram usage:        2 bytes
   601 ;; Hardware stack levels used: 1
   602 ;; Hardware stack levels required when called: 3
   603 ;; This function calls:
   604 ;;		_Escribir_comandoLCD
   605 ;; This function is called by:
   606 ;;		_main
   607 ;; This function uses a non-reentrant model
   608 ;;
   609                           
   610                           
   611                           ;psect for function _set_cursor
   612  00CB                     _set_cursor:
   613                           
   614                           ;incstack = 0
   615                           ; Regs used in _set_cursor: [wreg+status,2+status,0+pclath+cstack]
   616                           ;set_cursor@a stored from wreg
   617  00CB  00F5               	movwf	set_cursor@a
   618  00CC                     l853:
   619                           
   620                           ;LCD.c: 58:     if(a == 1){
   621  00CC  0375               	decf	set_cursor@a,w
   622  00CD  1D03               	btfss	3,2
   623  00CE  28D0               	goto	u41
   624  00CF  28D1               	goto	u40
   625  00D0                     u41:
   626  00D0  28D8               	goto	l857
   627  00D1                     u40:
   628  00D1                     l855:
   629                           
   630                           ;LCD.c: 59:         Escribir_comandoLCD(0x80 + (b-1));
   631  00D1  0874               	movf	set_cursor@b,w
   632  00D2  3E7F               	addlw	127
   633  00D3  120A  118A  210B  120A  118A  	fcall	_Escribir_comandoLCD
   634  00D8                     l857:
   635                           
   636                           ;LCD.c: 61:     if(a == 2){
   637  00D8  3002               	movlw	2
   638  00D9  0675               	xorwf	set_cursor@a,w
   639  00DA  1D03               	btfss	3,2
   640  00DB  28DD               	goto	u51
   641  00DC  28DE               	goto	u50
   642  00DD                     u51:
   643  00DD  28E5               	goto	l111
   644  00DE                     u50:
   645  00DE                     l859:
   646                           
   647                           ;LCD.c: 62:         Escribir_comandoLCD(0xC0 + (b-1));
   648  00DE  0874               	movf	set_cursor@b,w
   649  00DF  3EBF               	addlw	191
   650  00E0  120A  118A  210B  120A  118A  	fcall	_Escribir_comandoLCD
   651  00E5                     l111:
   652  00E5  0008               	return
   653  00E6                     __end_of_set_cursor:
   654                           
   655                           	psect	text2
   656  00FB                     __ptext2:	
   657 ;; *************** function _Limpiar_pantallaLCD *****************
   658 ;; Defined at:
   659 ;;		line 52 in file "LCD.c"
   660 ;; Parameters:    Size  Location     Type
   661 ;;		None
   662 ;; Auto vars:     Size  Location     Type
   663 ;;		None
   664 ;; Return value:  Size  Location     Type
   665 ;;                  1    wreg      void 
   666 ;; Registers used:
   667 ;;		wreg, status,2, status,0, pclath, cstack
   668 ;; Tracked objects:
   669 ;;		On entry : 0/0
   670 ;;		On exit  : 0/0
   671 ;;		Unchanged: 0/0
   672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   673 ;;      Params:         0       0       0       0       0
   674 ;;      Locals:         0       0       0       0       0
   675 ;;      Temps:          2       0       0       0       0
   676 ;;      Totals:         2       0       0       0       0
   677 ;;Total ram usage:        2 bytes
   678 ;; Hardware stack levels used: 1
   679 ;; Hardware stack levels required when called: 3
   680 ;; This function calls:
   681 ;;		_Escribir_comandoLCD
   682 ;; This function is called by:
   683 ;;		_main
   684 ;; This function uses a non-reentrant model
   685 ;;
   686                           
   687                           
   688                           ;psect for function _Limpiar_pantallaLCD
   689  00FB                     _Limpiar_pantallaLCD:
   690  00FB                     l737:	
   691                           ;incstack = 0
   692                           ; Regs used in _Limpiar_pantallaLCD: [wreg+status,2+status,0+pclath+cstack]
   693                           
   694                           
   695                           ;LCD.c: 53:     Escribir_comandoLCD(0x01);
   696  00FB  3001               	movlw	1
   697  00FC  120A  118A  210B  120A  118A  	fcall	_Escribir_comandoLCD
   698  0101                     l739:
   699                           
   700                           ;LCD.c: 54:     _delay((unsigned long)((4)*(8000000/4000.0)));
   701  0101  300B               	movlw	11
   702  0102  00F5               	movwf	??_Limpiar_pantallaLCD+1
   703  0103  3062               	movlw	98
   704  0104  00F4               	movwf	??_Limpiar_pantallaLCD
   705  0105                     u97:
   706  0105  0BF4               	decfsz	??_Limpiar_pantallaLCD,f
   707  0106  2905               	goto	u97
   708  0107  0BF5               	decfsz	??_Limpiar_pantallaLCD+1,f
   709  0108  2905               	goto	u97
   710  0109  0000               	nop
   711  010A                     l106:
   712  010A  0008               	return
   713  010B                     __end_of_Limpiar_pantallaLCD:
   714                           
   715                           	psect	text3
   716  006A                     __ptext3:	
   717 ;; *************** function _Iniciar_LCD *****************
   718 ;; Defined at:
   719 ;;		line 32 in file "LCD.c"
   720 ;; Parameters:    Size  Location     Type
   721 ;;		None
   722 ;; Auto vars:     Size  Location     Type
   723 ;;		None
   724 ;; Return value:  Size  Location     Type
   725 ;;                  1    wreg      void 
   726 ;; Registers used:
   727 ;;		wreg, status,2, status,0, pclath, cstack
   728 ;; Tracked objects:
   729 ;;		On entry : 0/0
   730 ;;		On exit  : 0/0
   731 ;;		Unchanged: 0/0
   732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   733 ;;      Params:         0       0       0       0       0
   734 ;;      Locals:         0       0       0       0       0
   735 ;;      Temps:          0       0       0       0       0
   736 ;;      Totals:         0       0       0       0       0
   737 ;;Total ram usage:        0 bytes
   738 ;; Hardware stack levels used: 1
   739 ;; Hardware stack levels required when called: 3
   740 ;; This function calls:
   741 ;;		_Escribir_comandoLCD
   742 ;; This function is called by:
   743 ;;		_main
   744 ;; This function uses a non-reentrant model
   745 ;;
   746                           
   747                           
   748                           ;psect for function _Iniciar_LCD
   749  006A                     _Iniciar_LCD:
   750  006A                     l721:	
   751                           ;incstack = 0
   752                           ; Regs used in _Iniciar_LCD: [wreg+status,2+status,0+pclath+cstack]
   753                           
   754                           
   755                           ;LCD.c: 33:     RC1 = 0;
   756  006A  1283               	bcf	3,5	;RP0=0, select bank0
   757  006B  1303               	bcf	3,6	;RP1=0, select bank0
   758  006C  1087               	bcf	7,1	;volatile
   759                           
   760                           ;LCD.c: 34:     RC0 = 0;
   761  006D  1007               	bcf	7,0	;volatile
   762  006E                     l723:
   763                           
   764                           ;LCD.c: 35:     PORTD = 0;
   765  006E  0188               	clrf	8	;volatile
   766  006F                     l725:
   767                           
   768                           ;LCD.c: 36:     TRISC1 = 0;
   769  006F  1683               	bsf	3,5	;RP0=1, select bank1
   770  0070  1303               	bcf	3,6	;RP1=0, select bank1
   771  0071  1087               	bcf	7,1	;volatile
   772  0072                     l727:
   773                           
   774                           ;LCD.c: 37:     TRISC0 = 0;
   775  0072  1007               	bcf	7,0	;volatile
   776                           
   777                           ;LCD.c: 38:     TRISD = 0;
   778  0073  0188               	clrf	8	;volatile
   779  0074                     l729:
   780                           
   781                           ;LCD.c: 40:     Escribir_comandoLCD(0x38);
   782  0074  3038               	movlw	56
   783  0075  120A  118A  210B  120A  118A  	fcall	_Escribir_comandoLCD
   784  007A                     l731:
   785                           
   786                           ;LCD.c: 41:     Escribir_comandoLCD(0x0C);
   787  007A  300C               	movlw	12
   788  007B  120A  118A  210B  120A  118A  	fcall	_Escribir_comandoLCD
   789  0080                     l733:
   790                           
   791                           ;LCD.c: 42:     Escribir_comandoLCD(0x01);
   792  0080  3001               	movlw	1
   793  0081  120A  118A  210B  120A  118A  	fcall	_Escribir_comandoLCD
   794  0086                     l735:
   795                           
   796                           ;LCD.c: 43:     Escribir_comandoLCD(0x06);
   797  0086  3006               	movlw	6
   798  0087  120A  118A  210B  120A  118A  	fcall	_Escribir_comandoLCD
   799  008C                     l97:
   800  008C  0008               	return
   801  008D                     __end_of_Iniciar_LCD:
   802                           
   803                           	psect	text4
   804  010B                     __ptext4:	
   805 ;; *************** function _Escribir_comandoLCD *****************
   806 ;; Defined at:
   807 ;;		line 18 in file "LCD.c"
   808 ;; Parameters:    Size  Location     Type
   809 ;;  Comando         1    wreg     unsigned char 
   810 ;; Auto vars:     Size  Location     Type
   811 ;;  Comando         1    3[COMMON] unsigned char 
   812 ;; Return value:  Size  Location     Type
   813 ;;                  1    wreg      void 
   814 ;; Registers used:
   815 ;;		wreg, status,2, status,0, pclath, cstack
   816 ;; Tracked objects:
   817 ;;		On entry : 0/0
   818 ;;		On exit  : 0/0
   819 ;;		Unchanged: 0/0
   820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   821 ;;      Params:         0       0       0       0       0
   822 ;;      Locals:         1       0       0       0       0
   823 ;;      Temps:          0       0       0       0       0
   824 ;;      Totals:         1       0       0       0       0
   825 ;;Total ram usage:        1 bytes
   826 ;; Hardware stack levels used: 1
   827 ;; Hardware stack levels required when called: 2
   828 ;; This function calls:
   829 ;;		_prender_ELCD
   830 ;; This function is called by:
   831 ;;		_Iniciar_LCD
   832 ;;		_Limpiar_pantallaLCD
   833 ;;		_set_cursor
   834 ;; This function uses a non-reentrant model
   835 ;;
   836                           
   837                           
   838                           ;psect for function _Escribir_comandoLCD
   839  010B                     _Escribir_comandoLCD:
   840                           
   841                           ;incstack = 0
   842                           ; Regs used in _Escribir_comandoLCD: [wreg+status,2+status,0+pclath+cstack]
   843                           ;Escribir_comandoLCD@Comando stored from wreg
   844  010B  00F3               	movwf	Escribir_comandoLCD@Comando
   845  010C                     l709:
   846                           
   847                           ;LCD.c: 19:     RC0 = 0;
   848  010C  1283               	bcf	3,5	;RP0=0, select bank0
   849  010D  1303               	bcf	3,6	;RP1=0, select bank0
   850  010E  1007               	bcf	7,0	;volatile
   851  010F                     l711:
   852                           
   853                           ;LCD.c: 20:     PORTD = Comando;
   854  010F  0873               	movf	Escribir_comandoLCD@Comando,w
   855  0110  0088               	movwf	8	;volatile
   856  0111                     l713:
   857                           
   858                           ;LCD.c: 22:     prender_ELCD();
   859  0111  120A  118A  20E6  120A  118A  	fcall	_prender_ELCD
   860  0116                     l91:
   861  0116  0008               	return
   862  0117                     __end_of_Escribir_comandoLCD:
   863                           
   864                           	psect	text5
   865  00AC                     __ptext5:	
   866 ;; *************** function _Escribir_stringLCD *****************
   867 ;; Defined at:
   868 ;;		line 46 in file "LCD.c"
   869 ;; Parameters:    Size  Location     Type
   870 ;;  d               1    wreg     PTR const unsigned char 
   871 ;;		 -> STR_3(10), STR_2(6), STR_1(9), 
   872 ;; Auto vars:     Size  Location     Type
   873 ;;  d               1    5[COMMON] PTR const unsigned char 
   874 ;;		 -> STR_3(10), STR_2(6), STR_1(9), 
   875 ;; Return value:  Size  Location     Type
   876 ;;                  1    wreg      void 
   877 ;; Registers used:
   878 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   879 ;; Tracked objects:
   880 ;;		On entry : 0/0
   881 ;;		On exit  : 0/0
   882 ;;		Unchanged: 0/0
   883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   884 ;;      Params:         0       0       0       0       0
   885 ;;      Locals:         1       0       0       0       0
   886 ;;      Temps:          1       0       0       0       0
   887 ;;      Totals:         2       0       0       0       0
   888 ;;Total ram usage:        2 bytes
   889 ;; Hardware stack levels used: 1
   890 ;; Hardware stack levels required when called: 3
   891 ;; This function calls:
   892 ;;		_Escribir_datosLCD
   893 ;; This function is called by:
   894 ;;		_main
   895 ;; This function uses a non-reentrant model
   896 ;;
   897                           
   898                           
   899                           ;psect for function _Escribir_stringLCD
   900  00AC                     _Escribir_stringLCD:
   901                           
   902                           ;incstack = 0
   903                           ; Regs used in _Escribir_stringLCD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   904                           ;Escribir_stringLCD@d stored from wreg
   905  00AC  00F5               	movwf	Escribir_stringLCD@d
   906  00AD                     l861:
   907                           
   908                           ;LCD.c: 47:     while(*d){
   909  00AD  28BE               	goto	l867
   910  00AE                     l863:
   911                           
   912                           ;LCD.c: 48:         Escribir_datosLCD(*d++);
   913  00AE  0875               	movf	Escribir_stringLCD@d,w
   914  00AF  0084               	movwf	4
   915  00B0  120A  118A  208D  120A  118A  	fcall	stringdir
   916  00B5  120A  118A  2117  120A  118A  	fcall	_Escribir_datosLCD
   917  00BA                     l865:
   918  00BA  3001               	movlw	1
   919  00BB  00F4               	movwf	??_Escribir_stringLCD
   920  00BC  0874               	movf	??_Escribir_stringLCD,w
   921  00BD  07F5               	addwf	Escribir_stringLCD@d,f
   922  00BE                     l867:
   923                           
   924                           ;LCD.c: 47:     while(*d){
   925  00BE  0875               	movf	Escribir_stringLCD@d,w
   926  00BF  0084               	movwf	4
   927  00C0  120A  118A  208D  120A  118A  	fcall	stringdir
   928  00C5  3A00               	xorlw	0
   929  00C6  1D03               	skipz
   930  00C7  28C9               	goto	u61
   931  00C8  28CA               	goto	u60
   932  00C9                     u61:
   933  00C9  28AE               	goto	l863
   934  00CA                     u60:
   935  00CA                     l103:
   936  00CA  0008               	return
   937  00CB                     __end_of_Escribir_stringLCD:
   938                           
   939                           	psect	text6
   940  0117                     __ptext6:	
   941 ;; *************** function _Escribir_datosLCD *****************
   942 ;; Defined at:
   943 ;;		line 25 in file "LCD.c"
   944 ;; Parameters:    Size  Location     Type
   945 ;;  LCDchar         1    wreg     unsigned char 
   946 ;; Auto vars:     Size  Location     Type
   947 ;;  LCDchar         1    3[COMMON] unsigned char 
   948 ;; Return value:  Size  Location     Type
   949 ;;                  1    wreg      void 
   950 ;; Registers used:
   951 ;;		wreg, status,2, status,0, pclath, cstack
   952 ;; Tracked objects:
   953 ;;		On entry : 0/0
   954 ;;		On exit  : 0/0
   955 ;;		Unchanged: 0/0
   956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   957 ;;      Params:         0       0       0       0       0
   958 ;;      Locals:         1       0       0       0       0
   959 ;;      Temps:          0       0       0       0       0
   960 ;;      Totals:         1       0       0       0       0
   961 ;;Total ram usage:        1 bytes
   962 ;; Hardware stack levels used: 1
   963 ;; Hardware stack levels required when called: 2
   964 ;; This function calls:
   965 ;;		_prender_ELCD
   966 ;; This function is called by:
   967 ;;		_Escribir_stringLCD
   968 ;; This function uses a non-reentrant model
   969 ;;
   970                           
   971                           
   972                           ;psect for function _Escribir_datosLCD
   973  0117                     _Escribir_datosLCD:
   974                           
   975                           ;incstack = 0
   976                           ; Regs used in _Escribir_datosLCD: [wreg+status,2+status,0+pclath+cstack]
   977                           ;Escribir_datosLCD@LCDchar stored from wreg
   978  0117  00F3               	movwf	Escribir_datosLCD@LCDchar
   979  0118                     l715:
   980                           
   981                           ;LCD.c: 26:     RC0 = 1;
   982  0118  1283               	bcf	3,5	;RP0=0, select bank0
   983  0119  1303               	bcf	3,6	;RP1=0, select bank0
   984  011A  1407               	bsf	7,0	;volatile
   985  011B                     l717:
   986                           
   987                           ;LCD.c: 27:     PORTD = LCDchar;
   988  011B  0873               	movf	Escribir_datosLCD@LCDchar,w
   989  011C  0088               	movwf	8	;volatile
   990  011D                     l719:
   991                           
   992                           ;LCD.c: 29:     prender_ELCD();
   993  011D  120A  118A  20E6  120A  118A  	fcall	_prender_ELCD
   994  0122                     l94:
   995  0122  0008               	return
   996  0123                     __end_of_Escribir_datosLCD:
   997                           
   998                           	psect	text7
   999  00E6                     __ptext7:	
  1000 ;; *************** function _prender_ELCD *****************
  1001 ;; Defined at:
  1002 ;;		line 11 in file "LCD.c"
  1003 ;; Parameters:    Size  Location     Type
  1004 ;;		None
  1005 ;; Auto vars:     Size  Location     Type
  1006 ;;		None
  1007 ;; Return value:  Size  Location     Type
  1008 ;;                  1    wreg      void 
  1009 ;; Registers used:
  1010 ;;		wreg
  1011 ;; Tracked objects:
  1012 ;;		On entry : 0/0
  1013 ;;		On exit  : 0/0
  1014 ;;		Unchanged: 0/0
  1015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1016 ;;      Params:         0       0       0       0       0
  1017 ;;      Locals:         0       0       0       0       0
  1018 ;;      Temps:          1       0       0       0       0
  1019 ;;      Totals:         1       0       0       0       0
  1020 ;;Total ram usage:        1 bytes
  1021 ;; Hardware stack levels used: 1
  1022 ;; Hardware stack levels required when called: 1
  1023 ;; This function calls:
  1024 ;;		Nothing
  1025 ;; This function is called by:
  1026 ;;		_Escribir_comandoLCD
  1027 ;;		_Escribir_datosLCD
  1028 ;; This function uses a non-reentrant model
  1029 ;;
  1030                           
  1031                           
  1032                           ;psect for function _prender_ELCD
  1033  00E6                     _prender_ELCD:
  1034  00E6                     l703:	
  1035                           ;incstack = 0
  1036                           ; Regs used in _prender_ELCD: [wreg]
  1037                           
  1038                           
  1039                           ;LCD.c: 12:     RC1 = 1;
  1040  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  1041  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  1042  00E8  1487               	bsf	7,1	;volatile
  1043  00E9                     l705:
  1044                           
  1045                           ;LCD.c: 13:     _delay((unsigned long)((500)*(8000000/4000000.0)));
  1046  00E9  30C7               	movlw	199
  1047  00EA  00F2               	movwf	??_prender_ELCD
  1048  00EB                     u107:
  1049  00EB  28EC               	nop2
  1050  00EC  0BF2               	decfsz	??_prender_ELCD,f
  1051  00ED  28EB               	goto	u107
  1052  00EE  28EF               	nop2
  1053  00EF  28F0               	nop2
  1054  00F0                     l707:
  1055                           
  1056                           ;LCD.c: 14:     RC1 = 0;
  1057  00F0  1283               	bcf	3,5	;RP0=0, select bank0
  1058  00F1  1303               	bcf	3,6	;RP1=0, select bank0
  1059  00F2  1087               	bcf	7,1	;volatile
  1060                           
  1061                           ;LCD.c: 15:     _delay((unsigned long)((500)*(8000000/4000000.0)));
  1062  00F3  30C7               	movlw	199
  1063  00F4  00F2               	movwf	??_prender_ELCD
  1064  00F5                     u117:
  1065  00F5  28F6               	nop2
  1066  00F6  0BF2               	decfsz	??_prender_ELCD,f
  1067  00F7  28F5               	goto	u117
  1068  00F8  28F9               	nop2
  1069  00F9  28FA               	nop2
  1070  00FA                     l88:
  1071  00FA  0008               	return
  1072  00FB                     __end_of_prender_ELCD:
  1073                           
  1074                           	psect	text8
  1075  0123                     __ptext8:	
  1076 ;; *************** function _isr *****************
  1077 ;; Defined at:
  1078 ;;		line 55 in file "LAB2.c"
  1079 ;; Parameters:    Size  Location     Type
  1080 ;;		None
  1081 ;; Auto vars:     Size  Location     Type
  1082 ;;		None
  1083 ;; Return value:  Size  Location     Type
  1084 ;;                  1    wreg      void 
  1085 ;; Registers used:
  1086 ;;		None
  1087 ;; Tracked objects:
  1088 ;;		On entry : 0/0
  1089 ;;		On exit  : 0/0
  1090 ;;		Unchanged: 0/0
  1091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1092 ;;      Params:         0       0       0       0       0
  1093 ;;      Locals:         0       0       0       0       0
  1094 ;;      Temps:          2       0       0       0       0
  1095 ;;      Totals:         2       0       0       0       0
  1096 ;;Total ram usage:        2 bytes
  1097 ;; Hardware stack levels used: 1
  1098 ;; This function calls:
  1099 ;;		Nothing
  1100 ;; This function is called by:
  1101 ;;		Interrupt level 1
  1102 ;; This function uses a non-reentrant model
  1103 ;;
  1104                           
  1105                           
  1106                           ;psect for function _isr
  1107  0123                     _isr:
  1108  0123                     i1l57:
  1109  0123  0871               	movf	??_isr+1,w
  1110  0124  008A               	movwf	10
  1111  0125  0E70               	swapf	??_isr,w
  1112  0126  0083               	movwf	3
  1113  0127  0EFE               	swapf	btemp,f
  1114  0128  0E7E               	swapf	btemp,w
  1115  0129  0009               	retfie
  1116  012A                     __end_of_isr:
  1117  007E                     btemp	set	126	;btemp
  1118  007E                     wtemp0	set	126
  1119                           
  1120                           	psect	intentry
  1121  0004                     __pintentry:	
  1122                           ;incstack = 0
  1123                           ; Regs used in _isr: []
  1124                           
  1125  0004                     interrupt_function:
  1126  007E                     saved_w	set	btemp
  1127  0004  00FE               	movwf	btemp
  1128  0005  0E03               	swapf	3,w
  1129  0006  00F0               	movwf	??_isr
  1130  0007  080A               	movf	10,w
  1131  0008  00F1               	movwf	??_isr+1
  1132  0009  120A  118A  2923   	ljmp	_isr
  1133                           
  1134                           	psect	config
  1135                           
  1136                           ;Config register CONFIG1 @ 0x2007
  1137                           ;	Oscillator Selection bits
  1138                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  1139                           ;	Watchdog Timer Enable bit
  1140                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1141                           ;	Power-up Timer Enable bit
  1142                           ;	PWRTE = OFF, PWRT disabled
  1143                           ;	RE3/MCLR pin function select bit
  1144                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1145                           ;	Code Protection bit
  1146                           ;	CP = OFF, Program memory code protection is disabled
  1147                           ;	Data Code Protection bit
  1148                           ;	CPD = OFF, Data memory code protection is disabled
  1149                           ;	Brown Out Reset Selection bits
  1150                           ;	BOREN = OFF, BOR disabled
  1151                           ;	Internal External Switchover bit
  1152                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1153                           ;	Fail-Safe Clock Monitor Enabled bit
  1154                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1155                           ;	Low Voltage Programming Enable bit
  1156                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1157                           ;	In-Circuit Debugger Mode bit
  1158                           ;	DEBUG = 0x1, unprogrammed default
  1159  2007                     	org	8199
  1160  2007  20D4               	dw	8404
  1161                           
  1162                           ;Config register CONFIG2 @ 0x2008
  1163                           ;	Brown-out Reset Selection bit
  1164                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1165                           ;	Flash Program Memory Self Write Enable bits
  1166                           ;	WRT = OFF, Write protection off
  1167  2008                     	org	8200
  1168  2008  3FFF               	dw	16383

Data Sizes:
    Strings     25
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9       9
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Escribir_stringLCD@d	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_3(CODE[10]), STR_2(CODE[6]), STR_1(CODE[9]), 


Critical Paths under _main in COMMON

    _main->_Escribir_stringLCD
    _main->_Limpiar_pantallaLCD
    _main->_set_cursor
    _set_cursor->_Escribir_comandoLCD
    _Limpiar_pantallaLCD->_Escribir_comandoLCD
    _Iniciar_LCD->_Escribir_comandoLCD
    _Escribir_comandoLCD->_prender_ELCD
    _Escribir_stringLCD->_Escribir_datosLCD
    _Escribir_datosLCD->_prender_ELCD

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     520
                                              6 COMMON     3     3      0
                 _Escribir_stringLCD
                        _Iniciar_LCD
                _Limpiar_pantallaLCD
                         _set_cursor
 ---------------------------------------------------------------------------------
 (1) _set_cursor                                           2     1      1     331
                                              4 COMMON     2     1      1
                _Escribir_comandoLCD
 ---------------------------------------------------------------------------------
 (1) _Limpiar_pantallaLCD                                  2     2      0      15
                                              4 COMMON     2     2      0
                _Escribir_comandoLCD
 ---------------------------------------------------------------------------------
 (1) _Iniciar_LCD                                          0     0      0      15
                _Escribir_comandoLCD
 ---------------------------------------------------------------------------------
 (2) _Escribir_comandoLCD                                  1     1      0      15
                                              3 COMMON     1     1      0
                       _prender_ELCD
 ---------------------------------------------------------------------------------
 (1) _Escribir_stringLCD                                   2     2      0     159
                                              4 COMMON     2     2      0
                  _Escribir_datosLCD
 ---------------------------------------------------------------------------------
 (2) _Escribir_datosLCD                                    1     1      0      15
                                              3 COMMON     1     1      0
                       _prender_ELCD
 ---------------------------------------------------------------------------------
 (3) _prender_ELCD                                         1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Escribir_stringLCD
     _Escribir_datosLCD
       _prender_ELCD
   _Iniciar_LCD
     _Escribir_comandoLCD
       _prender_ELCD
   _Limpiar_pantallaLCD
     _Escribir_comandoLCD
   _set_cursor
     _Escribir_comandoLCD

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Wed Feb 02 11:56:32 2022

                           pc 0002                            l62 0018                            l91 0116  
                          l94 0122                            l88 00FA                            l97 008C  
                          u40 00D1                            u41 00D0                            u50 00DE  
                          u51 00DD                            u60 00CA                            u61 00C9  
                          u77 003F                            u87 005F                            u97 0105  
                          fsr 0004                           l103 00CA                           l111 00E5  
                         l106 010A                           l703 00E6                           l711 010F  
                         l705 00E9                           l713 0111                           l721 006A  
                         l707 00F0                           l715 0118                           l731 007A  
                         l723 006E                           l717 011B                           l709 010C  
                         l733 0080                           l725 006F                           l719 011D  
                         l735 0086                           l727 0072                           l729 0074  
                         l737 00FB                           l739 0101                           l861 00AD  
                         l853 00CC                           l863 00AE                           l855 00D1  
                         l871 0025                           l865 00BA                           l857 00D8  
                         l881 0053                           l873 002B                           l867 00BE  
                         l859 00DE                           l875 0039                           l877 0046  
                         l869 0013                           l879 004B                           _RC0 0038  
                         _RC1 0039                           u107 00EB                           u117 00F5  
                         _isr 0123                           fsr0 0004                          ?_isr 0070  
                        STR_1 009D                          STR_2 00A6                          STR_3 0093  
                        i1l57 0123                          _TMR0 0001                 ??_Iniciar_LCD 0074  
                        _main 0013                          btemp 007E                          start 000C  
                       ??_isr 0070    __end_of_Escribir_stringLCD 00CB                         ?_main 0070  
                       _ANSEL 0188                         _PORTA 0005                         _PORTC 0007  
                       _PORTD 0008                         _PORTE 0009                         _TRISA 0085  
                       _TRISB 0086                         _TRISC 0087                         _TRISD 0088  
                       _TRISE 0089           _Limpiar_pantallaLCD 00FB                         pclath 000A  
                       status 0003                         wtemp0 007E               __initialization 000F  
         __end_of_Iniciar_LCD 008D                  __end_of_main 006A             _Escribir_datosLCD 0117  
        ?_Limpiar_pantallaLCD 0070            ?_Escribir_datosLCD 0070                        ??_main 0076  
         ??_Escribir_datosLCD 0073                        _ANSELH 0189                        _TRISC0 0438  
                      _TRISC1 0439     __end_of_Escribir_datosLCD 0123         ??_Limpiar_pantallaLCD 0074  
                      saved_w 007E       __end_of__initialization 000F                   _Iniciar_LCD 006A  
              __pcstackCOMMON 0070                _OPTION_REGbits 0081    __size_of_Escribir_datosLCD 000C  
                  __pmaintext 0013                    __pintentry 0004  __size_of_Escribir_comandoLCD 000C  
    Escribir_datosLCD@LCDchar 0073            _Escribir_stringLCD 00AC                    __stringtab 008D  
         ?_Escribir_stringLCD 0070                       __ptext1 00CB                       __ptext2 00FB  
                     __ptext3 006A                       __ptext4 010B                       __ptext5 00AC  
                     __ptext6 0117                       __ptext7 00E6                       __ptext8 0123  
        ??_Escribir_stringLCD 0074                  __size_of_isr 0007                 ?_prender_ELCD 0070  
                 set_cursor@a 0075                   set_cursor@b 0074          end_of_initialization 000F  
                  _set_cursor 00CB                ??_prender_ELCD 0072                  ?_Iniciar_LCD 0070  
 __end_of_Limpiar_pantallaLCD 010B           start_initialization 000F                   __end_of_isr 012A  
         _Escribir_comandoLCD 010B    Escribir_comandoLCD@Comando 0073                   ?_set_cursor 0074  
        ?_Escribir_comandoLCD 0070                     ___latbits 0002          __end_of_prender_ELCD 00FB  
       ??_Escribir_comandoLCD 0073                     __pstrings 008D           __size_of_set_cursor 001B  
           interrupt_function 0004                      _IOCBbits 0096                      _PIE1bits 008C  
        __size_of_Iniciar_LCD 0023                      _PIR1bits 000C                    _ADCON0bits 001F  
                 __stringbase 0092                    _ADCON1bits 009F   __size_of_Escribir_stringLCD 001F  
                    _WPUBbits 0095           Escribir_stringLCD@d 0075            __end_of__stringtab 0093  
       __size_of_prender_ELCD 0015                 __size_of_main 0057                  ??_set_cursor 0075  
__size_of_Limpiar_pantallaLCD 0010                    _INTCONbits 000B                  _prender_ELCD 00E6  
          __end_of_set_cursor 00E6                      intlevel1 0000                     stringcode 008D  
                  _OSCCONbits 008F                      stringdir 008D                      stringtab 008D  
 __end_of_Escribir_comandoLCD 0117  
